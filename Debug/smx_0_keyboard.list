
smx_0_keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007178  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08007284  08007284  00017284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072f0  080072f0  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  080072f0  080072f0  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  080072f0  080072f0  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072f0  080072f0  000172f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072f4  080072f4  000172f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  080072f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000838  20000204  080074fc  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a3c  080074fc  00020a3c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9a0  00000000  00000000  0002022d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026c2  00000000  00000000  0002bbcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002e290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e0  00000000  00000000  0002ecb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001936c  00000000  00000000  0002f598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d248  00000000  00000000  00048904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008491c  00000000  00000000  00055b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da468  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026a4  00000000  00000000  000da4b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000204 	.word	0x20000204
 8000128:	00000000 	.word	0x00000000
 800012c:	0800726c 	.word	0x0800726c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000208 	.word	0x20000208
 8000148:	0800726c 	.word	0x0800726c

0800014c <check_matrix>:
#define COLS_TO_ITERATE_SIZE sizeof(colsToIterate)/sizeof(colsToIterate[0])

volatile uint8_t matrix_current[ROWS_TO_ITERATE_SIZE][COLS_TO_ITERATE_SIZE] = {{0}};
volatile uint8_t matrix_previous[ROWS_TO_ITERATE_SIZE][COLS_TO_ITERATE_SIZE] = {{0}};

void check_matrix(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

	uint8_t row, col;
	//reset all rows to known state
	for (row = 0; row < ROWS_TO_ITERATE_SIZE; row++){
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e00f      	b.n	8000178 <check_matrix+0x2c>
		HAL_GPIO_WritePin(rowsToIterate[row].port, rowsToIterate[row].pin, GPIO_PIN_RESET);
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	4a34      	ldr	r2, [pc, #208]	; (800022c <check_matrix+0xe0>)
 800015c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000160:	79fb      	ldrb	r3, [r7, #7]
 8000162:	4a32      	ldr	r2, [pc, #200]	; (800022c <check_matrix+0xe0>)
 8000164:	00db      	lsls	r3, r3, #3
 8000166:	4413      	add	r3, r2
 8000168:	889b      	ldrh	r3, [r3, #4]
 800016a:	2200      	movs	r2, #0
 800016c:	4619      	mov	r1, r3
 800016e:	f000 fce4 	bl	8000b3a <HAL_GPIO_WritePin>
	for (row = 0; row < ROWS_TO_ITERATE_SIZE; row++){
 8000172:	79fb      	ldrb	r3, [r7, #7]
 8000174:	3301      	adds	r3, #1
 8000176:	71fb      	strb	r3, [r7, #7]
 8000178:	79fb      	ldrb	r3, [r7, #7]
 800017a:	2b04      	cmp	r3, #4
 800017c:	d9ec      	bls.n	8000158 <check_matrix+0xc>
	}

	//check each key and save status to matrix_current
	for (row = 0; row < ROWS_TO_ITERATE_SIZE; row++){
 800017e:	2300      	movs	r3, #0
 8000180:	71fb      	strb	r3, [r7, #7]
 8000182:	e04a      	b.n	800021a <check_matrix+0xce>
		HAL_GPIO_WritePin(rowsToIterate[row].port, rowsToIterate[row].pin, GPIO_PIN_SET);
 8000184:	79fb      	ldrb	r3, [r7, #7]
 8000186:	4a29      	ldr	r2, [pc, #164]	; (800022c <check_matrix+0xe0>)
 8000188:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800018c:	79fb      	ldrb	r3, [r7, #7]
 800018e:	4a27      	ldr	r2, [pc, #156]	; (800022c <check_matrix+0xe0>)
 8000190:	00db      	lsls	r3, r3, #3
 8000192:	4413      	add	r3, r2
 8000194:	889b      	ldrh	r3, [r3, #4]
 8000196:	2201      	movs	r2, #1
 8000198:	4619      	mov	r1, r3
 800019a:	f000 fcce 	bl	8000b3a <HAL_GPIO_WritePin>
		for(col = 0; col < COLS_TO_ITERATE_SIZE; col++){
 800019e:	2300      	movs	r3, #0
 80001a0:	71bb      	strb	r3, [r7, #6]
 80001a2:	e027      	b.n	80001f4 <check_matrix+0xa8>
			if(HAL_GPIO_ReadPin(colsToIterate[col].port, colsToIterate[col].pin)){
 80001a4:	79bb      	ldrb	r3, [r7, #6]
 80001a6:	4a22      	ldr	r2, [pc, #136]	; (8000230 <check_matrix+0xe4>)
 80001a8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80001ac:	79bb      	ldrb	r3, [r7, #6]
 80001ae:	4920      	ldr	r1, [pc, #128]	; (8000230 <check_matrix+0xe4>)
 80001b0:	00db      	lsls	r3, r3, #3
 80001b2:	440b      	add	r3, r1
 80001b4:	889b      	ldrh	r3, [r3, #4]
 80001b6:	4619      	mov	r1, r3
 80001b8:	4610      	mov	r0, r2
 80001ba:	f000 fca7 	bl	8000b0c <HAL_GPIO_ReadPin>
 80001be:	4603      	mov	r3, r0
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d00a      	beq.n	80001da <check_matrix+0x8e>
				matrix_current[row][col] = 1;
 80001c4:	79fa      	ldrb	r2, [r7, #7]
 80001c6:	79b9      	ldrb	r1, [r7, #6]
 80001c8:	481a      	ldr	r0, [pc, #104]	; (8000234 <check_matrix+0xe8>)
 80001ca:	4613      	mov	r3, r2
 80001cc:	011b      	lsls	r3, r3, #4
 80001ce:	1a9b      	subs	r3, r3, r2
 80001d0:	4403      	add	r3, r0
 80001d2:	440b      	add	r3, r1
 80001d4:	2201      	movs	r2, #1
 80001d6:	701a      	strb	r2, [r3, #0]
 80001d8:	e009      	b.n	80001ee <check_matrix+0xa2>
			} else {
				matrix_current[row][col] = 0;
 80001da:	79fa      	ldrb	r2, [r7, #7]
 80001dc:	79b9      	ldrb	r1, [r7, #6]
 80001de:	4815      	ldr	r0, [pc, #84]	; (8000234 <check_matrix+0xe8>)
 80001e0:	4613      	mov	r3, r2
 80001e2:	011b      	lsls	r3, r3, #4
 80001e4:	1a9b      	subs	r3, r3, r2
 80001e6:	4403      	add	r3, r0
 80001e8:	440b      	add	r3, r1
 80001ea:	2200      	movs	r2, #0
 80001ec:	701a      	strb	r2, [r3, #0]
		for(col = 0; col < COLS_TO_ITERATE_SIZE; col++){
 80001ee:	79bb      	ldrb	r3, [r7, #6]
 80001f0:	3301      	adds	r3, #1
 80001f2:	71bb      	strb	r3, [r7, #6]
 80001f4:	79bb      	ldrb	r3, [r7, #6]
 80001f6:	2b0e      	cmp	r3, #14
 80001f8:	d9d4      	bls.n	80001a4 <check_matrix+0x58>
			}
		}
		HAL_GPIO_WritePin(rowsToIterate[row].port, rowsToIterate[row].pin, GPIO_PIN_RESET);
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	4a0b      	ldr	r2, [pc, #44]	; (800022c <check_matrix+0xe0>)
 80001fe:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	4a09      	ldr	r2, [pc, #36]	; (800022c <check_matrix+0xe0>)
 8000206:	00db      	lsls	r3, r3, #3
 8000208:	4413      	add	r3, r2
 800020a:	889b      	ldrh	r3, [r3, #4]
 800020c:	2200      	movs	r2, #0
 800020e:	4619      	mov	r1, r3
 8000210:	f000 fc93 	bl	8000b3a <HAL_GPIO_WritePin>
	for (row = 0; row < ROWS_TO_ITERATE_SIZE; row++){
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	3301      	adds	r3, #1
 8000218:	71fb      	strb	r3, [r7, #7]
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	2b04      	cmp	r3, #4
 800021e:	d9b1      	bls.n	8000184 <check_matrix+0x38>
	}
	//HAL_Delay(200);

}
 8000220:	bf00      	nop
 8000222:	bf00      	nop
 8000224:	3708      	adds	r7, #8
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	20000000 	.word	0x20000000
 8000230:	20000028 	.word	0x20000028
 8000234:	20000220 	.word	0x20000220

08000238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023c:	f000 f972 	bl	8000524 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000240:	f000 f807 	bl	8000252 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000244:	f000 f862 	bl	800030c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000248:	f006 fc2a 	bl	8006aa0 <MX_USB_DEVICE_Init>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		check_matrix();
 800024c:	f7ff ff7e 	bl	800014c <check_matrix>
 8000250:	e7fc      	b.n	800024c <main+0x14>

08000252 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000252:	b580      	push	{r7, lr}
 8000254:	b094      	sub	sp, #80	; 0x50
 8000256:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000258:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800025c:	2228      	movs	r2, #40	; 0x28
 800025e:	2100      	movs	r1, #0
 8000260:	4618      	mov	r0, r3
 8000262:	f006 fffb 	bl	800725c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000266:	f107 0314 	add.w	r3, r7, #20
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
 8000272:	60da      	str	r2, [r3, #12]
 8000274:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	605a      	str	r2, [r3, #4]
 800027e:	609a      	str	r2, [r3, #8]
 8000280:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000282:	2301      	movs	r3, #1
 8000284:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000286:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800028a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000290:	2301      	movs	r3, #1
 8000292:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000294:	2302      	movs	r3, #2
 8000296:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000298:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800029c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800029e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80002a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002a8:	4618      	mov	r0, r3
 80002aa:	f002 f9b5 	bl	8002618 <HAL_RCC_OscConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002b4:	f000 f8a0 	bl	80003f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b8:	230f      	movs	r3, #15
 80002ba:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002bc:	2302      	movs	r3, #2
 80002be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002c8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80002ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002d0:	f107 0314 	add.w	r3, r7, #20
 80002d4:	2101      	movs	r1, #1
 80002d6:	4618      	mov	r0, r3
 80002d8:	f002 fc20 	bl	8002b1c <HAL_RCC_ClockConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80002e2:	f000 f889 	bl	80003f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002e6:	2310      	movs	r3, #16
 80002e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80002ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002ee:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	4618      	mov	r0, r3
 80002f4:	f002 fd6e 	bl	8002dd4 <HAL_RCCEx_PeriphCLKConfig>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80002fe:	f000 f87b 	bl	80003f8 <Error_Handler>
  }
}
 8000302:	bf00      	nop
 8000304:	3750      	adds	r7, #80	; 0x50
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
	...

0800030c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b088      	sub	sp, #32
 8000310:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000312:	f107 0310 	add.w	r3, r7, #16
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	605a      	str	r2, [r3, #4]
 800031c:	609a      	str	r2, [r3, #8]
 800031e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000320:	4b32      	ldr	r3, [pc, #200]	; (80003ec <MX_GPIO_Init+0xe0>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	4a31      	ldr	r2, [pc, #196]	; (80003ec <MX_GPIO_Init+0xe0>)
 8000326:	f043 0320 	orr.w	r3, r3, #32
 800032a:	6193      	str	r3, [r2, #24]
 800032c:	4b2f      	ldr	r3, [pc, #188]	; (80003ec <MX_GPIO_Init+0xe0>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	f003 0320 	and.w	r3, r3, #32
 8000334:	60fb      	str	r3, [r7, #12]
 8000336:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000338:	4b2c      	ldr	r3, [pc, #176]	; (80003ec <MX_GPIO_Init+0xe0>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	4a2b      	ldr	r2, [pc, #172]	; (80003ec <MX_GPIO_Init+0xe0>)
 800033e:	f043 0304 	orr.w	r3, r3, #4
 8000342:	6193      	str	r3, [r2, #24]
 8000344:	4b29      	ldr	r3, [pc, #164]	; (80003ec <MX_GPIO_Init+0xe0>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	f003 0304 	and.w	r3, r3, #4
 800034c:	60bb      	str	r3, [r7, #8]
 800034e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000350:	4b26      	ldr	r3, [pc, #152]	; (80003ec <MX_GPIO_Init+0xe0>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a25      	ldr	r2, [pc, #148]	; (80003ec <MX_GPIO_Init+0xe0>)
 8000356:	f043 0308 	orr.w	r3, r3, #8
 800035a:	6193      	str	r3, [r2, #24]
 800035c:	4b23      	ldr	r3, [pc, #140]	; (80003ec <MX_GPIO_Init+0xe0>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f003 0308 	and.w	r3, r3, #8
 8000364:	607b      	str	r3, [r7, #4]
 8000366:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
 8000368:	2200      	movs	r2, #0
 800036a:	f44f 714e 	mov.w	r1, #824	; 0x338
 800036e:	4820      	ldr	r0, [pc, #128]	; (80003f0 <MX_GPIO_Init+0xe4>)
 8000370:	f000 fbe3 	bl	8000b3a <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000374:	f248 73ff 	movw	r3, #34815	; 0x87ff
 8000378:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800037a:	2300      	movs	r3, #0
 800037c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037e:	2300      	movs	r3, #0
 8000380:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000382:	f107 0310 	add.w	r3, r7, #16
 8000386:	4619      	mov	r1, r3
 8000388:	481a      	ldr	r0, [pc, #104]	; (80003f4 <MX_GPIO_Init+0xe8>)
 800038a:	f000 fa3b 	bl	8000804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB13 PB15
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15
 800038e:	f64a 43c0 	movw	r3, #44224	; 0xacc0
 8000392:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000394:	2300      	movs	r3, #0
 8000396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000398:	2300      	movs	r3, #0
 800039a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800039c:	f107 0310 	add.w	r3, r7, #16
 80003a0:	4619      	mov	r1, r3
 80003a2:	4813      	ldr	r0, [pc, #76]	; (80003f0 <MX_GPIO_Init+0xe4>)
 80003a4:	f000 fa2e 	bl	8000804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80003a8:	2308      	movs	r3, #8
 80003aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ac:	2301      	movs	r3, #1
 80003ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003b0:	2302      	movs	r3, #2
 80003b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b4:	2302      	movs	r3, #2
 80003b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003b8:	f107 0310 	add.w	r3, r7, #16
 80003bc:	4619      	mov	r1, r3
 80003be:	480c      	ldr	r0, [pc, #48]	; (80003f0 <MX_GPIO_Init+0xe4>)
 80003c0:	f000 fa20 	bl	8000804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 80003c4:	f44f 734c 	mov.w	r3, #816	; 0x330
 80003c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ca:	2301      	movs	r3, #1
 80003cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ce:	2300      	movs	r3, #0
 80003d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d2:	2302      	movs	r3, #2
 80003d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003d6:	f107 0310 	add.w	r3, r7, #16
 80003da:	4619      	mov	r1, r3
 80003dc:	4804      	ldr	r0, [pc, #16]	; (80003f0 <MX_GPIO_Init+0xe4>)
 80003de:	f000 fa11 	bl	8000804 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003e2:	bf00      	nop
 80003e4:	3720      	adds	r7, #32
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	40021000 	.word	0x40021000
 80003f0:	40010c00 	.word	0x40010c00
 80003f4:	40010800 	.word	0x40010800

080003f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003fc:	b672      	cpsid	i
}
 80003fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000400:	e7fe      	b.n	8000400 <Error_Handler+0x8>
	...

08000404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800040a:	4b15      	ldr	r3, [pc, #84]	; (8000460 <HAL_MspInit+0x5c>)
 800040c:	699b      	ldr	r3, [r3, #24]
 800040e:	4a14      	ldr	r2, [pc, #80]	; (8000460 <HAL_MspInit+0x5c>)
 8000410:	f043 0301 	orr.w	r3, r3, #1
 8000414:	6193      	str	r3, [r2, #24]
 8000416:	4b12      	ldr	r3, [pc, #72]	; (8000460 <HAL_MspInit+0x5c>)
 8000418:	699b      	ldr	r3, [r3, #24]
 800041a:	f003 0301 	and.w	r3, r3, #1
 800041e:	60bb      	str	r3, [r7, #8]
 8000420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000422:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <HAL_MspInit+0x5c>)
 8000424:	69db      	ldr	r3, [r3, #28]
 8000426:	4a0e      	ldr	r2, [pc, #56]	; (8000460 <HAL_MspInit+0x5c>)
 8000428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800042c:	61d3      	str	r3, [r2, #28]
 800042e:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <HAL_MspInit+0x5c>)
 8000430:	69db      	ldr	r3, [r3, #28]
 8000432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000436:	607b      	str	r3, [r7, #4]
 8000438:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800043a:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <HAL_MspInit+0x60>)
 800043c:	685b      	ldr	r3, [r3, #4]
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800044e:	60fb      	str	r3, [r7, #12]
 8000450:	4a04      	ldr	r2, [pc, #16]	; (8000464 <HAL_MspInit+0x60>)
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000456:	bf00      	nop
 8000458:	3714      	adds	r7, #20
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr
 8000460:	40021000 	.word	0x40021000
 8000464:	40010000 	.word	0x40010000

08000468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800046c:	e7fe      	b.n	800046c <NMI_Handler+0x4>

0800046e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800046e:	b480      	push	{r7}
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000472:	e7fe      	b.n	8000472 <HardFault_Handler+0x4>

08000474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000478:	e7fe      	b.n	8000478 <MemManage_Handler+0x4>

0800047a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800047a:	b480      	push	{r7}
 800047c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800047e:	e7fe      	b.n	800047e <BusFault_Handler+0x4>

08000480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000484:	e7fe      	b.n	8000484 <UsageFault_Handler+0x4>

08000486 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000486:	b480      	push	{r7}
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800048a:	bf00      	nop
 800048c:	46bd      	mov	sp, r7
 800048e:	bc80      	pop	{r7}
 8000490:	4770      	bx	lr

08000492 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000492:	b480      	push	{r7}
 8000494:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000496:	bf00      	nop
 8000498:	46bd      	mov	sp, r7
 800049a:	bc80      	pop	{r7}
 800049c:	4770      	bx	lr

0800049e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004a2:	bf00      	nop
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr

080004aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ae:	f000 f87f 	bl	80005b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
	...

080004b8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80004be:	f000 fc79 	bl	8000db4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	20000738 	.word	0x20000738

080004cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr

080004d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004d8:	f7ff fff8 	bl	80004cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004dc:	480b      	ldr	r0, [pc, #44]	; (800050c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004de:	490c      	ldr	r1, [pc, #48]	; (8000510 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004e0:	4a0c      	ldr	r2, [pc, #48]	; (8000514 <LoopFillZerobss+0x16>)
  movs r3, #0
 80004e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e4:	e002      	b.n	80004ec <LoopCopyDataInit>

080004e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ea:	3304      	adds	r3, #4

080004ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f0:	d3f9      	bcc.n	80004e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f2:	4a09      	ldr	r2, [pc, #36]	; (8000518 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004f4:	4c09      	ldr	r4, [pc, #36]	; (800051c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f8:	e001      	b.n	80004fe <LoopFillZerobss>

080004fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004fc:	3204      	adds	r2, #4

080004fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000500:	d3fb      	bcc.n	80004fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000502:	f006 fe87 	bl	8007214 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000506:	f7ff fe97 	bl	8000238 <main>
  bx lr
 800050a:	4770      	bx	lr
  ldr r0, =_sdata
 800050c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000510:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8000514:	080072f8 	.word	0x080072f8
  ldr r2, =_sbss
 8000518:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 800051c:	20000a3c 	.word	0x20000a3c

08000520 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000520:	e7fe      	b.n	8000520 <ADC1_2_IRQHandler>
	...

08000524 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000528:	4b08      	ldr	r3, [pc, #32]	; (800054c <HAL_Init+0x28>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a07      	ldr	r2, [pc, #28]	; (800054c <HAL_Init+0x28>)
 800052e:	f043 0310 	orr.w	r3, r3, #16
 8000532:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000534:	2003      	movs	r0, #3
 8000536:	f000 f923 	bl	8000780 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800053a:	200f      	movs	r0, #15
 800053c:	f000 f808 	bl	8000550 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000540:	f7ff ff60 	bl	8000404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000544:	2300      	movs	r3, #0
}
 8000546:	4618      	mov	r0, r3
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40022000 	.word	0x40022000

08000550 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <HAL_InitTick+0x54>)
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <HAL_InitTick+0x58>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	4619      	mov	r1, r3
 8000562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000566:	fbb3 f3f1 	udiv	r3, r3, r1
 800056a:	fbb2 f3f3 	udiv	r3, r2, r3
 800056e:	4618      	mov	r0, r3
 8000570:	f000 f93b 	bl	80007ea <HAL_SYSTICK_Config>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800057a:	2301      	movs	r3, #1
 800057c:	e00e      	b.n	800059c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2b0f      	cmp	r3, #15
 8000582:	d80a      	bhi.n	800059a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000584:	2200      	movs	r2, #0
 8000586:	6879      	ldr	r1, [r7, #4]
 8000588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800058c:	f000 f903 	bl	8000796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000590:	4a06      	ldr	r2, [pc, #24]	; (80005ac <HAL_InitTick+0x5c>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000596:	2300      	movs	r3, #0
 8000598:	e000      	b.n	800059c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800059a:	2301      	movs	r3, #1
}
 800059c:	4618      	mov	r0, r3
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200000a0 	.word	0x200000a0
 80005a8:	200000a8 	.word	0x200000a8
 80005ac:	200000a4 	.word	0x200000a4

080005b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <HAL_IncTick+0x1c>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <HAL_IncTick+0x20>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4413      	add	r3, r2
 80005c0:	4a03      	ldr	r2, [pc, #12]	; (80005d0 <HAL_IncTick+0x20>)
 80005c2:	6013      	str	r3, [r2, #0]
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	200000a8 	.word	0x200000a8
 80005d0:	2000026c 	.word	0x2000026c

080005d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  return uwTick;
 80005d8:	4b02      	ldr	r3, [pc, #8]	; (80005e4 <HAL_GetTick+0x10>)
 80005da:	681b      	ldr	r3, [r3, #0]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr
 80005e4:	2000026c 	.word	0x2000026c

080005e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f003 0307 	and.w	r3, r3, #7
 80005f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <__NVIC_SetPriorityGrouping+0x44>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005fe:	68ba      	ldr	r2, [r7, #8]
 8000600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000604:	4013      	ands	r3, r2
 8000606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800061a:	4a04      	ldr	r2, [pc, #16]	; (800062c <__NVIC_SetPriorityGrouping+0x44>)
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	60d3      	str	r3, [r2, #12]
}
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <__NVIC_GetPriorityGrouping+0x18>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	0a1b      	lsrs	r3, r3, #8
 800063a:	f003 0307 	and.w	r3, r3, #7
}
 800063e:	4618      	mov	r0, r3
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065a:	2b00      	cmp	r3, #0
 800065c:	db0b      	blt.n	8000676 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	f003 021f 	and.w	r2, r3, #31
 8000664:	4906      	ldr	r1, [pc, #24]	; (8000680 <__NVIC_EnableIRQ+0x34>)
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	095b      	lsrs	r3, r3, #5
 800066c:	2001      	movs	r0, #1
 800066e:	fa00 f202 	lsl.w	r2, r0, r2
 8000672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	e000e100 	.word	0xe000e100

08000684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	6039      	str	r1, [r7, #0]
 800068e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000694:	2b00      	cmp	r3, #0
 8000696:	db0a      	blt.n	80006ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	b2da      	uxtb	r2, r3
 800069c:	490c      	ldr	r1, [pc, #48]	; (80006d0 <__NVIC_SetPriority+0x4c>)
 800069e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a2:	0112      	lsls	r2, r2, #4
 80006a4:	b2d2      	uxtb	r2, r2
 80006a6:	440b      	add	r3, r1
 80006a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006ac:	e00a      	b.n	80006c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	4908      	ldr	r1, [pc, #32]	; (80006d4 <__NVIC_SetPriority+0x50>)
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	f003 030f 	and.w	r3, r3, #15
 80006ba:	3b04      	subs	r3, #4
 80006bc:	0112      	lsls	r2, r2, #4
 80006be:	b2d2      	uxtb	r2, r2
 80006c0:	440b      	add	r3, r1
 80006c2:	761a      	strb	r2, [r3, #24]
}
 80006c4:	bf00      	nop
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	e000e100 	.word	0xe000e100
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d8:	b480      	push	{r7}
 80006da:	b089      	sub	sp, #36	; 0x24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	f003 0307 	and.w	r3, r3, #7
 80006ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ec:	69fb      	ldr	r3, [r7, #28]
 80006ee:	f1c3 0307 	rsb	r3, r3, #7
 80006f2:	2b04      	cmp	r3, #4
 80006f4:	bf28      	it	cs
 80006f6:	2304      	movcs	r3, #4
 80006f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	3304      	adds	r3, #4
 80006fe:	2b06      	cmp	r3, #6
 8000700:	d902      	bls.n	8000708 <NVIC_EncodePriority+0x30>
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	3b03      	subs	r3, #3
 8000706:	e000      	b.n	800070a <NVIC_EncodePriority+0x32>
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800070c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000710:	69bb      	ldr	r3, [r7, #24]
 8000712:	fa02 f303 	lsl.w	r3, r2, r3
 8000716:	43da      	mvns	r2, r3
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	401a      	ands	r2, r3
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000720:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	fa01 f303 	lsl.w	r3, r1, r3
 800072a:	43d9      	mvns	r1, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000730:	4313      	orrs	r3, r2
         );
}
 8000732:	4618      	mov	r0, r3
 8000734:	3724      	adds	r7, #36	; 0x24
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr

0800073c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3b01      	subs	r3, #1
 8000748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800074c:	d301      	bcc.n	8000752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800074e:	2301      	movs	r3, #1
 8000750:	e00f      	b.n	8000772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000752:	4a0a      	ldr	r2, [pc, #40]	; (800077c <SysTick_Config+0x40>)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800075a:	210f      	movs	r1, #15
 800075c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000760:	f7ff ff90 	bl	8000684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <SysTick_Config+0x40>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076a:	4b04      	ldr	r3, [pc, #16]	; (800077c <SysTick_Config+0x40>)
 800076c:	2207      	movs	r2, #7
 800076e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000770:	2300      	movs	r3, #0
}
 8000772:	4618      	mov	r0, r3
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	e000e010 	.word	0xe000e010

08000780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff ff2d 	bl	80005e8 <__NVIC_SetPriorityGrouping>
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000796:	b580      	push	{r7, lr}
 8000798:	b086      	sub	sp, #24
 800079a:	af00      	add	r7, sp, #0
 800079c:	4603      	mov	r3, r0
 800079e:	60b9      	str	r1, [r7, #8]
 80007a0:	607a      	str	r2, [r7, #4]
 80007a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007a8:	f7ff ff42 	bl	8000630 <__NVIC_GetPriorityGrouping>
 80007ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	68b9      	ldr	r1, [r7, #8]
 80007b2:	6978      	ldr	r0, [r7, #20]
 80007b4:	f7ff ff90 	bl	80006d8 <NVIC_EncodePriority>
 80007b8:	4602      	mov	r2, r0
 80007ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff5f 	bl	8000684 <__NVIC_SetPriority>
}
 80007c6:	bf00      	nop
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	4603      	mov	r3, r0
 80007d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff35 	bl	800064c <__NVIC_EnableIRQ>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff ffa2 	bl	800073c <SysTick_Config>
 80007f8:	4603      	mov	r3, r0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000804:	b480      	push	{r7}
 8000806:	b08b      	sub	sp, #44	; 0x2c
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000812:	2300      	movs	r3, #0
 8000814:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000816:	e169      	b.n	8000aec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000818:	2201      	movs	r2, #1
 800081a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081c:	fa02 f303 	lsl.w	r3, r2, r3
 8000820:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	69fa      	ldr	r2, [r7, #28]
 8000828:	4013      	ands	r3, r2
 800082a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800082c:	69ba      	ldr	r2, [r7, #24]
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	429a      	cmp	r2, r3
 8000832:	f040 8158 	bne.w	8000ae6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	4a9a      	ldr	r2, [pc, #616]	; (8000aa4 <HAL_GPIO_Init+0x2a0>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d05e      	beq.n	80008fe <HAL_GPIO_Init+0xfa>
 8000840:	4a98      	ldr	r2, [pc, #608]	; (8000aa4 <HAL_GPIO_Init+0x2a0>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d875      	bhi.n	8000932 <HAL_GPIO_Init+0x12e>
 8000846:	4a98      	ldr	r2, [pc, #608]	; (8000aa8 <HAL_GPIO_Init+0x2a4>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d058      	beq.n	80008fe <HAL_GPIO_Init+0xfa>
 800084c:	4a96      	ldr	r2, [pc, #600]	; (8000aa8 <HAL_GPIO_Init+0x2a4>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d86f      	bhi.n	8000932 <HAL_GPIO_Init+0x12e>
 8000852:	4a96      	ldr	r2, [pc, #600]	; (8000aac <HAL_GPIO_Init+0x2a8>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d052      	beq.n	80008fe <HAL_GPIO_Init+0xfa>
 8000858:	4a94      	ldr	r2, [pc, #592]	; (8000aac <HAL_GPIO_Init+0x2a8>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d869      	bhi.n	8000932 <HAL_GPIO_Init+0x12e>
 800085e:	4a94      	ldr	r2, [pc, #592]	; (8000ab0 <HAL_GPIO_Init+0x2ac>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d04c      	beq.n	80008fe <HAL_GPIO_Init+0xfa>
 8000864:	4a92      	ldr	r2, [pc, #584]	; (8000ab0 <HAL_GPIO_Init+0x2ac>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d863      	bhi.n	8000932 <HAL_GPIO_Init+0x12e>
 800086a:	4a92      	ldr	r2, [pc, #584]	; (8000ab4 <HAL_GPIO_Init+0x2b0>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d046      	beq.n	80008fe <HAL_GPIO_Init+0xfa>
 8000870:	4a90      	ldr	r2, [pc, #576]	; (8000ab4 <HAL_GPIO_Init+0x2b0>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d85d      	bhi.n	8000932 <HAL_GPIO_Init+0x12e>
 8000876:	2b12      	cmp	r3, #18
 8000878:	d82a      	bhi.n	80008d0 <HAL_GPIO_Init+0xcc>
 800087a:	2b12      	cmp	r3, #18
 800087c:	d859      	bhi.n	8000932 <HAL_GPIO_Init+0x12e>
 800087e:	a201      	add	r2, pc, #4	; (adr r2, 8000884 <HAL_GPIO_Init+0x80>)
 8000880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000884:	080008ff 	.word	0x080008ff
 8000888:	080008d9 	.word	0x080008d9
 800088c:	080008eb 	.word	0x080008eb
 8000890:	0800092d 	.word	0x0800092d
 8000894:	08000933 	.word	0x08000933
 8000898:	08000933 	.word	0x08000933
 800089c:	08000933 	.word	0x08000933
 80008a0:	08000933 	.word	0x08000933
 80008a4:	08000933 	.word	0x08000933
 80008a8:	08000933 	.word	0x08000933
 80008ac:	08000933 	.word	0x08000933
 80008b0:	08000933 	.word	0x08000933
 80008b4:	08000933 	.word	0x08000933
 80008b8:	08000933 	.word	0x08000933
 80008bc:	08000933 	.word	0x08000933
 80008c0:	08000933 	.word	0x08000933
 80008c4:	08000933 	.word	0x08000933
 80008c8:	080008e1 	.word	0x080008e1
 80008cc:	080008f5 	.word	0x080008f5
 80008d0:	4a79      	ldr	r2, [pc, #484]	; (8000ab8 <HAL_GPIO_Init+0x2b4>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d013      	beq.n	80008fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008d6:	e02c      	b.n	8000932 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	623b      	str	r3, [r7, #32]
          break;
 80008de:	e029      	b.n	8000934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	3304      	adds	r3, #4
 80008e6:	623b      	str	r3, [r7, #32]
          break;
 80008e8:	e024      	b.n	8000934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	68db      	ldr	r3, [r3, #12]
 80008ee:	3308      	adds	r3, #8
 80008f0:	623b      	str	r3, [r7, #32]
          break;
 80008f2:	e01f      	b.n	8000934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	330c      	adds	r3, #12
 80008fa:	623b      	str	r3, [r7, #32]
          break;
 80008fc:	e01a      	b.n	8000934 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	689b      	ldr	r3, [r3, #8]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d102      	bne.n	800090c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000906:	2304      	movs	r3, #4
 8000908:	623b      	str	r3, [r7, #32]
          break;
 800090a:	e013      	b.n	8000934 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d105      	bne.n	8000920 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000914:	2308      	movs	r3, #8
 8000916:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	69fa      	ldr	r2, [r7, #28]
 800091c:	611a      	str	r2, [r3, #16]
          break;
 800091e:	e009      	b.n	8000934 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000920:	2308      	movs	r3, #8
 8000922:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	69fa      	ldr	r2, [r7, #28]
 8000928:	615a      	str	r2, [r3, #20]
          break;
 800092a:	e003      	b.n	8000934 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
          break;
 8000930:	e000      	b.n	8000934 <HAL_GPIO_Init+0x130>
          break;
 8000932:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	2bff      	cmp	r3, #255	; 0xff
 8000938:	d801      	bhi.n	800093e <HAL_GPIO_Init+0x13a>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	e001      	b.n	8000942 <HAL_GPIO_Init+0x13e>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	3304      	adds	r3, #4
 8000942:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	2bff      	cmp	r3, #255	; 0xff
 8000948:	d802      	bhi.n	8000950 <HAL_GPIO_Init+0x14c>
 800094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	e002      	b.n	8000956 <HAL_GPIO_Init+0x152>
 8000950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000952:	3b08      	subs	r3, #8
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	210f      	movs	r1, #15
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	fa01 f303 	lsl.w	r3, r1, r3
 8000964:	43db      	mvns	r3, r3
 8000966:	401a      	ands	r2, r3
 8000968:	6a39      	ldr	r1, [r7, #32]
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	fa01 f303 	lsl.w	r3, r1, r3
 8000970:	431a      	orrs	r2, r3
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097e:	2b00      	cmp	r3, #0
 8000980:	f000 80b1 	beq.w	8000ae6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000984:	4b4d      	ldr	r3, [pc, #308]	; (8000abc <HAL_GPIO_Init+0x2b8>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a4c      	ldr	r2, [pc, #304]	; (8000abc <HAL_GPIO_Init+0x2b8>)
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b4a      	ldr	r3, [pc, #296]	; (8000abc <HAL_GPIO_Init+0x2b8>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800099c:	4a48      	ldr	r2, [pc, #288]	; (8000ac0 <HAL_GPIO_Init+0x2bc>)
 800099e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a0:	089b      	lsrs	r3, r3, #2
 80009a2:	3302      	adds	r3, #2
 80009a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ac:	f003 0303 	and.w	r3, r3, #3
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	220f      	movs	r2, #15
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	43db      	mvns	r3, r3
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	4013      	ands	r3, r2
 80009be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a40      	ldr	r2, [pc, #256]	; (8000ac4 <HAL_GPIO_Init+0x2c0>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d013      	beq.n	80009f0 <HAL_GPIO_Init+0x1ec>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a3f      	ldr	r2, [pc, #252]	; (8000ac8 <HAL_GPIO_Init+0x2c4>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d00d      	beq.n	80009ec <HAL_GPIO_Init+0x1e8>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4a3e      	ldr	r2, [pc, #248]	; (8000acc <HAL_GPIO_Init+0x2c8>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d007      	beq.n	80009e8 <HAL_GPIO_Init+0x1e4>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a3d      	ldr	r2, [pc, #244]	; (8000ad0 <HAL_GPIO_Init+0x2cc>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d101      	bne.n	80009e4 <HAL_GPIO_Init+0x1e0>
 80009e0:	2303      	movs	r3, #3
 80009e2:	e006      	b.n	80009f2 <HAL_GPIO_Init+0x1ee>
 80009e4:	2304      	movs	r3, #4
 80009e6:	e004      	b.n	80009f2 <HAL_GPIO_Init+0x1ee>
 80009e8:	2302      	movs	r3, #2
 80009ea:	e002      	b.n	80009f2 <HAL_GPIO_Init+0x1ee>
 80009ec:	2301      	movs	r3, #1
 80009ee:	e000      	b.n	80009f2 <HAL_GPIO_Init+0x1ee>
 80009f0:	2300      	movs	r3, #0
 80009f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009f4:	f002 0203 	and.w	r2, r2, #3
 80009f8:	0092      	lsls	r2, r2, #2
 80009fa:	4093      	lsls	r3, r2
 80009fc:	68fa      	ldr	r2, [r7, #12]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a02:	492f      	ldr	r1, [pc, #188]	; (8000ac0 <HAL_GPIO_Init+0x2bc>)
 8000a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a06:	089b      	lsrs	r3, r3, #2
 8000a08:	3302      	adds	r3, #2
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d006      	beq.n	8000a2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a1c:	4b2d      	ldr	r3, [pc, #180]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a1e:	689a      	ldr	r2, [r3, #8]
 8000a20:	492c      	ldr	r1, [pc, #176]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	608b      	str	r3, [r1, #8]
 8000a28:	e006      	b.n	8000a38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a2c:	689a      	ldr	r2, [r3, #8]
 8000a2e:	69bb      	ldr	r3, [r7, #24]
 8000a30:	43db      	mvns	r3, r3
 8000a32:	4928      	ldr	r1, [pc, #160]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a34:	4013      	ands	r3, r2
 8000a36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d006      	beq.n	8000a52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a44:	4b23      	ldr	r3, [pc, #140]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a46:	68da      	ldr	r2, [r3, #12]
 8000a48:	4922      	ldr	r1, [pc, #136]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	60cb      	str	r3, [r1, #12]
 8000a50:	e006      	b.n	8000a60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a52:	4b20      	ldr	r3, [pc, #128]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a54:	68da      	ldr	r2, [r3, #12]
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	491e      	ldr	r1, [pc, #120]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d006      	beq.n	8000a7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a6c:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a6e:	685a      	ldr	r2, [r3, #4]
 8000a70:	4918      	ldr	r1, [pc, #96]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	604b      	str	r3, [r1, #4]
 8000a78:	e006      	b.n	8000a88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a7a:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a7c:	685a      	ldr	r2, [r3, #4]
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	43db      	mvns	r3, r3
 8000a82:	4914      	ldr	r1, [pc, #80]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a84:	4013      	ands	r3, r2
 8000a86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d021      	beq.n	8000ad8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	490e      	ldr	r1, [pc, #56]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	600b      	str	r3, [r1, #0]
 8000aa0:	e021      	b.n	8000ae6 <HAL_GPIO_Init+0x2e2>
 8000aa2:	bf00      	nop
 8000aa4:	10320000 	.word	0x10320000
 8000aa8:	10310000 	.word	0x10310000
 8000aac:	10220000 	.word	0x10220000
 8000ab0:	10210000 	.word	0x10210000
 8000ab4:	10120000 	.word	0x10120000
 8000ab8:	10110000 	.word	0x10110000
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	40010000 	.word	0x40010000
 8000ac4:	40010800 	.word	0x40010800
 8000ac8:	40010c00 	.word	0x40010c00
 8000acc:	40011000 	.word	0x40011000
 8000ad0:	40011400 	.word	0x40011400
 8000ad4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <HAL_GPIO_Init+0x304>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	4909      	ldr	r1, [pc, #36]	; (8000b08 <HAL_GPIO_Init+0x304>)
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae8:	3301      	adds	r3, #1
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af2:	fa22 f303 	lsr.w	r3, r2, r3
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f47f ae8e 	bne.w	8000818 <HAL_GPIO_Init+0x14>
  }
}
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
 8000b00:	372c      	adds	r7, #44	; 0x2c
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	40010400 	.word	0x40010400

08000b0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	460b      	mov	r3, r1
 8000b16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	689a      	ldr	r2, [r3, #8]
 8000b1c:	887b      	ldrh	r3, [r7, #2]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d002      	beq.n	8000b2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b24:	2301      	movs	r3, #1
 8000b26:	73fb      	strb	r3, [r7, #15]
 8000b28:	e001      	b.n	8000b2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr

08000b3a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b083      	sub	sp, #12
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
 8000b42:	460b      	mov	r3, r1
 8000b44:	807b      	strh	r3, [r7, #2]
 8000b46:	4613      	mov	r3, r2
 8000b48:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b4a:	787b      	ldrb	r3, [r7, #1]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d003      	beq.n	8000b58 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b50:	887a      	ldrh	r2, [r7, #2]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b56:	e003      	b.n	8000b60 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b58:	887b      	ldrh	r3, [r7, #2]
 8000b5a:	041a      	lsls	r2, r3, #16
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	611a      	str	r2, [r3, #16]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr

08000b6a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b6c:	b08b      	sub	sp, #44	; 0x2c
 8000b6e:	af06      	add	r7, sp, #24
 8000b70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d101      	bne.n	8000b7c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e0f1      	b.n	8000d60 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d106      	bne.n	8000b96 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f006 f8b9 	bl	8006d08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2203      	movs	r2, #3
 8000b9a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f002 f9f2 	bl	8002f8c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	687e      	ldr	r6, [r7, #4]
 8000bb0:	466d      	mov	r5, sp
 8000bb2:	f106 0410 	add.w	r4, r6, #16
 8000bb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bba:	6823      	ldr	r3, [r4, #0]
 8000bbc:	602b      	str	r3, [r5, #0]
 8000bbe:	1d33      	adds	r3, r6, #4
 8000bc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bc2:	6838      	ldr	r0, [r7, #0]
 8000bc4:	f002 f9bc 	bl	8002f40 <USB_CoreInit>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d005      	beq.n	8000bda <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2202      	movs	r2, #2
 8000bd2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e0c2      	b.n	8000d60 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f002 f9ed 	bl	8002fc0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000be6:	2300      	movs	r3, #0
 8000be8:	73fb      	strb	r3, [r7, #15]
 8000bea:	e040      	b.n	8000c6e <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	6879      	ldr	r1, [r7, #4]
 8000bf0:	1c5a      	adds	r2, r3, #1
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	4413      	add	r3, r2
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	440b      	add	r3, r1
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
 8000c04:	6879      	ldr	r1, [r7, #4]
 8000c06:	1c5a      	adds	r2, r3, #1
 8000c08:	4613      	mov	r3, r2
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	4413      	add	r3, r2
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	440b      	add	r3, r1
 8000c12:	7bfa      	ldrb	r2, [r7, #15]
 8000c14:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
 8000c18:	6879      	ldr	r1, [r7, #4]
 8000c1a:	1c5a      	adds	r2, r3, #1
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	4413      	add	r3, r2
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	440b      	add	r3, r1
 8000c26:	3303      	adds	r3, #3
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000c2c:	7bfa      	ldrb	r2, [r7, #15]
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	4613      	mov	r3, r2
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	4413      	add	r3, r2
 8000c36:	00db      	lsls	r3, r3, #3
 8000c38:	440b      	add	r3, r1
 8000c3a:	3338      	adds	r3, #56	; 0x38
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c40:	7bfa      	ldrb	r2, [r7, #15]
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	4613      	mov	r3, r2
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	4413      	add	r3, r2
 8000c4a:	00db      	lsls	r3, r3, #3
 8000c4c:	440b      	add	r3, r1
 8000c4e:	333c      	adds	r3, #60	; 0x3c
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c54:	7bfa      	ldrb	r2, [r7, #15]
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	4413      	add	r3, r2
 8000c5e:	00db      	lsls	r3, r3, #3
 8000c60:	440b      	add	r3, r1
 8000c62:	3340      	adds	r3, #64	; 0x40
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	73fb      	strb	r3, [r7, #15]
 8000c6e:	7bfa      	ldrb	r2, [r7, #15]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d3b9      	bcc.n	8000bec <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	73fb      	strb	r3, [r7, #15]
 8000c7c:	e044      	b.n	8000d08 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c7e:	7bfa      	ldrb	r2, [r7, #15]
 8000c80:	6879      	ldr	r1, [r7, #4]
 8000c82:	4613      	mov	r3, r2
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	4413      	add	r3, r2
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	440b      	add	r3, r1
 8000c8c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000c94:	7bfa      	ldrb	r2, [r7, #15]
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	4413      	add	r3, r2
 8000c9e:	00db      	lsls	r3, r3, #3
 8000ca0:	440b      	add	r3, r1
 8000ca2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000ca6:	7bfa      	ldrb	r2, [r7, #15]
 8000ca8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000caa:	7bfa      	ldrb	r2, [r7, #15]
 8000cac:	6879      	ldr	r1, [r7, #4]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	4413      	add	r3, r2
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	440b      	add	r3, r1
 8000cb8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000cc0:	7bfa      	ldrb	r2, [r7, #15]
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	4413      	add	r3, r2
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	440b      	add	r3, r1
 8000cce:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000cd6:	7bfa      	ldrb	r2, [r7, #15]
 8000cd8:	6879      	ldr	r1, [r7, #4]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	4413      	add	r3, r2
 8000ce0:	00db      	lsls	r3, r3, #3
 8000ce2:	440b      	add	r3, r1
 8000ce4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000cec:	7bfa      	ldrb	r2, [r7, #15]
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	4413      	add	r3, r2
 8000cf6:	00db      	lsls	r3, r3, #3
 8000cf8:	440b      	add	r3, r1
 8000cfa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	3301      	adds	r3, #1
 8000d06:	73fb      	strb	r3, [r7, #15]
 8000d08:	7bfa      	ldrb	r2, [r7, #15]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d3b5      	bcc.n	8000c7e <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	687e      	ldr	r6, [r7, #4]
 8000d1a:	466d      	mov	r5, sp
 8000d1c:	f106 0410 	add.w	r4, r6, #16
 8000d20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d24:	6823      	ldr	r3, [r4, #0]
 8000d26:	602b      	str	r3, [r5, #0]
 8000d28:	1d33      	adds	r3, r6, #4
 8000d2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d2c:	6838      	ldr	r0, [r7, #0]
 8000d2e:	f002 f953 	bl	8002fd8 <USB_DevInit>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d005      	beq.n	8000d44 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	e00d      	b.n	8000d60 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2200      	movs	r2, #0
 8000d48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f004 fbd4 	bl	8005506 <USB_DevDisconnect>

  return HAL_OK;
 8000d5e:	2300      	movs	r3, #0
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d68 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d101      	bne.n	8000d7e <HAL_PCD_Start+0x16>
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	e016      	b.n	8000dac <HAL_PCD_Start+0x44>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2201      	movs	r2, #1
 8000d82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f002 f8e8 	bl	8002f60 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000d90:	2101      	movs	r1, #1
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f006 fa07 	bl	80071a6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f004 fba8 	bl	80054f2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000daa:	2300      	movs	r3, #0
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b088      	sub	sp, #32
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f004 fbaa 	bl	800551a <USB_ReadInterrupts>
 8000dc6:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d003      	beq.n	8000dda <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f000 fb04 	bl	80013e0 <PCD_EP_ISR_Handler>

    return;
 8000dd8:	e119      	b.n	800100e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d013      	beq.n	8000e0c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000df6:	b292      	uxth	r2, r2
 8000df8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f005 fffe 	bl	8006dfe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000e02:	2100      	movs	r1, #0
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f000 f905 	bl	8001014 <HAL_PCD_SetAddress>

    return;
 8000e0a:	e100      	b.n	800100e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d00c      	beq.n	8000e30 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000e28:	b292      	uxth	r2, r2
 8000e2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000e2e:	e0ee      	b.n	800100e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d00c      	beq.n	8000e54 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e4c:	b292      	uxth	r2, r2
 8000e4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000e52:	e0dc      	b.n	800100e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d027      	beq.n	8000eae <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f022 0204 	bic.w	r2, r2, #4
 8000e70:	b292      	uxth	r2, r2
 8000e72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f022 0208 	bic.w	r2, r2, #8
 8000e88:	b292      	uxth	r2, r2
 8000e8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f005 ffee 	bl	8006e70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000ea6:	b292      	uxth	r2, r2
 8000ea8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000eac:	e0af      	b.n	800100e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	f000 8083 	beq.w	8000fc0 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	77fb      	strb	r3, [r7, #31]
 8000ebe:	e010      	b.n	8000ee2 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	7ffb      	ldrb	r3, [r7, #31]
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	441a      	add	r2, r3
 8000ecc:	7ffb      	ldrb	r3, [r7, #31]
 8000ece:	8812      	ldrh	r2, [r2, #0]
 8000ed0:	b292      	uxth	r2, r2
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	3320      	adds	r3, #32
 8000ed6:	443b      	add	r3, r7
 8000ed8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8000edc:	7ffb      	ldrb	r3, [r7, #31]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	77fb      	strb	r3, [r7, #31]
 8000ee2:	7ffb      	ldrb	r3, [r7, #31]
 8000ee4:	2b07      	cmp	r3, #7
 8000ee6:	d9eb      	bls.n	8000ec0 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f042 0201 	orr.w	r2, r2, #1
 8000efa:	b292      	uxth	r2, r2
 8000efc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f022 0201 	bic.w	r2, r2, #1
 8000f12:	b292      	uxth	r2, r2
 8000f14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000f18:	bf00      	nop
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d0f6      	beq.n	8000f1a <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000f44:	2300      	movs	r3, #0
 8000f46:	77fb      	strb	r3, [r7, #31]
 8000f48:	e00f      	b.n	8000f6a <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000f4a:	7ffb      	ldrb	r3, [r7, #31]
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	6812      	ldr	r2, [r2, #0]
 8000f50:	4611      	mov	r1, r2
 8000f52:	7ffa      	ldrb	r2, [r7, #31]
 8000f54:	0092      	lsls	r2, r2, #2
 8000f56:	440a      	add	r2, r1
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	3320      	adds	r3, #32
 8000f5c:	443b      	add	r3, r7
 8000f5e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000f62:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000f64:	7ffb      	ldrb	r3, [r7, #31]
 8000f66:	3301      	adds	r3, #1
 8000f68:	77fb      	strb	r3, [r7, #31]
 8000f6a:	7ffb      	ldrb	r3, [r7, #31]
 8000f6c:	2b07      	cmp	r3, #7
 8000f6e:	d9ec      	bls.n	8000f4a <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f042 0208 	orr.w	r2, r2, #8
 8000f82:	b292      	uxth	r2, r2
 8000f84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f9a:	b292      	uxth	r2, r2
 8000f9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f042 0204 	orr.w	r2, r2, #4
 8000fb2:	b292      	uxth	r2, r2
 8000fb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f005 ff3f 	bl	8006e3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000fbe:	e026      	b.n	800100e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00f      	beq.n	8000fea <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000fdc:	b292      	uxth	r2, r2
 8000fde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f005 fefd 	bl	8006de2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000fe8:	e011      	b.n	800100e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00c      	beq.n	800100e <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001006:	b292      	uxth	r2, r2
 8001008:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800100c:	bf00      	nop
  }
}
 800100e:	3720      	adds	r7, #32
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001026:	2b01      	cmp	r3, #1
 8001028:	d101      	bne.n	800102e <HAL_PCD_SetAddress+0x1a>
 800102a:	2302      	movs	r3, #2
 800102c:	e013      	b.n	8001056 <HAL_PCD_SetAddress+0x42>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2201      	movs	r2, #1
 8001032:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	78fa      	ldrb	r2, [r7, #3]
 800103a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	78fa      	ldrb	r2, [r7, #3]
 8001044:	4611      	mov	r1, r2
 8001046:	4618      	mov	r0, r3
 8001048:	f004 fa40 	bl	80054cc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b084      	sub	sp, #16
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	4608      	mov	r0, r1
 8001068:	4611      	mov	r1, r2
 800106a:	461a      	mov	r2, r3
 800106c:	4603      	mov	r3, r0
 800106e:	70fb      	strb	r3, [r7, #3]
 8001070:	460b      	mov	r3, r1
 8001072:	803b      	strh	r3, [r7, #0]
 8001074:	4613      	mov	r3, r2
 8001076:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001078:	2300      	movs	r3, #0
 800107a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800107c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001080:	2b00      	cmp	r3, #0
 8001082:	da0e      	bge.n	80010a2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001084:	78fb      	ldrb	r3, [r7, #3]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	1c5a      	adds	r2, r3, #1
 800108c:	4613      	mov	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	4413      	add	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2201      	movs	r2, #1
 800109e:	705a      	strb	r2, [r3, #1]
 80010a0:	e00e      	b.n	80010c0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010a2:	78fb      	ldrb	r3, [r7, #3]
 80010a4:	f003 0207 	and.w	r2, r3, #7
 80010a8:	4613      	mov	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	4413      	add	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2200      	movs	r2, #0
 80010be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80010cc:	883a      	ldrh	r2, [r7, #0]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	78ba      	ldrb	r2, [r7, #2]
 80010d6:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80010d8:	78bb      	ldrb	r3, [r7, #2]
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d102      	bne.n	80010e4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2200      	movs	r2, #0
 80010e2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d101      	bne.n	80010f2 <HAL_PCD_EP_Open+0x94>
 80010ee:	2302      	movs	r3, #2
 80010f0:	e00e      	b.n	8001110 <HAL_PCD_EP_Open+0xb2>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2201      	movs	r2, #1
 80010f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68f9      	ldr	r1, [r7, #12]
 8001100:	4618      	mov	r0, r3
 8001102:	f001 ff89 	bl	8003018 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800110e:	7afb      	ldrb	r3, [r7, #11]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001124:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001128:	2b00      	cmp	r3, #0
 800112a:	da0e      	bge.n	800114a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800112c:	78fb      	ldrb	r3, [r7, #3]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	4613      	mov	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	4413      	add	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2201      	movs	r2, #1
 8001146:	705a      	strb	r2, [r3, #1]
 8001148:	e00e      	b.n	8001168 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800114a:	78fb      	ldrb	r3, [r7, #3]
 800114c:	f003 0207 	and.w	r2, r3, #7
 8001150:	4613      	mov	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2200      	movs	r2, #0
 8001166:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001168:	78fb      	ldrb	r3, [r7, #3]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	b2da      	uxtb	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800117a:	2b01      	cmp	r3, #1
 800117c:	d101      	bne.n	8001182 <HAL_PCD_EP_Close+0x6a>
 800117e:	2302      	movs	r3, #2
 8001180:	e00e      	b.n	80011a0 <HAL_PCD_EP_Close+0x88>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2201      	movs	r2, #1
 8001186:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	68f9      	ldr	r1, [r7, #12]
 8001190:	4618      	mov	r0, r3
 8001192:	f002 fb01 	bl	8003798 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	460b      	mov	r3, r1
 80011b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011b8:	7afb      	ldrb	r3, [r7, #11]
 80011ba:	f003 0207 	and.w	r2, r3, #7
 80011be:	4613      	mov	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	4413      	add	r3, r2
 80011ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	2200      	movs	r2, #0
 80011e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80011e8:	7afb      	ldrb	r3, [r7, #11]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	6979      	ldr	r1, [r7, #20]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f002 fcb8 	bl	8003b70 <USB_EPStartXfer>

  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b086      	sub	sp, #24
 800120e:	af00      	add	r7, sp, #0
 8001210:	60f8      	str	r0, [r7, #12]
 8001212:	607a      	str	r2, [r7, #4]
 8001214:	603b      	str	r3, [r7, #0]
 8001216:	460b      	mov	r3, r1
 8001218:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800121a:	7afb      	ldrb	r3, [r7, #11]
 800121c:	f003 0307 	and.w	r3, r3, #7
 8001220:	1c5a      	adds	r2, r3, #1
 8001222:	4613      	mov	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	4413      	add	r3, r2
 800122e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	683a      	ldr	r2, [r7, #0]
 800123a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	2201      	movs	r2, #1
 8001240:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	2200      	movs	r2, #0
 800124e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	2201      	movs	r2, #1
 8001254:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001256:	7afb      	ldrb	r3, [r7, #11]
 8001258:	f003 0307 	and.w	r3, r3, #7
 800125c:	b2da      	uxtb	r2, r3
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6979      	ldr	r1, [r7, #20]
 8001268:	4618      	mov	r0, r3
 800126a:	f002 fc81 	bl	8003b70 <USB_EPStartXfer>

  return HAL_OK;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001284:	78fb      	ldrb	r3, [r7, #3]
 8001286:	f003 0207 	and.w	r2, r3, #7
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	429a      	cmp	r2, r3
 8001290:	d901      	bls.n	8001296 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e04c      	b.n	8001330 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001296:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800129a:	2b00      	cmp	r3, #0
 800129c:	da0e      	bge.n	80012bc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800129e:	78fb      	ldrb	r3, [r7, #3]
 80012a0:	f003 0307 	and.w	r3, r3, #7
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2201      	movs	r2, #1
 80012b8:	705a      	strb	r2, [r3, #1]
 80012ba:	e00c      	b.n	80012d6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80012bc:	78fa      	ldrb	r2, [r7, #3]
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2200      	movs	r2, #0
 80012d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2201      	movs	r2, #1
 80012da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012dc:	78fb      	ldrb	r3, [r7, #3]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d101      	bne.n	80012f6 <HAL_PCD_EP_SetStall+0x7e>
 80012f2:	2302      	movs	r3, #2
 80012f4:	e01c      	b.n	8001330 <HAL_PCD_EP_SetStall+0xb8>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2201      	movs	r2, #1
 80012fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68f9      	ldr	r1, [r7, #12]
 8001304:	4618      	mov	r0, r3
 8001306:	f003 ffe4 	bl	80052d2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800130a:	78fb      	ldrb	r3, [r7, #3]
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	2b00      	cmp	r3, #0
 8001312:	d108      	bne.n	8001326 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800131e:	4619      	mov	r1, r3
 8001320:	4610      	mov	r0, r2
 8001322:	f004 f909 	bl	8005538 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800132e:	2300      	movs	r3, #0
}
 8001330:	4618      	mov	r0, r3
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001344:	78fb      	ldrb	r3, [r7, #3]
 8001346:	f003 020f 	and.w	r2, r3, #15
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	429a      	cmp	r2, r3
 8001350:	d901      	bls.n	8001356 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e040      	b.n	80013d8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001356:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800135a:	2b00      	cmp	r3, #0
 800135c:	da0e      	bge.n	800137c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800135e:	78fb      	ldrb	r3, [r7, #3]
 8001360:	f003 0307 	and.w	r3, r3, #7
 8001364:	1c5a      	adds	r2, r3, #1
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2201      	movs	r2, #1
 8001378:	705a      	strb	r2, [r3, #1]
 800137a:	e00e      	b.n	800139a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	f003 0207 	and.w	r2, r3, #7
 8001382:	4613      	mov	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2200      	movs	r2, #0
 8001398:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2200      	movs	r2, #0
 800139e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013a0:	78fb      	ldrb	r3, [r7, #3]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d101      	bne.n	80013ba <HAL_PCD_EP_ClrStall+0x82>
 80013b6:	2302      	movs	r3, #2
 80013b8:	e00e      	b.n	80013d8 <HAL_PCD_EP_ClrStall+0xa0>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2201      	movs	r2, #1
 80013be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	68f9      	ldr	r1, [r7, #12]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f003 ffd2 	bl	8005372 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b096      	sub	sp, #88	; 0x58
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80013e8:	e3bf      	b.n	8001b6a <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80013f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	f003 030f 	and.w	r3, r3, #15
 8001400:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001404:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001408:	2b00      	cmp	r3, #0
 800140a:	f040 8179 	bne.w	8001700 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800140e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001412:	f003 0310 	and.w	r3, r3, #16
 8001416:	2b00      	cmp	r3, #0
 8001418:	d152      	bne.n	80014c0 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	b29b      	uxth	r3, r3
 8001422:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800142a:	81fb      	strh	r3, [r7, #14]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	89fb      	ldrh	r3, [r7, #14]
 8001432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800143a:	b29b      	uxth	r3, r3
 800143c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3328      	adds	r3, #40	; 0x28
 8001442:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800144c:	b29b      	uxth	r3, r3
 800144e:	461a      	mov	r2, r3
 8001450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	4413      	add	r3, r2
 8001458:	3302      	adds	r3, #2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	6812      	ldr	r2, [r2, #0]
 8001460:	4413      	add	r3, r2
 8001462:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800146c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800146e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001470:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001472:	695a      	ldr	r2, [r3, #20]
 8001474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001476:	69db      	ldr	r3, [r3, #28]
 8001478:	441a      	add	r2, r3
 800147a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800147c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800147e:	2100      	movs	r1, #0
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f005 fc94 	bl	8006dae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 836b 	beq.w	8001b6a <PCD_EP_ISR_Handler+0x78a>
 8001494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	2b00      	cmp	r3, #0
 800149a:	f040 8366 	bne.w	8001b6a <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	b292      	uxth	r2, r2
 80014b2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80014be:	e354      	b.n	8001b6a <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014c6:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80014d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80014d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d034      	beq.n	8001548 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	461a      	mov	r2, r3
 80014ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	4413      	add	r3, r2
 80014f2:	3306      	adds	r3, #6
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	6812      	ldr	r2, [r2, #0]
 80014fa:	4413      	add	r3, r2
 80014fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001508:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6818      	ldr	r0, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001516:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800151a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800151c:	b29b      	uxth	r3, r3
 800151e:	f004 f85b 	bl	80055d8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	b29a      	uxth	r2, r3
 800152a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800152e:	4013      	ands	r3, r2
 8001530:	823b      	strh	r3, [r7, #16]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	8a3a      	ldrh	r2, [r7, #16]
 8001538:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800153c:	b292      	uxth	r2, r2
 800153e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f005 fc07 	bl	8006d54 <HAL_PCD_SetupStageCallback>
 8001546:	e310      	b.n	8001b6a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001548:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800154c:	2b00      	cmp	r3, #0
 800154e:	f280 830c 	bge.w	8001b6a <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	b29a      	uxth	r2, r3
 800155a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800155e:	4013      	ands	r3, r2
 8001560:	83fb      	strh	r3, [r7, #30]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	8bfa      	ldrh	r2, [r7, #30]
 8001568:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800156c:	b292      	uxth	r2, r2
 800156e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001578:	b29b      	uxth	r3, r3
 800157a:	461a      	mov	r2, r3
 800157c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	4413      	add	r3, r2
 8001584:	3306      	adds	r3, #6
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	6812      	ldr	r2, [r2, #0]
 800158c:	4413      	add	r3, r2
 800158e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800159a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800159c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800159e:	69db      	ldr	r3, [r3, #28]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d019      	beq.n	80015d8 <PCD_EP_ISR_Handler+0x1f8>
 80015a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d015      	beq.n	80015d8 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6818      	ldr	r0, [r3, #0]
 80015b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015b2:	6959      	ldr	r1, [r3, #20]
 80015b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015b6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80015b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015ba:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80015bc:	b29b      	uxth	r3, r3
 80015be:	f004 f80b 	bl	80055d8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80015c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015c4:	695a      	ldr	r2, [r3, #20]
 80015c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	441a      	add	r2, r3
 80015cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015ce:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80015d0:	2100      	movs	r1, #0
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f005 fbd0 	bl	8006d78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80015e2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80015e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f040 82bd 	bne.w	8001b6a <PCD_EP_ISR_Handler+0x78a>
 80015f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80015f4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80015f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80015fc:	f000 82b5 	beq.w	8001b6a <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	61bb      	str	r3, [r7, #24]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800160e:	b29b      	uxth	r3, r3
 8001610:	461a      	mov	r2, r3
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	4413      	add	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	b29b      	uxth	r3, r3
 8001626:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800162a:	b29a      	uxth	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	801a      	strh	r2, [r3, #0]
 8001630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	2b3e      	cmp	r3, #62	; 0x3e
 8001636:	d91d      	bls.n	8001674 <PCD_EP_ISR_Handler+0x294>
 8001638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	095b      	lsrs	r3, r3, #5
 800163e:	647b      	str	r3, [r7, #68]	; 0x44
 8001640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	f003 031f 	and.w	r3, r3, #31
 8001648:	2b00      	cmp	r3, #0
 800164a:	d102      	bne.n	8001652 <PCD_EP_ISR_Handler+0x272>
 800164c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800164e:	3b01      	subs	r3, #1
 8001650:	647b      	str	r3, [r7, #68]	; 0x44
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	b29a      	uxth	r2, r3
 8001658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800165a:	b29b      	uxth	r3, r3
 800165c:	029b      	lsls	r3, r3, #10
 800165e:	b29b      	uxth	r3, r3
 8001660:	4313      	orrs	r3, r2
 8001662:	b29b      	uxth	r3, r3
 8001664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800166c:	b29a      	uxth	r2, r3
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	801a      	strh	r2, [r3, #0]
 8001672:	e026      	b.n	80016c2 <PCD_EP_ISR_Handler+0x2e2>
 8001674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d10a      	bne.n	8001692 <PCD_EP_ISR_Handler+0x2b2>
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	b29b      	uxth	r3, r3
 8001682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800168a:	b29a      	uxth	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	801a      	strh	r2, [r3, #0]
 8001690:	e017      	b.n	80016c2 <PCD_EP_ISR_Handler+0x2e2>
 8001692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	085b      	lsrs	r3, r3, #1
 8001698:	647b      	str	r3, [r7, #68]	; 0x44
 800169a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d002      	beq.n	80016ac <PCD_EP_ISR_Handler+0x2cc>
 80016a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016a8:	3301      	adds	r3, #1
 80016aa:	647b      	str	r3, [r7, #68]	; 0x44
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	881b      	ldrh	r3, [r3, #0]
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	029b      	lsls	r3, r3, #10
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	4313      	orrs	r3, r2
 80016bc:	b29a      	uxth	r2, r3
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016d2:	827b      	strh	r3, [r7, #18]
 80016d4:	8a7b      	ldrh	r3, [r7, #18]
 80016d6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80016da:	827b      	strh	r3, [r7, #18]
 80016dc:	8a7b      	ldrh	r3, [r7, #18]
 80016de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80016e2:	827b      	strh	r3, [r7, #18]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	8a7b      	ldrh	r3, [r7, #18]
 80016ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80016ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80016f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	8013      	strh	r3, [r2, #0]
 80016fe:	e234      	b.n	8001b6a <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001714:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001718:	2b00      	cmp	r3, #0
 800171a:	f280 80fc 	bge.w	8001916 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	b29a      	uxth	r2, r3
 8001730:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001734:	4013      	ands	r3, r2
 8001736:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800174c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001750:	b292      	uxth	r2, r2
 8001752:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001754:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	4413      	add	r3, r2
 8001768:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800176a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800176c:	7b1b      	ldrb	r3, [r3, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d125      	bne.n	80017be <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800177a:	b29b      	uxth	r3, r3
 800177c:	461a      	mov	r2, r3
 800177e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	4413      	add	r3, r2
 8001786:	3306      	adds	r3, #6
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	6812      	ldr	r2, [r2, #0]
 800178e:	4413      	add	r3, r2
 8001790:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800179a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800179e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 8092 	beq.w	80018cc <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6818      	ldr	r0, [r3, #0]
 80017ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ae:	6959      	ldr	r1, [r3, #20]
 80017b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017b2:	88da      	ldrh	r2, [r3, #6]
 80017b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80017b8:	f003 ff0e 	bl	80055d8 <USB_ReadPMA>
 80017bc:	e086      	b.n	80018cc <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80017be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c0:	78db      	ldrb	r3, [r3, #3]
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d10a      	bne.n	80017dc <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80017c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80017ca:	461a      	mov	r2, r3
 80017cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f9d9 	bl	8001b86 <HAL_PCD_EP_DB_Receive>
 80017d4:	4603      	mov	r3, r0
 80017d6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80017da:	e077      	b.n	80018cc <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	461a      	mov	r2, r3
 80017e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017f6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	461a      	mov	r2, r3
 8001800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	441a      	add	r2, r3
 8001808:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800180c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001810:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001818:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800181c:	b29b      	uxth	r3, r3
 800181e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	b29b      	uxth	r3, r3
 8001832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d024      	beq.n	8001884 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001842:	b29b      	uxth	r3, r3
 8001844:	461a      	mov	r2, r3
 8001846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	4413      	add	r3, r2
 800184e:	3302      	adds	r3, #2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6812      	ldr	r2, [r2, #0]
 8001856:	4413      	add	r3, r2
 8001858:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001862:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001866:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800186a:	2b00      	cmp	r3, #0
 800186c:	d02e      	beq.n	80018cc <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6818      	ldr	r0, [r3, #0]
 8001872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001874:	6959      	ldr	r1, [r3, #20]
 8001876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001878:	891a      	ldrh	r2, [r3, #8]
 800187a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800187e:	f003 feab 	bl	80055d8 <USB_ReadPMA>
 8001882:	e023      	b.n	80018cc <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800188c:	b29b      	uxth	r3, r3
 800188e:	461a      	mov	r2, r3
 8001890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	4413      	add	r3, r2
 8001898:	3306      	adds	r3, #6
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	4413      	add	r3, r2
 80018a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018ac:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80018b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d009      	beq.n	80018cc <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6818      	ldr	r0, [r3, #0]
 80018bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018be:	6959      	ldr	r1, [r3, #20]
 80018c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018c2:	895a      	ldrh	r2, [r3, #10]
 80018c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80018c8:	f003 fe86 	bl	80055d8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80018cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ce:	69da      	ldr	r2, [r3, #28]
 80018d0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80018d4:	441a      	add	r2, r3
 80018d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80018da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018dc:	695a      	ldr	r2, [r3, #20]
 80018de:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80018e2:	441a      	add	r2, r3
 80018e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018e6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80018e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d005      	beq.n	80018fc <PCD_EP_ISR_Handler+0x51c>
 80018f0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80018f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d206      	bcs.n	800190a <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80018fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4619      	mov	r1, r3
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f005 fa38 	bl	8006d78 <HAL_PCD_DataOutStageCallback>
 8001908:	e005      	b.n	8001916 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001910:	4618      	mov	r0, r3
 8001912:	f002 f92d 	bl	8003b70 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001916:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800191a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 8123 	beq.w	8001b6a <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001924:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	b29b      	uxth	r3, r3
 800194a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800194e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001952:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	461a      	mov	r2, r3
 800195c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	441a      	add	r2, r3
 8001964:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800196c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001970:	b29b      	uxth	r3, r3
 8001972:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001976:	78db      	ldrb	r3, [r3, #3]
 8001978:	2b01      	cmp	r3, #1
 800197a:	f040 80a2 	bne.w	8001ac2 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 800197e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001986:	7b1b      	ldrb	r3, [r3, #12]
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 8093 	beq.w	8001ab4 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800198e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001996:	2b00      	cmp	r3, #0
 8001998:	d046      	beq.n	8001a28 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800199a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800199c:	785b      	ldrb	r3, [r3, #1]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d126      	bne.n	80019f0 <PCD_EP_ISR_Handler+0x610>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	461a      	mov	r2, r3
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	4413      	add	r3, r2
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	011a      	lsls	r2, r3, #4
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	4413      	add	r3, r2
 80019c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80019c8:	623b      	str	r3, [r7, #32]
 80019ca:	6a3b      	ldr	r3, [r7, #32]
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	801a      	strh	r2, [r3, #0]
 80019da:	6a3b      	ldr	r3, [r7, #32]
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	b29b      	uxth	r3, r3
 80019e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	6a3b      	ldr	r3, [r7, #32]
 80019ec:	801a      	strh	r2, [r3, #0]
 80019ee:	e061      	b.n	8001ab4 <PCD_EP_ISR_Handler+0x6d4>
 80019f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019f2:	785b      	ldrb	r3, [r3, #1]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d15d      	bne.n	8001ab4 <PCD_EP_ISR_Handler+0x6d4>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	461a      	mov	r2, r3
 8001a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a0c:	4413      	add	r3, r2
 8001a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	011a      	lsls	r2, r3, #4
 8001a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a18:	4413      	add	r3, r2
 8001a1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001a1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a22:	2200      	movs	r2, #0
 8001a24:	801a      	strh	r2, [r3, #0]
 8001a26:	e045      	b.n	8001ab4 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a30:	785b      	ldrb	r3, [r3, #1]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d126      	bne.n	8001a84 <PCD_EP_ISR_Handler+0x6a4>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	461a      	mov	r2, r3
 8001a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a4a:	4413      	add	r3, r2
 8001a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	011a      	lsls	r2, r3, #4
 8001a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a56:	4413      	add	r3, r2
 8001a58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a5c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6c:	801a      	strh	r2, [r3, #0]
 8001a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a80:	801a      	strh	r2, [r3, #0]
 8001a82:	e017      	b.n	8001ab4 <PCD_EP_ISR_Handler+0x6d4>
 8001a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a86:	785b      	ldrb	r3, [r3, #1]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d113      	bne.n	8001ab4 <PCD_EP_ISR_Handler+0x6d4>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	461a      	mov	r2, r3
 8001a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a9a:	4413      	add	r3, r2
 8001a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	011a      	lsls	r2, r3, #4
 8001aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aa6:	4413      	add	r3, r2
 8001aa8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001aac:	63bb      	str	r3, [r7, #56]	; 0x38
 8001aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f005 f977 	bl	8006dae <HAL_PCD_DataInStageCallback>
 8001ac0:	e053      	b.n	8001b6a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001ac2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d146      	bne.n	8001b5c <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	461a      	mov	r2, r3
 8001ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	4413      	add	r3, r2
 8001ae2:	3302      	adds	r3, #2
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6812      	ldr	r2, [r2, #0]
 8001aea:	4413      	add	r3, r2
 8001aec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001af6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001afc:	699a      	ldr	r2, [r3, #24]
 8001afe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d907      	bls.n	8001b16 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b08:	699a      	ldr	r2, [r3, #24]
 8001b0a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001b0e:	1ad2      	subs	r2, r2, r3
 8001b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b12:	619a      	str	r2, [r3, #24]
 8001b14:	e002      	b.n	8001b1c <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b18:	2200      	movs	r2, #0
 8001b1a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d106      	bne.n	8001b32 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f005 f93f 	bl	8006dae <HAL_PCD_DataInStageCallback>
 8001b30:	e01b      	b.n	8001b6a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b34:	695a      	ldr	r2, [r3, #20]
 8001b36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001b3a:	441a      	add	r2, r3
 8001b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001b40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b42:	69da      	ldr	r2, [r3, #28]
 8001b44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001b48:	441a      	add	r2, r3
 8001b4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b4c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b54:	4618      	mov	r0, r3
 8001b56:	f002 f80b 	bl	8003b70 <USB_EPStartXfer>
 8001b5a:	e006      	b.n	8001b6a <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001b5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b60:	461a      	mov	r2, r3
 8001b62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f91b 	bl	8001da0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	b21b      	sxth	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f6ff ac37 	blt.w	80013ea <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3758      	adds	r7, #88	; 0x58
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b088      	sub	sp, #32
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	4613      	mov	r3, r2
 8001b92:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b94:	88fb      	ldrh	r3, [r7, #6]
 8001b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d07e      	beq.n	8001c9c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	461a      	mov	r2, r3
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3302      	adds	r3, #2
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	6812      	ldr	r2, [r2, #0]
 8001bba:	4413      	add	r3, r2
 8001bbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bc6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	699a      	ldr	r2, [r3, #24]
 8001bcc:	8b7b      	ldrh	r3, [r7, #26]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d306      	bcc.n	8001be0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	699a      	ldr	r2, [r3, #24]
 8001bd6:	8b7b      	ldrh	r3, [r7, #26]
 8001bd8:	1ad2      	subs	r2, r2, r3
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	619a      	str	r2, [r3, #24]
 8001bde:	e002      	b.n	8001be6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	2200      	movs	r2, #0
 8001be4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d123      	bne.n	8001c36 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c08:	833b      	strh	r3, [r7, #24]
 8001c0a:	8b3b      	ldrh	r3, [r7, #24]
 8001c0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001c10:	833b      	strh	r3, [r7, #24]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	441a      	add	r2, r3
 8001c20:	8b3b      	ldrh	r3, [r7, #24]
 8001c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c36:	88fb      	ldrh	r3, [r7, #6]
 8001c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d01f      	beq.n	8001c80 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c5a:	82fb      	strh	r3, [r7, #22]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	441a      	add	r2, r3
 8001c6a:	8afb      	ldrh	r3, [r7, #22]
 8001c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001c80:	8b7b      	ldrh	r3, [r7, #26]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 8087 	beq.w	8001d96 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6818      	ldr	r0, [r3, #0]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	6959      	ldr	r1, [r3, #20]
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	891a      	ldrh	r2, [r3, #8]
 8001c94:	8b7b      	ldrh	r3, [r7, #26]
 8001c96:	f003 fc9f 	bl	80055d8 <USB_ReadPMA>
 8001c9a:	e07c      	b.n	8001d96 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	4413      	add	r3, r2
 8001cb0:	3306      	adds	r3, #6
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	4413      	add	r3, r2
 8001cba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cc4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	699a      	ldr	r2, [r3, #24]
 8001cca:	8b7b      	ldrh	r3, [r7, #26]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d306      	bcc.n	8001cde <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	699a      	ldr	r2, [r3, #24]
 8001cd4:	8b7b      	ldrh	r3, [r7, #26]
 8001cd6:	1ad2      	subs	r2, r2, r3
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	619a      	str	r2, [r3, #24]
 8001cdc:	e002      	b.n	8001ce4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d123      	bne.n	8001d34 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d06:	83fb      	strh	r3, [r7, #30]
 8001d08:	8bfb      	ldrh	r3, [r7, #30]
 8001d0a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001d0e:	83fb      	strh	r3, [r7, #30]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	461a      	mov	r2, r3
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	441a      	add	r2, r3
 8001d1e:	8bfb      	ldrh	r3, [r7, #30]
 8001d20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001d34:	88fb      	ldrh	r3, [r7, #6]
 8001d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d11f      	bne.n	8001d7e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	461a      	mov	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d58:	83bb      	strh	r3, [r7, #28]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	441a      	add	r2, r3
 8001d68:	8bbb      	ldrh	r3, [r7, #28]
 8001d6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001d7e:	8b7b      	ldrh	r3, [r7, #26]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d008      	beq.n	8001d96 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	6959      	ldr	r1, [r3, #20]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	895a      	ldrh	r2, [r3, #10]
 8001d90:	8b7b      	ldrh	r3, [r7, #26]
 8001d92:	f003 fc21 	bl	80055d8 <USB_ReadPMA>
    }
  }

  return count;
 8001d96:	8b7b      	ldrh	r3, [r7, #26]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3720      	adds	r7, #32
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b0a4      	sub	sp, #144	; 0x90
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	4613      	mov	r3, r2
 8001dac:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001dae:	88fb      	ldrh	r3, [r7, #6]
 8001db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 81dd 	beq.w	8002174 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4413      	add	r3, r2
 8001dce:	3302      	adds	r3, #2
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	6812      	ldr	r2, [r2, #0]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001de2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	699a      	ldr	r2, [r3, #24]
 8001dea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d907      	bls.n	8001e02 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	699a      	ldr	r2, [r3, #24]
 8001df6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001dfa:	1ad2      	subs	r2, r2, r3
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	619a      	str	r2, [r3, #24]
 8001e00:	e002      	b.n	8001e08 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f040 80b9 	bne.w	8001f84 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	785b      	ldrb	r3, [r3, #1]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d126      	bne.n	8001e68 <HAL_PCD_EP_DB_Transmit+0xc8>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e2e:	4413      	add	r3, r2
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	011a      	lsls	r2, r3, #4
 8001e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e40:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e50:	801a      	strh	r2, [r3, #0]
 8001e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e64:	801a      	strh	r2, [r3, #0]
 8001e66:	e01a      	b.n	8001e9e <HAL_PCD_EP_DB_Transmit+0xfe>
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	785b      	ldrb	r3, [r3, #1]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d116      	bne.n	8001e9e <HAL_PCD_EP_DB_Transmit+0xfe>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	637b      	str	r3, [r7, #52]	; 0x34
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	461a      	mov	r2, r3
 8001e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e84:	4413      	add	r3, r2
 8001e86:	637b      	str	r3, [r7, #52]	; 0x34
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	011a      	lsls	r2, r3, #4
 8001e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e90:	4413      	add	r3, r2
 8001e92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e96:	633b      	str	r3, [r7, #48]	; 0x30
 8001e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	785b      	ldrb	r3, [r3, #1]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d126      	bne.n	8001efa <HAL_PCD_EP_DB_Transmit+0x15a>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	61fb      	str	r3, [r7, #28]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	61fb      	str	r3, [r7, #28]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	011a      	lsls	r2, r3, #4
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	4413      	add	r3, r2
 8001ece:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ed2:	61bb      	str	r3, [r7, #24]
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	801a      	strh	r2, [r3, #0]
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	801a      	strh	r2, [r3, #0]
 8001ef8:	e017      	b.n	8001f2a <HAL_PCD_EP_DB_Transmit+0x18a>
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	785b      	ldrb	r3, [r3, #1]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d113      	bne.n	8001f2a <HAL_PCD_EP_DB_Transmit+0x18a>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	4413      	add	r3, r2
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	011a      	lsls	r2, r3, #4
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f22:	623b      	str	r3, [r7, #32]
 8001f24:	6a3b      	ldr	r3, [r7, #32]
 8001f26:	2200      	movs	r2, #0
 8001f28:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	4619      	mov	r1, r3
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f004 ff3c 	bl	8006dae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f36:	88fb      	ldrh	r3, [r7, #6]
 8001f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 82fc 	beq.w	800253a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	461a      	mov	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f5c:	82fb      	strh	r3, [r7, #22]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	441a      	add	r2, r3
 8001f6c:	8afb      	ldrh	r3, [r7, #22]
 8001f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	8013      	strh	r3, [r2, #0]
 8001f82:	e2da      	b.n	800253a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d021      	beq.n	8001fd2 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	461a      	mov	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	441a      	add	r2, r3
 8001fba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8001fbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	f040 82ae 	bne.w	800253a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	695a      	ldr	r2, [r3, #20]
 8001fe2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001fe6:	441a      	add	r2, r3
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	69da      	ldr	r2, [r3, #28]
 8001ff0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001ff4:	441a      	add	r2, r3
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	6a1a      	ldr	r2, [r3, #32]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	429a      	cmp	r2, r3
 8002004:	d30b      	bcc.n	800201e <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	6a1a      	ldr	r2, [r3, #32]
 8002012:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002016:	1ad2      	subs	r2, r2, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	621a      	str	r2, [r3, #32]
 800201c:	e017      	b.n	800204e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d108      	bne.n	8002038 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002026:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800202a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002036:	e00a      	b.n	800204e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	2200      	movs	r2, #0
 800204c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	785b      	ldrb	r3, [r3, #1]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d165      	bne.n	8002122 <HAL_PCD_EP_DB_Transmit+0x382>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002064:	b29b      	uxth	r3, r3
 8002066:	461a      	mov	r2, r3
 8002068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800206a:	4413      	add	r3, r2
 800206c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	011a      	lsls	r2, r3, #4
 8002074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002076:	4413      	add	r3, r2
 8002078:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800207c:	63bb      	str	r3, [r7, #56]	; 0x38
 800207e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	b29b      	uxth	r3, r3
 8002084:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002088:	b29a      	uxth	r2, r3
 800208a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800208c:	801a      	strh	r2, [r3, #0]
 800208e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002092:	2b3e      	cmp	r3, #62	; 0x3e
 8002094:	d91d      	bls.n	80020d2 <HAL_PCD_EP_DB_Transmit+0x332>
 8002096:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	64bb      	str	r3, [r7, #72]	; 0x48
 800209e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020a2:	f003 031f 	and.w	r3, r3, #31
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d102      	bne.n	80020b0 <HAL_PCD_EP_DB_Transmit+0x310>
 80020aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020ac:	3b01      	subs	r3, #1
 80020ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80020b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	029b      	lsls	r3, r3, #10
 80020bc:	b29b      	uxth	r3, r3
 80020be:	4313      	orrs	r3, r2
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ce:	801a      	strh	r2, [r3, #0]
 80020d0:	e044      	b.n	800215c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80020d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10a      	bne.n	80020f0 <HAL_PCD_EP_DB_Transmit+0x350>
 80020da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ec:	801a      	strh	r2, [r3, #0]
 80020ee:	e035      	b.n	800215c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80020f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020f4:	085b      	lsrs	r3, r3, #1
 80020f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80020f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <HAL_PCD_EP_DB_Transmit+0x36a>
 8002104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002106:	3301      	adds	r3, #1
 8002108:	64bb      	str	r3, [r7, #72]	; 0x48
 800210a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	b29a      	uxth	r2, r3
 8002110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002112:	b29b      	uxth	r3, r3
 8002114:	029b      	lsls	r3, r3, #10
 8002116:	b29b      	uxth	r3, r3
 8002118:	4313      	orrs	r3, r2
 800211a:	b29a      	uxth	r2, r3
 800211c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800211e:	801a      	strh	r2, [r3, #0]
 8002120:	e01c      	b.n	800215c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	785b      	ldrb	r3, [r3, #1]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d118      	bne.n	800215c <HAL_PCD_EP_DB_Transmit+0x3bc>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	647b      	str	r3, [r7, #68]	; 0x44
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002138:	b29b      	uxth	r3, r3
 800213a:	461a      	mov	r2, r3
 800213c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800213e:	4413      	add	r3, r2
 8002140:	647b      	str	r3, [r7, #68]	; 0x44
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	011a      	lsls	r2, r3, #4
 8002148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800214a:	4413      	add	r3, r2
 800214c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002150:	643b      	str	r3, [r7, #64]	; 0x40
 8002152:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002156:	b29a      	uxth	r2, r3
 8002158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800215a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6818      	ldr	r0, [r3, #0]
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	6959      	ldr	r1, [r3, #20]
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	891a      	ldrh	r2, [r3, #8]
 8002168:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800216c:	b29b      	uxth	r3, r3
 800216e:	f003 f9ee 	bl	800554e <USB_WritePMA>
 8002172:	e1e2      	b.n	800253a <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800217c:	b29b      	uxth	r3, r3
 800217e:	461a      	mov	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4413      	add	r3, r2
 8002188:	3306      	adds	r3, #6
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	4413      	add	r3, r2
 8002192:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800219c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	699a      	ldr	r2, [r3, #24]
 80021a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d307      	bcc.n	80021bc <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	699a      	ldr	r2, [r3, #24]
 80021b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80021b4:	1ad2      	subs	r2, r2, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	619a      	str	r2, [r3, #24]
 80021ba:	e002      	b.n	80021c2 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2200      	movs	r2, #0
 80021c0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f040 80c0 	bne.w	800234c <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	785b      	ldrb	r3, [r3, #1]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d126      	bne.n	8002222 <HAL_PCD_EP_DB_Transmit+0x482>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	461a      	mov	r2, r3
 80021e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021e8:	4413      	add	r3, r2
 80021ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	011a      	lsls	r2, r3, #4
 80021f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021f4:	4413      	add	r3, r2
 80021f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80021fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80021fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	b29b      	uxth	r3, r3
 8002202:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002206:	b29a      	uxth	r2, r3
 8002208:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800220a:	801a      	strh	r2, [r3, #0]
 800220c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	b29b      	uxth	r3, r3
 8002212:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002216:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800221a:	b29a      	uxth	r2, r3
 800221c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800221e:	801a      	strh	r2, [r3, #0]
 8002220:	e01a      	b.n	8002258 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	785b      	ldrb	r3, [r3, #1]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d116      	bne.n	8002258 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	667b      	str	r3, [r7, #100]	; 0x64
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002238:	b29b      	uxth	r3, r3
 800223a:	461a      	mov	r2, r3
 800223c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800223e:	4413      	add	r3, r2
 8002240:	667b      	str	r3, [r7, #100]	; 0x64
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	011a      	lsls	r2, r3, #4
 8002248:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800224a:	4413      	add	r3, r2
 800224c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002250:	663b      	str	r3, [r7, #96]	; 0x60
 8002252:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002254:	2200      	movs	r2, #0
 8002256:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	677b      	str	r3, [r7, #116]	; 0x74
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	785b      	ldrb	r3, [r3, #1]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d12b      	bne.n	80022be <HAL_PCD_EP_DB_Transmit+0x51e>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002274:	b29b      	uxth	r3, r3
 8002276:	461a      	mov	r2, r3
 8002278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800227a:	4413      	add	r3, r2
 800227c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	011a      	lsls	r2, r3, #4
 8002284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002286:	4413      	add	r3, r2
 8002288:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800228c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002290:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002294:	881b      	ldrh	r3, [r3, #0]
 8002296:	b29b      	uxth	r3, r3
 8002298:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800229c:	b29a      	uxth	r2, r3
 800229e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022a2:	801a      	strh	r2, [r3, #0]
 80022a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80022ba:	801a      	strh	r2, [r3, #0]
 80022bc:	e017      	b.n	80022ee <HAL_PCD_EP_DB_Transmit+0x54e>
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	785b      	ldrb	r3, [r3, #1]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d113      	bne.n	80022ee <HAL_PCD_EP_DB_Transmit+0x54e>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	461a      	mov	r2, r3
 80022d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022d4:	4413      	add	r3, r2
 80022d6:	677b      	str	r3, [r7, #116]	; 0x74
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	011a      	lsls	r2, r3, #4
 80022de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022e0:	4413      	add	r3, r2
 80022e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022e6:	673b      	str	r3, [r7, #112]	; 0x70
 80022e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022ea:	2200      	movs	r2, #0
 80022ec:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	4619      	mov	r1, r3
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f004 fd5a 	bl	8006dae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80022fa:	88fb      	ldrh	r3, [r7, #6]
 80022fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002300:	2b00      	cmp	r3, #0
 8002302:	f040 811a 	bne.w	800253a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	b29b      	uxth	r3, r3
 8002318:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800231c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002320:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	441a      	add	r2, r3
 8002332:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002336:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800233a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800233e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002346:	b29b      	uxth	r3, r3
 8002348:	8013      	strh	r3, [r2, #0]
 800234a:	e0f6      	b.n	800253a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800234c:	88fb      	ldrh	r3, [r7, #6]
 800234e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d121      	bne.n	800239a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	461a      	mov	r2, r3
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	b29b      	uxth	r3, r3
 8002368:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800236c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002370:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	441a      	add	r2, r3
 8002382:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002386:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800238a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800238e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002396:	b29b      	uxth	r3, r3
 8002398:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	f040 80ca 	bne.w	800253a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80023ae:	441a      	add	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	69da      	ldr	r2, [r3, #28]
 80023b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80023bc:	441a      	add	r2, r3
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	6a1a      	ldr	r2, [r3, #32]
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d30b      	bcc.n	80023e6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	6a1a      	ldr	r2, [r3, #32]
 80023da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023de:	1ad2      	subs	r2, r2, r3
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	621a      	str	r2, [r3, #32]
 80023e4:	e017      	b.n	8002416 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d108      	bne.n	8002400 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80023ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80023f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80023fe:	e00a      	b.n	8002416 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2200      	movs	r2, #0
 800240c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	657b      	str	r3, [r7, #84]	; 0x54
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	785b      	ldrb	r3, [r3, #1]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d165      	bne.n	80024f0 <HAL_PCD_EP_DB_Transmit+0x750>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	65fb      	str	r3, [r7, #92]	; 0x5c
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002432:	b29b      	uxth	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002438:	4413      	add	r3, r2
 800243a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	011a      	lsls	r2, r3, #4
 8002442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002444:	4413      	add	r3, r2
 8002446:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800244a:	65bb      	str	r3, [r7, #88]	; 0x58
 800244c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	b29b      	uxth	r3, r3
 8002452:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002456:	b29a      	uxth	r2, r3
 8002458:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800245a:	801a      	strh	r2, [r3, #0]
 800245c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002460:	2b3e      	cmp	r3, #62	; 0x3e
 8002462:	d91d      	bls.n	80024a0 <HAL_PCD_EP_DB_Transmit+0x700>
 8002464:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002468:	095b      	lsrs	r3, r3, #5
 800246a:	66bb      	str	r3, [r7, #104]	; 0x68
 800246c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002470:	f003 031f 	and.w	r3, r3, #31
 8002474:	2b00      	cmp	r3, #0
 8002476:	d102      	bne.n	800247e <HAL_PCD_EP_DB_Transmit+0x6de>
 8002478:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800247a:	3b01      	subs	r3, #1
 800247c:	66bb      	str	r3, [r7, #104]	; 0x68
 800247e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	b29a      	uxth	r2, r3
 8002484:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002486:	b29b      	uxth	r3, r3
 8002488:	029b      	lsls	r3, r3, #10
 800248a:	b29b      	uxth	r3, r3
 800248c:	4313      	orrs	r3, r2
 800248e:	b29b      	uxth	r3, r3
 8002490:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002494:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002498:	b29a      	uxth	r2, r3
 800249a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800249c:	801a      	strh	r2, [r3, #0]
 800249e:	e041      	b.n	8002524 <HAL_PCD_EP_DB_Transmit+0x784>
 80024a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10a      	bne.n	80024be <HAL_PCD_EP_DB_Transmit+0x71e>
 80024a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024ba:	801a      	strh	r2, [r3, #0]
 80024bc:	e032      	b.n	8002524 <HAL_PCD_EP_DB_Transmit+0x784>
 80024be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024c2:	085b      	lsrs	r3, r3, #1
 80024c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80024c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <HAL_PCD_EP_DB_Transmit+0x738>
 80024d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024d4:	3301      	adds	r3, #1
 80024d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80024d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	b29a      	uxth	r2, r3
 80024de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	029b      	lsls	r3, r3, #10
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	4313      	orrs	r3, r2
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024ec:	801a      	strh	r2, [r3, #0]
 80024ee:	e019      	b.n	8002524 <HAL_PCD_EP_DB_Transmit+0x784>
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	785b      	ldrb	r3, [r3, #1]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d115      	bne.n	8002524 <HAL_PCD_EP_DB_Transmit+0x784>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002500:	b29b      	uxth	r3, r3
 8002502:	461a      	mov	r2, r3
 8002504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002506:	4413      	add	r3, r2
 8002508:	657b      	str	r3, [r7, #84]	; 0x54
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	011a      	lsls	r2, r3, #4
 8002510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002512:	4413      	add	r3, r2
 8002514:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002518:	653b      	str	r3, [r7, #80]	; 0x50
 800251a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800251e:	b29a      	uxth	r2, r3
 8002520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002522:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	6959      	ldr	r1, [r3, #20]
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	895a      	ldrh	r2, [r3, #10]
 8002530:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002534:	b29b      	uxth	r3, r3
 8002536:	f003 f80a 	bl	800554e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	461a      	mov	r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	b29b      	uxth	r3, r3
 800254c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002554:	82bb      	strh	r3, [r7, #20]
 8002556:	8abb      	ldrh	r3, [r7, #20]
 8002558:	f083 0310 	eor.w	r3, r3, #16
 800255c:	82bb      	strh	r3, [r7, #20]
 800255e:	8abb      	ldrh	r3, [r7, #20]
 8002560:	f083 0320 	eor.w	r3, r3, #32
 8002564:	82bb      	strh	r3, [r7, #20]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	441a      	add	r2, r3
 8002574:	8abb      	ldrh	r3, [r7, #20]
 8002576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800257a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800257e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002586:	b29b      	uxth	r3, r3
 8002588:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3790      	adds	r7, #144	; 0x90
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002594:	b480      	push	{r7}
 8002596:	b087      	sub	sp, #28
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	607b      	str	r3, [r7, #4]
 800259e:	460b      	mov	r3, r1
 80025a0:	817b      	strh	r3, [r7, #10]
 80025a2:	4613      	mov	r3, r2
 80025a4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80025a6:	897b      	ldrh	r3, [r7, #10]
 80025a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00b      	beq.n	80025ca <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025b2:	897b      	ldrh	r3, [r7, #10]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	4413      	add	r3, r2
 80025c6:	617b      	str	r3, [r7, #20]
 80025c8:	e009      	b.n	80025de <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025ca:	897a      	ldrh	r2, [r7, #10]
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	4413      	add	r3, r2
 80025dc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80025de:	893b      	ldrh	r3, [r7, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d107      	bne.n	80025f4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	2200      	movs	r2, #0
 80025e8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	80da      	strh	r2, [r3, #6]
 80025f2:	e00b      	b.n	800260c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	2201      	movs	r2, #1
 80025f8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	0c1b      	lsrs	r3, r3, #16
 8002606:	b29a      	uxth	r2, r3
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	371c      	adds	r7, #28
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e272      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 8087 	beq.w	8002746 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002638:	4b92      	ldr	r3, [pc, #584]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 030c 	and.w	r3, r3, #12
 8002640:	2b04      	cmp	r3, #4
 8002642:	d00c      	beq.n	800265e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002644:	4b8f      	ldr	r3, [pc, #572]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 030c 	and.w	r3, r3, #12
 800264c:	2b08      	cmp	r3, #8
 800264e:	d112      	bne.n	8002676 <HAL_RCC_OscConfig+0x5e>
 8002650:	4b8c      	ldr	r3, [pc, #560]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800265c:	d10b      	bne.n	8002676 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265e:	4b89      	ldr	r3, [pc, #548]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d06c      	beq.n	8002744 <HAL_RCC_OscConfig+0x12c>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d168      	bne.n	8002744 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e24c      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800267e:	d106      	bne.n	800268e <HAL_RCC_OscConfig+0x76>
 8002680:	4b80      	ldr	r3, [pc, #512]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a7f      	ldr	r2, [pc, #508]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	e02e      	b.n	80026ec <HAL_RCC_OscConfig+0xd4>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10c      	bne.n	80026b0 <HAL_RCC_OscConfig+0x98>
 8002696:	4b7b      	ldr	r3, [pc, #492]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a7a      	ldr	r2, [pc, #488]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 800269c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	4b78      	ldr	r3, [pc, #480]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a77      	ldr	r2, [pc, #476]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e01d      	b.n	80026ec <HAL_RCC_OscConfig+0xd4>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026b8:	d10c      	bne.n	80026d4 <HAL_RCC_OscConfig+0xbc>
 80026ba:	4b72      	ldr	r3, [pc, #456]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a71      	ldr	r2, [pc, #452]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	4b6f      	ldr	r3, [pc, #444]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a6e      	ldr	r2, [pc, #440]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	e00b      	b.n	80026ec <HAL_RCC_OscConfig+0xd4>
 80026d4:	4b6b      	ldr	r3, [pc, #428]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a6a      	ldr	r2, [pc, #424]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	4b68      	ldr	r3, [pc, #416]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a67      	ldr	r2, [pc, #412]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d013      	beq.n	800271c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fd ff6e 	bl	80005d4 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026fc:	f7fd ff6a 	bl	80005d4 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b64      	cmp	r3, #100	; 0x64
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e200      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270e:	4b5d      	ldr	r3, [pc, #372]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0xe4>
 800271a:	e014      	b.n	8002746 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271c:	f7fd ff5a 	bl	80005d4 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002724:	f7fd ff56 	bl	80005d4 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b64      	cmp	r3, #100	; 0x64
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e1ec      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002736:	4b53      	ldr	r3, [pc, #332]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x10c>
 8002742:	e000      	b.n	8002746 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d063      	beq.n	800281a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002752:	4b4c      	ldr	r3, [pc, #304]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00b      	beq.n	8002776 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800275e:	4b49      	ldr	r3, [pc, #292]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	2b08      	cmp	r3, #8
 8002768:	d11c      	bne.n	80027a4 <HAL_RCC_OscConfig+0x18c>
 800276a:	4b46      	ldr	r3, [pc, #280]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d116      	bne.n	80027a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002776:	4b43      	ldr	r3, [pc, #268]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d005      	beq.n	800278e <HAL_RCC_OscConfig+0x176>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d001      	beq.n	800278e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e1c0      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278e:	4b3d      	ldr	r3, [pc, #244]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	4939      	ldr	r1, [pc, #228]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a2:	e03a      	b.n	800281a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d020      	beq.n	80027ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ac:	4b36      	ldr	r3, [pc, #216]	; (8002888 <HAL_RCC_OscConfig+0x270>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b2:	f7fd ff0f 	bl	80005d4 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ba:	f7fd ff0b 	bl	80005d4 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e1a1      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027cc:	4b2d      	ldr	r3, [pc, #180]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f0      	beq.n	80027ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d8:	4b2a      	ldr	r3, [pc, #168]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	4927      	ldr	r1, [pc, #156]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	600b      	str	r3, [r1, #0]
 80027ec:	e015      	b.n	800281a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ee:	4b26      	ldr	r3, [pc, #152]	; (8002888 <HAL_RCC_OscConfig+0x270>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f4:	f7fd feee 	bl	80005d4 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027fc:	f7fd feea 	bl	80005d4 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e180      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280e:	4b1d      	ldr	r3, [pc, #116]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b00      	cmp	r3, #0
 8002824:	d03a      	beq.n	800289c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d019      	beq.n	8002862 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800282e:	4b17      	ldr	r3, [pc, #92]	; (800288c <HAL_RCC_OscConfig+0x274>)
 8002830:	2201      	movs	r2, #1
 8002832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002834:	f7fd fece 	bl	80005d4 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800283c:	f7fd feca 	bl	80005d4 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e160      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800284e:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f0      	beq.n	800283c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800285a:	2001      	movs	r0, #1
 800285c:	f000 fa9c 	bl	8002d98 <RCC_Delay>
 8002860:	e01c      	b.n	800289c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002862:	4b0a      	ldr	r3, [pc, #40]	; (800288c <HAL_RCC_OscConfig+0x274>)
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002868:	f7fd feb4 	bl	80005d4 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800286e:	e00f      	b.n	8002890 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002870:	f7fd feb0 	bl	80005d4 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d908      	bls.n	8002890 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e146      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000
 8002888:	42420000 	.word	0x42420000
 800288c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002890:	4b92      	ldr	r3, [pc, #584]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1e9      	bne.n	8002870 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 80a6 	beq.w	80029f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028aa:	2300      	movs	r3, #0
 80028ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ae:	4b8b      	ldr	r3, [pc, #556]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10d      	bne.n	80028d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ba:	4b88      	ldr	r3, [pc, #544]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	4a87      	ldr	r2, [pc, #540]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 80028c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c4:	61d3      	str	r3, [r2, #28]
 80028c6:	4b85      	ldr	r3, [pc, #532]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028d2:	2301      	movs	r3, #1
 80028d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d6:	4b82      	ldr	r3, [pc, #520]	; (8002ae0 <HAL_RCC_OscConfig+0x4c8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d118      	bne.n	8002914 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028e2:	4b7f      	ldr	r3, [pc, #508]	; (8002ae0 <HAL_RCC_OscConfig+0x4c8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a7e      	ldr	r2, [pc, #504]	; (8002ae0 <HAL_RCC_OscConfig+0x4c8>)
 80028e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ee:	f7fd fe71 	bl	80005d4 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f6:	f7fd fe6d 	bl	80005d4 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b64      	cmp	r3, #100	; 0x64
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e103      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002908:	4b75      	ldr	r3, [pc, #468]	; (8002ae0 <HAL_RCC_OscConfig+0x4c8>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0f0      	beq.n	80028f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d106      	bne.n	800292a <HAL_RCC_OscConfig+0x312>
 800291c:	4b6f      	ldr	r3, [pc, #444]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	4a6e      	ldr	r2, [pc, #440]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	6213      	str	r3, [r2, #32]
 8002928:	e02d      	b.n	8002986 <HAL_RCC_OscConfig+0x36e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10c      	bne.n	800294c <HAL_RCC_OscConfig+0x334>
 8002932:	4b6a      	ldr	r3, [pc, #424]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	4a69      	ldr	r2, [pc, #420]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002938:	f023 0301 	bic.w	r3, r3, #1
 800293c:	6213      	str	r3, [r2, #32]
 800293e:	4b67      	ldr	r3, [pc, #412]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	4a66      	ldr	r2, [pc, #408]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002944:	f023 0304 	bic.w	r3, r3, #4
 8002948:	6213      	str	r3, [r2, #32]
 800294a:	e01c      	b.n	8002986 <HAL_RCC_OscConfig+0x36e>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	2b05      	cmp	r3, #5
 8002952:	d10c      	bne.n	800296e <HAL_RCC_OscConfig+0x356>
 8002954:	4b61      	ldr	r3, [pc, #388]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	4a60      	ldr	r2, [pc, #384]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 800295a:	f043 0304 	orr.w	r3, r3, #4
 800295e:	6213      	str	r3, [r2, #32]
 8002960:	4b5e      	ldr	r3, [pc, #376]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	4a5d      	ldr	r2, [pc, #372]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6213      	str	r3, [r2, #32]
 800296c:	e00b      	b.n	8002986 <HAL_RCC_OscConfig+0x36e>
 800296e:	4b5b      	ldr	r3, [pc, #364]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	4a5a      	ldr	r2, [pc, #360]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002974:	f023 0301 	bic.w	r3, r3, #1
 8002978:	6213      	str	r3, [r2, #32]
 800297a:	4b58      	ldr	r3, [pc, #352]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	4a57      	ldr	r2, [pc, #348]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002980:	f023 0304 	bic.w	r3, r3, #4
 8002984:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d015      	beq.n	80029ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298e:	f7fd fe21 	bl	80005d4 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002994:	e00a      	b.n	80029ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002996:	f7fd fe1d 	bl	80005d4 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e0b1      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ac:	4b4b      	ldr	r3, [pc, #300]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0ee      	beq.n	8002996 <HAL_RCC_OscConfig+0x37e>
 80029b8:	e014      	b.n	80029e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ba:	f7fd fe0b 	bl	80005d4 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c0:	e00a      	b.n	80029d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c2:	f7fd fe07 	bl	80005d4 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e09b      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d8:	4b40      	ldr	r3, [pc, #256]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1ee      	bne.n	80029c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029e4:	7dfb      	ldrb	r3, [r7, #23]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d105      	bne.n	80029f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ea:	4b3c      	ldr	r3, [pc, #240]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	4a3b      	ldr	r2, [pc, #236]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 80029f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 8087 	beq.w	8002b0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a00:	4b36      	ldr	r3, [pc, #216]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 030c 	and.w	r3, r3, #12
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d061      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d146      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a14:	4b33      	ldr	r3, [pc, #204]	; (8002ae4 <HAL_RCC_OscConfig+0x4cc>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1a:	f7fd fddb 	bl	80005d4 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a22:	f7fd fdd7 	bl	80005d4 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e06d      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a34:	4b29      	ldr	r3, [pc, #164]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1f0      	bne.n	8002a22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a48:	d108      	bne.n	8002a5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a4a:	4b24      	ldr	r3, [pc, #144]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	4921      	ldr	r1, [pc, #132]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a5c:	4b1f      	ldr	r3, [pc, #124]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a19      	ldr	r1, [r3, #32]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	491b      	ldr	r1, [pc, #108]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a74:	4b1b      	ldr	r3, [pc, #108]	; (8002ae4 <HAL_RCC_OscConfig+0x4cc>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7a:	f7fd fdab 	bl	80005d4 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a82:	f7fd fda7 	bl	80005d4 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e03d      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a94:	4b11      	ldr	r3, [pc, #68]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0f0      	beq.n	8002a82 <HAL_RCC_OscConfig+0x46a>
 8002aa0:	e035      	b.n	8002b0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa2:	4b10      	ldr	r3, [pc, #64]	; (8002ae4 <HAL_RCC_OscConfig+0x4cc>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7fd fd94 	bl	80005d4 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab0:	f7fd fd90 	bl	80005d4 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e026      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ac2:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_RCC_OscConfig+0x4c4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x498>
 8002ace:	e01e      	b.n	8002b0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d107      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e019      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	40007000 	.word	0x40007000
 8002ae4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_RCC_OscConfig+0x500>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d106      	bne.n	8002b0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d001      	beq.n	8002b0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40021000 	.word	0x40021000

08002b1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0d0      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b30:	4b6a      	ldr	r3, [pc, #424]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d910      	bls.n	8002b60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3e:	4b67      	ldr	r3, [pc, #412]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f023 0207 	bic.w	r2, r3, #7
 8002b46:	4965      	ldr	r1, [pc, #404]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4e:	4b63      	ldr	r3, [pc, #396]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e0b8      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d020      	beq.n	8002bae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b78:	4b59      	ldr	r3, [pc, #356]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	4a58      	ldr	r2, [pc, #352]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b90:	4b53      	ldr	r3, [pc, #332]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	4a52      	ldr	r2, [pc, #328]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b9c:	4b50      	ldr	r3, [pc, #320]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	494d      	ldr	r1, [pc, #308]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d040      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d107      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc2:	4b47      	ldr	r3, [pc, #284]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d115      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e07f      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d107      	bne.n	8002bea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bda:	4b41      	ldr	r3, [pc, #260]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d109      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e073      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bea:	4b3d      	ldr	r3, [pc, #244]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e06b      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bfa:	4b39      	ldr	r3, [pc, #228]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f023 0203 	bic.w	r2, r3, #3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	4936      	ldr	r1, [pc, #216]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c0c:	f7fd fce2 	bl	80005d4 <HAL_GetTick>
 8002c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c12:	e00a      	b.n	8002c2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c14:	f7fd fcde 	bl	80005d4 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e053      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2a:	4b2d      	ldr	r3, [pc, #180]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f003 020c 	and.w	r2, r3, #12
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d1eb      	bne.n	8002c14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c3c:	4b27      	ldr	r3, [pc, #156]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d210      	bcs.n	8002c6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4a:	4b24      	ldr	r3, [pc, #144]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f023 0207 	bic.w	r2, r3, #7
 8002c52:	4922      	ldr	r1, [pc, #136]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5a:	4b20      	ldr	r3, [pc, #128]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e032      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c78:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4916      	ldr	r1, [pc, #88]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d009      	beq.n	8002caa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c96:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	490e      	ldr	r1, [pc, #56]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002caa:	f000 f821 	bl	8002cf0 <HAL_RCC_GetSysClockFreq>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	091b      	lsrs	r3, r3, #4
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	490a      	ldr	r1, [pc, #40]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cbc:	5ccb      	ldrb	r3, [r1, r3]
 8002cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc2:	4a09      	ldr	r2, [pc, #36]	; (8002ce8 <HAL_RCC_ClockConfig+0x1cc>)
 8002cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cc6:	4b09      	ldr	r3, [pc, #36]	; (8002cec <HAL_RCC_ClockConfig+0x1d0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fd fc40 	bl	8000550 <HAL_InitTick>

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40022000 	.word	0x40022000
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	080072cc 	.word	0x080072cc
 8002ce8:	200000a0 	.word	0x200000a0
 8002cec:	200000a4 	.word	0x200000a4

08002cf0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	2300      	movs	r3, #0
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	2300      	movs	r3, #0
 8002d04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d0a:	4b1e      	ldr	r3, [pc, #120]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d002      	beq.n	8002d20 <HAL_RCC_GetSysClockFreq+0x30>
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d003      	beq.n	8002d26 <HAL_RCC_GetSysClockFreq+0x36>
 8002d1e:	e027      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d20:	4b19      	ldr	r3, [pc, #100]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d22:	613b      	str	r3, [r7, #16]
      break;
 8002d24:	e027      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	0c9b      	lsrs	r3, r3, #18
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	4a17      	ldr	r2, [pc, #92]	; (8002d8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d30:	5cd3      	ldrb	r3, [r2, r3]
 8002d32:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d010      	beq.n	8002d60 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d3e:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	0c5b      	lsrs	r3, r3, #17
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	4a11      	ldr	r2, [pc, #68]	; (8002d90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d4a:	5cd3      	ldrb	r3, [r2, r3]
 8002d4c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a0d      	ldr	r2, [pc, #52]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d52:	fb03 f202 	mul.w	r2, r3, r2
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	e004      	b.n	8002d6a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a0c      	ldr	r2, [pc, #48]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d64:	fb02 f303 	mul.w	r3, r2, r3
 8002d68:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	613b      	str	r3, [r7, #16]
      break;
 8002d6e:	e002      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d70:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d72:	613b      	str	r3, [r7, #16]
      break;
 8002d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d76:	693b      	ldr	r3, [r7, #16]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	371c      	adds	r7, #28
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40021000 	.word	0x40021000
 8002d88:	007a1200 	.word	0x007a1200
 8002d8c:	080072dc 	.word	0x080072dc
 8002d90:	080072ec 	.word	0x080072ec
 8002d94:	003d0900 	.word	0x003d0900

08002d98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002da0:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <RCC_Delay+0x34>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a0a      	ldr	r2, [pc, #40]	; (8002dd0 <RCC_Delay+0x38>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	0a5b      	lsrs	r3, r3, #9
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	fb02 f303 	mul.w	r3, r2, r3
 8002db2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002db4:	bf00      	nop
  }
  while (Delay --);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	1e5a      	subs	r2, r3, #1
 8002dba:	60fa      	str	r2, [r7, #12]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1f9      	bne.n	8002db4 <RCC_Delay+0x1c>
}
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr
 8002dcc:	200000a0 	.word	0x200000a0
 8002dd0:	10624dd3 	.word	0x10624dd3

08002dd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	613b      	str	r3, [r7, #16]
 8002de0:	2300      	movs	r3, #0
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d07d      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002df0:	2300      	movs	r3, #0
 8002df2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002df4:	4b4f      	ldr	r3, [pc, #316]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10d      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e00:	4b4c      	ldr	r3, [pc, #304]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	4a4b      	ldr	r2, [pc, #300]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	61d3      	str	r3, [r2, #28]
 8002e0c:	4b49      	ldr	r3, [pc, #292]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e14:	60bb      	str	r3, [r7, #8]
 8002e16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1c:	4b46      	ldr	r3, [pc, #280]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d118      	bne.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e28:	4b43      	ldr	r3, [pc, #268]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a42      	ldr	r2, [pc, #264]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e34:	f7fd fbce 	bl	80005d4 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3a:	e008      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e3c:	f7fd fbca 	bl	80005d4 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b64      	cmp	r3, #100	; 0x64
 8002e48:	d901      	bls.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e06d      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4e:	4b3a      	ldr	r3, [pc, #232]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f0      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e5a:	4b36      	ldr	r3, [pc, #216]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e62:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d02e      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d027      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e78:	4b2e      	ldr	r3, [pc, #184]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e82:	4b2e      	ldr	r3, [pc, #184]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e84:	2201      	movs	r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e88:	4b2c      	ldr	r3, [pc, #176]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e8e:	4a29      	ldr	r2, [pc, #164]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d014      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9e:	f7fd fb99 	bl	80005d4 <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea4:	e00a      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea6:	f7fd fb95 	bl	80005d4 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e036      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ebc:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0ee      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ec8:	4b1a      	ldr	r3, [pc, #104]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	4917      	ldr	r1, [pc, #92]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002eda:	7dfb      	ldrb	r3, [r7, #23]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d105      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee0:	4b14      	ldr	r3, [pc, #80]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	4a13      	ldr	r2, [pc, #76]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d008      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ef8:	4b0e      	ldr	r3, [pc, #56]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	490b      	ldr	r1, [pc, #44]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0310 	and.w	r3, r3, #16
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d008      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f16:	4b07      	ldr	r3, [pc, #28]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	4904      	ldr	r1, [pc, #16]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40007000 	.word	0x40007000
 8002f3c:	42420440 	.word	0x42420440

08002f40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002f40:	b084      	sub	sp, #16
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
 8002f4a:	f107 0014 	add.w	r0, r7, #20
 8002f4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	b004      	add	sp, #16
 8002f5e:	4770      	bx	lr

08002f60 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002f70:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002f74:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr

08002f8c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002f94:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002f98:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	4013      	ands	r3, r2
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr

08002fd8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002fd8:	b084      	sub	sp, #16
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	f107 0014 	add.w	r0, r7, #20
 8002fe6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	b004      	add	sp, #16
 8003016:	4770      	bx	lr

08003018 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003018:	b480      	push	{r7}
 800301a:	b09d      	sub	sp, #116	; 0x74
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	b29b      	uxth	r3, r3
 8003036:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800303a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	78db      	ldrb	r3, [r3, #3]
 8003046:	2b03      	cmp	r3, #3
 8003048:	d81f      	bhi.n	800308a <USB_ActivateEndpoint+0x72>
 800304a:	a201      	add	r2, pc, #4	; (adr r2, 8003050 <USB_ActivateEndpoint+0x38>)
 800304c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003050:	08003061 	.word	0x08003061
 8003054:	0800307d 	.word	0x0800307d
 8003058:	08003093 	.word	0x08003093
 800305c:	0800306f 	.word	0x0800306f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003060:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003064:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003068:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800306c:	e012      	b.n	8003094 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800306e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003072:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003076:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800307a:	e00b      	b.n	8003094 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800307c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003080:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003084:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003088:	e004      	b.n	8003094 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8003090:	e000      	b.n	8003094 <USB_ActivateEndpoint+0x7c>
      break;
 8003092:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	441a      	add	r2, r3
 800309e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80030a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	881b      	ldrh	r3, [r3, #0]
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	441a      	add	r2, r3
 80030e4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80030e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	7b1b      	ldrb	r3, [r3, #12]
 8003100:	2b00      	cmp	r3, #0
 8003102:	f040 8178 	bne.w	80033f6 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	785b      	ldrb	r3, [r3, #1]
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 8084 	beq.w	8003218 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	61bb      	str	r3, [r7, #24]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800311a:	b29b      	uxth	r3, r3
 800311c:	461a      	mov	r2, r3
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	4413      	add	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	011a      	lsls	r2, r3, #4
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	4413      	add	r3, r2
 800312e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	88db      	ldrh	r3, [r3, #6]
 8003138:	085b      	lsrs	r3, r3, #1
 800313a:	b29b      	uxth	r3, r3
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	827b      	strh	r3, [r7, #18]
 8003152:	8a7b      	ldrh	r3, [r7, #18]
 8003154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003158:	2b00      	cmp	r3, #0
 800315a:	d01b      	beq.n	8003194 <USB_ActivateEndpoint+0x17c>
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	b29b      	uxth	r3, r3
 800316a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800316e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003172:	823b      	strh	r3, [r7, #16]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	441a      	add	r2, r3
 800317e:	8a3b      	ldrh	r3, [r7, #16]
 8003180:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003184:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003188:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800318c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003190:	b29b      	uxth	r3, r3
 8003192:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	78db      	ldrb	r3, [r3, #3]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d020      	beq.n	80031de <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031b2:	81bb      	strh	r3, [r7, #12]
 80031b4:	89bb      	ldrh	r3, [r7, #12]
 80031b6:	f083 0320 	eor.w	r3, r3, #32
 80031ba:	81bb      	strh	r3, [r7, #12]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	441a      	add	r2, r3
 80031c6:	89bb      	ldrh	r3, [r7, #12]
 80031c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031d8:	b29b      	uxth	r3, r3
 80031da:	8013      	strh	r3, [r2, #0]
 80031dc:	e2d5      	b.n	800378a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031f4:	81fb      	strh	r3, [r7, #14]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	441a      	add	r2, r3
 8003200:	89fb      	ldrh	r3, [r7, #14]
 8003202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800320a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800320e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003212:	b29b      	uxth	r3, r3
 8003214:	8013      	strh	r3, [r2, #0]
 8003216:	e2b8      	b.n	800378a <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	633b      	str	r3, [r7, #48]	; 0x30
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003222:	b29b      	uxth	r3, r3
 8003224:	461a      	mov	r2, r3
 8003226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003228:	4413      	add	r3, r2
 800322a:	633b      	str	r3, [r7, #48]	; 0x30
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	011a      	lsls	r2, r3, #4
 8003232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003234:	4413      	add	r3, r2
 8003236:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800323a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	88db      	ldrh	r3, [r3, #6]
 8003240:	085b      	lsrs	r3, r3, #1
 8003242:	b29b      	uxth	r3, r3
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	b29a      	uxth	r2, r3
 8003248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003256:	b29b      	uxth	r3, r3
 8003258:	461a      	mov	r2, r3
 800325a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325c:	4413      	add	r3, r2
 800325e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	011a      	lsls	r2, r3, #4
 8003266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003268:	4413      	add	r3, r2
 800326a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800326e:	627b      	str	r3, [r7, #36]	; 0x24
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	b29b      	uxth	r3, r3
 8003276:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800327a:	b29a      	uxth	r2, r3
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	801a      	strh	r2, [r3, #0]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	2b3e      	cmp	r3, #62	; 0x3e
 8003286:	d91d      	bls.n	80032c4 <USB_ActivateEndpoint+0x2ac>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	095b      	lsrs	r3, r3, #5
 800328e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	f003 031f 	and.w	r3, r3, #31
 8003298:	2b00      	cmp	r3, #0
 800329a:	d102      	bne.n	80032a2 <USB_ActivateEndpoint+0x28a>
 800329c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800329e:	3b01      	subs	r3, #1
 80032a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	029b      	lsls	r3, r3, #10
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	4313      	orrs	r3, r2
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032bc:	b29a      	uxth	r2, r3
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	801a      	strh	r2, [r3, #0]
 80032c2:	e026      	b.n	8003312 <USB_ActivateEndpoint+0x2fa>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10a      	bne.n	80032e2 <USB_ActivateEndpoint+0x2ca>
 80032cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032da:	b29a      	uxth	r2, r3
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	801a      	strh	r2, [r3, #0]
 80032e0:	e017      	b.n	8003312 <USB_ActivateEndpoint+0x2fa>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	085b      	lsrs	r3, r3, #1
 80032e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d002      	beq.n	80032fc <USB_ActivateEndpoint+0x2e4>
 80032f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032f8:	3301      	adds	r3, #1
 80032fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	b29a      	uxth	r2, r3
 8003302:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003304:	b29b      	uxth	r3, r3
 8003306:	029b      	lsls	r3, r3, #10
 8003308:	b29b      	uxth	r3, r3
 800330a:	4313      	orrs	r3, r2
 800330c:	b29a      	uxth	r2, r3
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003320:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d01b      	beq.n	8003362 <USB_ActivateEndpoint+0x34a>
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	b29b      	uxth	r3, r3
 8003338:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800333c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003340:	843b      	strh	r3, [r7, #32]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	441a      	add	r2, r3
 800334c:	8c3b      	ldrh	r3, [r7, #32]
 800334e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003356:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800335a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800335e:	b29b      	uxth	r3, r3
 8003360:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d124      	bne.n	80033b4 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	b29b      	uxth	r3, r3
 8003378:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800337c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003380:	83bb      	strh	r3, [r7, #28]
 8003382:	8bbb      	ldrh	r3, [r7, #28]
 8003384:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003388:	83bb      	strh	r3, [r7, #28]
 800338a:	8bbb      	ldrh	r3, [r7, #28]
 800338c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003390:	83bb      	strh	r3, [r7, #28]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	441a      	add	r2, r3
 800339c:	8bbb      	ldrh	r3, [r7, #28]
 800339e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	8013      	strh	r3, [r2, #0]
 80033b2:	e1ea      	b.n	800378a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ca:	83fb      	strh	r3, [r7, #30]
 80033cc:	8bfb      	ldrh	r3, [r7, #30]
 80033ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80033d2:	83fb      	strh	r3, [r7, #30]
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	441a      	add	r2, r3
 80033de:	8bfb      	ldrh	r3, [r7, #30]
 80033e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	8013      	strh	r3, [r2, #0]
 80033f4:	e1c9      	b.n	800378a <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	78db      	ldrb	r3, [r3, #3]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d11e      	bne.n	800343c <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	b29b      	uxth	r3, r3
 800340c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003414:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	441a      	add	r2, r3
 8003422:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003426:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800342a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800342e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003436:	b29b      	uxth	r3, r3
 8003438:	8013      	strh	r3, [r2, #0]
 800343a:	e01d      	b.n	8003478 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	881b      	ldrh	r3, [r3, #0]
 8003448:	b29b      	uxth	r3, r3
 800344a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800344e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003452:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	441a      	add	r2, r3
 8003460:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003464:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003468:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800346c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003474:	b29b      	uxth	r3, r3
 8003476:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003482:	b29b      	uxth	r3, r3
 8003484:	461a      	mov	r2, r3
 8003486:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003488:	4413      	add	r3, r2
 800348a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	011a      	lsls	r2, r3, #4
 8003492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003494:	4413      	add	r3, r2
 8003496:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800349a:	65bb      	str	r3, [r7, #88]	; 0x58
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	891b      	ldrh	r3, [r3, #8]
 80034a0:	085b      	lsrs	r3, r3, #1
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034aa:	801a      	strh	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	657b      	str	r3, [r7, #84]	; 0x54
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	461a      	mov	r2, r3
 80034ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034bc:	4413      	add	r3, r2
 80034be:	657b      	str	r3, [r7, #84]	; 0x54
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	011a      	lsls	r2, r3, #4
 80034c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80034ce:	653b      	str	r3, [r7, #80]	; 0x50
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	895b      	ldrh	r3, [r3, #10]
 80034d4:	085b      	lsrs	r3, r3, #1
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034de:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	785b      	ldrb	r3, [r3, #1]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f040 8093 	bne.w	8003610 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80034fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80034fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d01b      	beq.n	800353e <USB_ActivateEndpoint+0x526>
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	b29b      	uxth	r3, r3
 8003514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	441a      	add	r2, r3
 8003528:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800352a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800352e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003532:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800353a:	b29b      	uxth	r3, r3
 800353c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800354c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800354e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003552:	2b00      	cmp	r3, #0
 8003554:	d01b      	beq.n	800358e <USB_ActivateEndpoint+0x576>
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	b29b      	uxth	r3, r3
 8003564:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	441a      	add	r2, r3
 8003578:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800357a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800357e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003586:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800358a:	b29b      	uxth	r3, r3
 800358c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	b29b      	uxth	r3, r3
 800359c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a4:	873b      	strh	r3, [r7, #56]	; 0x38
 80035a6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80035a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80035ac:	873b      	strh	r3, [r7, #56]	; 0x38
 80035ae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80035b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80035b4:	873b      	strh	r3, [r7, #56]	; 0x38
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	441a      	add	r2, r3
 80035c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80035c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035ec:	86fb      	strh	r3, [r7, #54]	; 0x36
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	441a      	add	r2, r3
 80035f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80035fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800360a:	b29b      	uxth	r3, r3
 800360c:	8013      	strh	r3, [r2, #0]
 800360e:	e0bc      	b.n	800378a <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003620:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d01d      	beq.n	8003668 <USB_ActivateEndpoint+0x650>
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	b29b      	uxth	r3, r3
 800363a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800363e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003642:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	441a      	add	r2, r3
 8003650:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003654:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003658:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800365c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003664:	b29b      	uxth	r3, r3
 8003666:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	881b      	ldrh	r3, [r3, #0]
 8003674:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003678:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800367c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003680:	2b00      	cmp	r3, #0
 8003682:	d01d      	beq.n	80036c0 <USB_ActivateEndpoint+0x6a8>
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	b29b      	uxth	r3, r3
 8003692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800369a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	441a      	add	r2, r3
 80036a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80036ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036bc:	b29b      	uxth	r3, r3
 80036be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	78db      	ldrb	r3, [r3, #3]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d024      	beq.n	8003712 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	881b      	ldrh	r3, [r3, #0]
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036de:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80036e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80036e6:	f083 0320 	eor.w	r3, r3, #32
 80036ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	441a      	add	r2, r3
 80036f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80036fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800370c:	b29b      	uxth	r3, r3
 800370e:	8013      	strh	r3, [r2, #0]
 8003710:	e01d      	b.n	800374e <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	b29b      	uxth	r3, r3
 8003720:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003724:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003728:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	441a      	add	r2, r3
 8003736:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800373a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800373e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800374a:	b29b      	uxth	r3, r3
 800374c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	b29b      	uxth	r3, r3
 800375c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003764:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	441a      	add	r2, r3
 8003772:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003776:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800377a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800377e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003786:	b29b      	uxth	r3, r3
 8003788:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800378a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800378e:	4618      	mov	r0, r3
 8003790:	3774      	adds	r7, #116	; 0x74
 8003792:	46bd      	mov	sp, r7
 8003794:	bc80      	pop	{r7}
 8003796:	4770      	bx	lr

08003798 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003798:	b480      	push	{r7}
 800379a:	b08d      	sub	sp, #52	; 0x34
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	7b1b      	ldrb	r3, [r3, #12]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f040 808e 	bne.w	80038c8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	785b      	ldrb	r3, [r3, #1]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d044      	beq.n	800383e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	81bb      	strh	r3, [r7, #12]
 80037c2:	89bb      	ldrh	r3, [r7, #12]
 80037c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d01b      	beq.n	8003804 <USB_DeactivateEndpoint+0x6c>
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e2:	817b      	strh	r3, [r7, #10]
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	441a      	add	r2, r3
 80037ee:	897b      	ldrh	r3, [r7, #10]
 80037f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003800:	b29b      	uxth	r3, r3
 8003802:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	b29b      	uxth	r3, r3
 8003812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003816:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800381a:	813b      	strh	r3, [r7, #8]
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	441a      	add	r2, r3
 8003826:	893b      	ldrh	r3, [r7, #8]
 8003828:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800382c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003830:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003838:	b29b      	uxth	r3, r3
 800383a:	8013      	strh	r3, [r2, #0]
 800383c:	e192      	b.n	8003b64 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	881b      	ldrh	r3, [r3, #0]
 800384a:	827b      	strh	r3, [r7, #18]
 800384c:	8a7b      	ldrh	r3, [r7, #18]
 800384e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d01b      	beq.n	800388e <USB_DeactivateEndpoint+0xf6>
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	b29b      	uxth	r3, r3
 8003864:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386c:	823b      	strh	r3, [r7, #16]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	441a      	add	r2, r3
 8003878:	8a3b      	ldrh	r3, [r7, #16]
 800387a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800387e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003882:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800388a:	b29b      	uxth	r3, r3
 800388c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	881b      	ldrh	r3, [r3, #0]
 800389a:	b29b      	uxth	r3, r3
 800389c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a4:	81fb      	strh	r3, [r7, #14]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	441a      	add	r2, r3
 80038b0:	89fb      	ldrh	r3, [r7, #14]
 80038b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	8013      	strh	r3, [r2, #0]
 80038c6:	e14d      	b.n	8003b64 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	785b      	ldrb	r3, [r3, #1]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f040 80a5 	bne.w	8003a1c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	881b      	ldrh	r3, [r3, #0]
 80038de:	843b      	strh	r3, [r7, #32]
 80038e0:	8c3b      	ldrh	r3, [r7, #32]
 80038e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d01b      	beq.n	8003922 <USB_DeactivateEndpoint+0x18a>
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	881b      	ldrh	r3, [r3, #0]
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003900:	83fb      	strh	r3, [r7, #30]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	441a      	add	r2, r3
 800390c:	8bfb      	ldrh	r3, [r7, #30]
 800390e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003912:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003916:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800391a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800391e:	b29b      	uxth	r3, r3
 8003920:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4413      	add	r3, r2
 800392c:	881b      	ldrh	r3, [r3, #0]
 800392e:	83bb      	strh	r3, [r7, #28]
 8003930:	8bbb      	ldrh	r3, [r7, #28]
 8003932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003936:	2b00      	cmp	r3, #0
 8003938:	d01b      	beq.n	8003972 <USB_DeactivateEndpoint+0x1da>
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4413      	add	r3, r2
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	b29b      	uxth	r3, r3
 8003948:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800394c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003950:	837b      	strh	r3, [r7, #26]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	441a      	add	r2, r3
 800395c:	8b7b      	ldrh	r3, [r7, #26]
 800395e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800396a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800396e:	b29b      	uxth	r3, r3
 8003970:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	b29b      	uxth	r3, r3
 8003980:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003988:	833b      	strh	r3, [r7, #24]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	441a      	add	r2, r3
 8003994:	8b3b      	ldrh	r3, [r7, #24]
 8003996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800399a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800399e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c0:	82fb      	strh	r3, [r7, #22]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	441a      	add	r2, r3
 80039cc:	8afb      	ldrh	r3, [r7, #22]
 80039ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039de:	b29b      	uxth	r3, r3
 80039e0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039f8:	82bb      	strh	r3, [r7, #20]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	441a      	add	r2, r3
 8003a04:	8abb      	ldrh	r3, [r7, #20]
 8003a06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	8013      	strh	r3, [r2, #0]
 8003a1a:	e0a3      	b.n	8003b64 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	881b      	ldrh	r3, [r3, #0]
 8003a28:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003a2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d01b      	beq.n	8003a6c <USB_DeactivateEndpoint+0x2d4>
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	441a      	add	r2, r3
 8003a56:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003a58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	881b      	ldrh	r3, [r3, #0]
 8003a78:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003a7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d01b      	beq.n	8003abc <USB_DeactivateEndpoint+0x324>
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	881b      	ldrh	r3, [r3, #0]
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a9a:	853b      	strh	r3, [r7, #40]	; 0x28
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	441a      	add	r2, r3
 8003aa6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003aa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003aac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ab4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	441a      	add	r2, r3
 8003ade:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003ae0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ae4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ae8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b0a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	441a      	add	r2, r3
 8003b16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4413      	add	r3, r2
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b42:	847b      	strh	r3, [r7, #34]	; 0x22
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	441a      	add	r2, r3
 8003b4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003b50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3734      	adds	r7, #52	; 0x34
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr

08003b70 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b0c2      	sub	sp, #264	; 0x108
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b7e:	6018      	str	r0, [r3, #0]
 8003b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b88:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003b8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	785b      	ldrb	r3, [r3, #1]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	f040 86b7 	bne.w	800490a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003b9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ba0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	699a      	ldr	r2, [r3, #24]
 8003ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003bac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d908      	bls.n	8003bca <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8003bb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003bbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003bc8:	e007      	b.n	8003bda <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8003bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003bde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	7b1b      	ldrb	r3, [r3, #12]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d13a      	bne.n	8003c60 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6959      	ldr	r1, [r3, #20]
 8003bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003bfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	88da      	ldrh	r2, [r3, #6]
 8003c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003c0c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003c10:	6800      	ldr	r0, [r0, #0]
 8003c12:	f001 fc9c 	bl	800554e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003c16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	613b      	str	r3, [r7, #16]
 8003c22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	461a      	mov	r2, r3
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	4413      	add	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
 8003c3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	011a      	lsls	r2, r3, #4
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	801a      	strh	r2, [r3, #0]
 8003c5c:	f000 be1f 	b.w	800489e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	78db      	ldrb	r3, [r3, #3]
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	f040 8462 	bne.w	8004536 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003c72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6a1a      	ldr	r2, [r3, #32]
 8003c7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	f240 83df 	bls.w	800444e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003c90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cb6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	441a      	add	r2, r3
 8003cd4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ce0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6a1a      	ldr	r2, [r3, #32]
 8003cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cfc:	1ad2      	subs	r2, r2, r3
 8003cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 81c7 	beq.w	80040c0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	633b      	str	r3, [r7, #48]	; 0x30
 8003d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	785b      	ldrb	r3, [r3, #1]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d177      	bne.n	8003e3e <USB_EPStartXfer+0x2ce>
 8003d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6e:	4413      	add	r3, r2
 8003d70:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	011a      	lsls	r2, r3, #4
 8003d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d82:	4413      	add	r3, r2
 8003d84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d88:	627b      	str	r3, [r7, #36]	; 0x24
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	881b      	ldrh	r3, [r3, #0]
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	801a      	strh	r2, [r3, #0]
 8003d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d9e:	2b3e      	cmp	r3, #62	; 0x3e
 8003da0:	d921      	bls.n	8003de6 <USB_EPStartXfer+0x276>
 8003da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003da6:	095b      	lsrs	r3, r3, #5
 8003da8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003db0:	f003 031f 	and.w	r3, r3, #31
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d104      	bne.n	8003dc2 <USB_EPStartXfer+0x252>
 8003db8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	029b      	lsls	r3, r3, #10
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	801a      	strh	r2, [r3, #0]
 8003de4:	e050      	b.n	8003e88 <USB_EPStartXfer+0x318>
 8003de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10a      	bne.n	8003e04 <USB_EPStartXfer+0x294>
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003df8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	801a      	strh	r2, [r3, #0]
 8003e02:	e041      	b.n	8003e88 <USB_EPStartXfer+0x318>
 8003e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e08:	085b      	lsrs	r3, r3, #1
 8003e0a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d004      	beq.n	8003e24 <USB_EPStartXfer+0x2b4>
 8003e1a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003e1e:	3301      	adds	r3, #1
 8003e20:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	029b      	lsls	r3, r3, #10
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	4313      	orrs	r3, r2
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	801a      	strh	r2, [r3, #0]
 8003e3c:	e024      	b.n	8003e88 <USB_EPStartXfer+0x318>
 8003e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	785b      	ldrb	r3, [r3, #1]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d11c      	bne.n	8003e88 <USB_EPStartXfer+0x318>
 8003e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	461a      	mov	r2, r3
 8003e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e62:	4413      	add	r3, r2
 8003e64:	633b      	str	r3, [r7, #48]	; 0x30
 8003e66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	011a      	lsls	r2, r3, #4
 8003e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e76:	4413      	add	r3, r2
 8003e78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e86:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003e88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	895b      	ldrh	r3, [r3, #10]
 8003e94:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6959      	ldr	r1, [r3, #20]
 8003ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003eae:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003eb2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003eb6:	6800      	ldr	r0, [r0, #0]
 8003eb8:	f001 fb49 	bl	800554e <USB_WritePMA>
            ep->xfer_buff += len;
 8003ebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ec0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695a      	ldr	r2, [r3, #20]
 8003ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ecc:	441a      	add	r2, r3
 8003ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6a1a      	ldr	r2, [r3, #32]
 8003ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003eea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d90f      	bls.n	8003f16 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8003ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003efa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6a1a      	ldr	r2, [r3, #32]
 8003f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f06:	1ad2      	subs	r2, r2, r3
 8003f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	621a      	str	r2, [r3, #32]
 8003f14:	e00e      	b.n	8003f34 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8003f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8003f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2200      	movs	r2, #0
 8003f32:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	785b      	ldrb	r3, [r3, #1]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d177      	bne.n	8004034 <USB_EPStartXfer+0x4c4>
 8003f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	61bb      	str	r3, [r7, #24]
 8003f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	461a      	mov	r2, r3
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	4413      	add	r3, r2
 8003f66:	61bb      	str	r3, [r7, #24]
 8003f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	011a      	lsls	r2, r3, #4
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	801a      	strh	r2, [r3, #0]
 8003f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f94:	2b3e      	cmp	r3, #62	; 0x3e
 8003f96:	d921      	bls.n	8003fdc <USB_EPStartXfer+0x46c>
 8003f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f9c:	095b      	lsrs	r3, r3, #5
 8003f9e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fa6:	f003 031f 	and.w	r3, r3, #31
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d104      	bne.n	8003fb8 <USB_EPStartXfer+0x448>
 8003fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	029b      	lsls	r3, r3, #10
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	801a      	strh	r2, [r3, #0]
 8003fda:	e056      	b.n	800408a <USB_EPStartXfer+0x51a>
 8003fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10a      	bne.n	8003ffa <USB_EPStartXfer+0x48a>
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	881b      	ldrh	r3, [r3, #0]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	801a      	strh	r2, [r3, #0]
 8003ff8:	e047      	b.n	800408a <USB_EPStartXfer+0x51a>
 8003ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ffe:	085b      	lsrs	r3, r3, #1
 8004000:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	d004      	beq.n	800401a <USB_EPStartXfer+0x4aa>
 8004010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004014:	3301      	adds	r3, #1
 8004016:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	b29a      	uxth	r2, r3
 8004020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004024:	b29b      	uxth	r3, r3
 8004026:	029b      	lsls	r3, r3, #10
 8004028:	b29b      	uxth	r3, r3
 800402a:	4313      	orrs	r3, r2
 800402c:	b29a      	uxth	r2, r3
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	801a      	strh	r2, [r3, #0]
 8004032:	e02a      	b.n	800408a <USB_EPStartXfer+0x51a>
 8004034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004038:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	785b      	ldrb	r3, [r3, #1]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d122      	bne.n	800408a <USB_EPStartXfer+0x51a>
 8004044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004048:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	623b      	str	r3, [r7, #32]
 8004050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004054:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800405e:	b29b      	uxth	r3, r3
 8004060:	461a      	mov	r2, r3
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	4413      	add	r3, r2
 8004066:	623b      	str	r3, [r7, #32]
 8004068:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800406c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	011a      	lsls	r2, r3, #4
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	4413      	add	r3, r2
 800407a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800407e:	61fb      	str	r3, [r7, #28]
 8004080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004084:	b29a      	uxth	r2, r3
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800408a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800408e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	891b      	ldrh	r3, [r3, #8]
 8004096:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800409a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800409e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6959      	ldr	r1, [r3, #20]
 80040a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80040b0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80040b4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80040b8:	6800      	ldr	r0, [r0, #0]
 80040ba:	f001 fa48 	bl	800554e <USB_WritePMA>
 80040be:	e3ee      	b.n	800489e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80040c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	785b      	ldrb	r3, [r3, #1]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d177      	bne.n	80041c0 <USB_EPStartXfer+0x650>
 80040d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	64bb      	str	r3, [r7, #72]	; 0x48
 80040dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	461a      	mov	r2, r3
 80040ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040f0:	4413      	add	r3, r2
 80040f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80040f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	011a      	lsls	r2, r3, #4
 8004102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004104:	4413      	add	r3, r2
 8004106:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800410a:	647b      	str	r3, [r7, #68]	; 0x44
 800410c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	b29b      	uxth	r3, r3
 8004112:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004116:	b29a      	uxth	r2, r3
 8004118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800411a:	801a      	strh	r2, [r3, #0]
 800411c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004120:	2b3e      	cmp	r3, #62	; 0x3e
 8004122:	d921      	bls.n	8004168 <USB_EPStartXfer+0x5f8>
 8004124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004128:	095b      	lsrs	r3, r3, #5
 800412a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800412e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004132:	f003 031f 	and.w	r3, r3, #31
 8004136:	2b00      	cmp	r3, #0
 8004138:	d104      	bne.n	8004144 <USB_EPStartXfer+0x5d4>
 800413a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800413e:	3b01      	subs	r3, #1
 8004140:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	b29a      	uxth	r2, r3
 800414a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800414e:	b29b      	uxth	r3, r3
 8004150:	029b      	lsls	r3, r3, #10
 8004152:	b29b      	uxth	r3, r3
 8004154:	4313      	orrs	r3, r2
 8004156:	b29b      	uxth	r3, r3
 8004158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800415c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004160:	b29a      	uxth	r2, r3
 8004162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004164:	801a      	strh	r2, [r3, #0]
 8004166:	e056      	b.n	8004216 <USB_EPStartXfer+0x6a6>
 8004168:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10a      	bne.n	8004186 <USB_EPStartXfer+0x616>
 8004170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	b29b      	uxth	r3, r3
 8004176:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800417a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800417e:	b29a      	uxth	r2, r3
 8004180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004182:	801a      	strh	r2, [r3, #0]
 8004184:	e047      	b.n	8004216 <USB_EPStartXfer+0x6a6>
 8004186:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800418a:	085b      	lsrs	r3, r3, #1
 800418c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004190:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b00      	cmp	r3, #0
 800419a:	d004      	beq.n	80041a6 <USB_EPStartXfer+0x636>
 800419c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80041a0:	3301      	adds	r3, #1
 80041a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80041a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041a8:	881b      	ldrh	r3, [r3, #0]
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	029b      	lsls	r3, r3, #10
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	4313      	orrs	r3, r2
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041bc:	801a      	strh	r2, [r3, #0]
 80041be:	e02a      	b.n	8004216 <USB_EPStartXfer+0x6a6>
 80041c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	785b      	ldrb	r3, [r3, #1]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d122      	bne.n	8004216 <USB_EPStartXfer+0x6a6>
 80041d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	653b      	str	r3, [r7, #80]	; 0x50
 80041dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	461a      	mov	r2, r3
 80041ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041f0:	4413      	add	r3, r2
 80041f2:	653b      	str	r3, [r7, #80]	; 0x50
 80041f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	011a      	lsls	r2, r3, #4
 8004202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004204:	4413      	add	r3, r2
 8004206:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800420a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800420c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004210:	b29a      	uxth	r2, r3
 8004212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004214:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800421a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	891b      	ldrh	r3, [r3, #8]
 8004222:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800422a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6959      	ldr	r1, [r3, #20]
 8004232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004236:	b29b      	uxth	r3, r3
 8004238:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800423c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004240:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004244:	6800      	ldr	r0, [r0, #0]
 8004246:	f001 f982 	bl	800554e <USB_WritePMA>
            ep->xfer_buff += len;
 800424a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800424e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695a      	ldr	r2, [r3, #20]
 8004256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800425a:	441a      	add	r2, r3
 800425c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800426c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6a1a      	ldr	r2, [r3, #32]
 8004274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	429a      	cmp	r2, r3
 8004282:	d90f      	bls.n	80042a4 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8004284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6a1a      	ldr	r2, [r3, #32]
 8004290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004294:	1ad2      	subs	r2, r2, r3
 8004296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800429a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	621a      	str	r2, [r3, #32]
 80042a2:	e00e      	b.n	80042c2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80042a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80042b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2200      	movs	r2, #0
 80042c0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80042c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	643b      	str	r3, [r7, #64]	; 0x40
 80042ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	785b      	ldrb	r3, [r3, #1]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d177      	bne.n	80043ce <USB_EPStartXfer+0x85e>
 80042de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80042ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	461a      	mov	r2, r3
 80042fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fe:	4413      	add	r3, r2
 8004300:	63bb      	str	r3, [r7, #56]	; 0x38
 8004302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	011a      	lsls	r2, r3, #4
 8004310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004312:	4413      	add	r3, r2
 8004314:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004318:	637b      	str	r3, [r7, #52]	; 0x34
 800431a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	b29b      	uxth	r3, r3
 8004320:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004324:	b29a      	uxth	r2, r3
 8004326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004328:	801a      	strh	r2, [r3, #0]
 800432a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800432e:	2b3e      	cmp	r3, #62	; 0x3e
 8004330:	d921      	bls.n	8004376 <USB_EPStartXfer+0x806>
 8004332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004336:	095b      	lsrs	r3, r3, #5
 8004338:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800433c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004340:	f003 031f 	and.w	r3, r3, #31
 8004344:	2b00      	cmp	r3, #0
 8004346:	d104      	bne.n	8004352 <USB_EPStartXfer+0x7e2>
 8004348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800434c:	3b01      	subs	r3, #1
 800434e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	b29a      	uxth	r2, r3
 8004358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435c:	b29b      	uxth	r3, r3
 800435e:	029b      	lsls	r3, r3, #10
 8004360:	b29b      	uxth	r3, r3
 8004362:	4313      	orrs	r3, r2
 8004364:	b29b      	uxth	r3, r3
 8004366:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800436a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800436e:	b29a      	uxth	r2, r3
 8004370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004372:	801a      	strh	r2, [r3, #0]
 8004374:	e050      	b.n	8004418 <USB_EPStartXfer+0x8a8>
 8004376:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10a      	bne.n	8004394 <USB_EPStartXfer+0x824>
 800437e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	b29b      	uxth	r3, r3
 8004384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800438c:	b29a      	uxth	r2, r3
 800438e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004390:	801a      	strh	r2, [r3, #0]
 8004392:	e041      	b.n	8004418 <USB_EPStartXfer+0x8a8>
 8004394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004398:	085b      	lsrs	r3, r3, #1
 800439a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800439e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d004      	beq.n	80043b4 <USB_EPStartXfer+0x844>
 80043aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ae:	3301      	adds	r3, #1
 80043b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80043b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043be:	b29b      	uxth	r3, r3
 80043c0:	029b      	lsls	r3, r3, #10
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	4313      	orrs	r3, r2
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ca:	801a      	strh	r2, [r3, #0]
 80043cc:	e024      	b.n	8004418 <USB_EPStartXfer+0x8a8>
 80043ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	785b      	ldrb	r3, [r3, #1]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d11c      	bne.n	8004418 <USB_EPStartXfer+0x8a8>
 80043de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	461a      	mov	r2, r3
 80043f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043f2:	4413      	add	r3, r2
 80043f4:	643b      	str	r3, [r7, #64]	; 0x40
 80043f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	011a      	lsls	r2, r3, #4
 8004404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004406:	4413      	add	r3, r2
 8004408:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800440c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800440e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004412:	b29a      	uxth	r2, r3
 8004414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004416:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800441c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	895b      	ldrh	r3, [r3, #10]
 8004424:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800442c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6959      	ldr	r1, [r3, #20]
 8004434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004438:	b29b      	uxth	r3, r3
 800443a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800443e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004442:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004446:	6800      	ldr	r0, [r0, #0]
 8004448:	f001 f881 	bl	800554e <USB_WritePMA>
 800444c:	e227      	b.n	800489e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800444e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800445e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004462:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800446c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	b29b      	uxth	r3, r3
 800447c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004484:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800448c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	441a      	add	r2, r3
 80044a2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80044a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80044ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	461a      	mov	r2, r3
 80044d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044da:	4413      	add	r3, r2
 80044dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	011a      	lsls	r2, r3, #4
 80044ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044ee:	4413      	add	r3, r2
 80044f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80044f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80044f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044fe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	891b      	ldrh	r3, [r3, #8]
 800450c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004514:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6959      	ldr	r1, [r3, #20]
 800451c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004520:	b29b      	uxth	r3, r3
 8004522:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004526:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800452a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800452e:	6800      	ldr	r0, [r0, #0]
 8004530:	f001 f80d 	bl	800554e <USB_WritePMA>
 8004534:	e1b3      	b.n	800489e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800453a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6a1a      	ldr	r2, [r3, #32]
 8004542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004546:	1ad2      	subs	r2, r2, r3
 8004548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800454c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004554:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004558:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004562:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	b29b      	uxth	r3, r3
 8004572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 80c6 	beq.w	8004708 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800457c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004580:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	673b      	str	r3, [r7, #112]	; 0x70
 8004588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800458c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	785b      	ldrb	r3, [r3, #1]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d177      	bne.n	8004688 <USB_EPStartXfer+0xb18>
 8004598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800459c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80045a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	461a      	mov	r2, r3
 80045b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045b8:	4413      	add	r3, r2
 80045ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80045bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	011a      	lsls	r2, r3, #4
 80045ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045cc:	4413      	add	r3, r2
 80045ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045d2:	667b      	str	r3, [r7, #100]	; 0x64
 80045d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	b29b      	uxth	r3, r3
 80045da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045de:	b29a      	uxth	r2, r3
 80045e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045e2:	801a      	strh	r2, [r3, #0]
 80045e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045e8:	2b3e      	cmp	r3, #62	; 0x3e
 80045ea:	d921      	bls.n	8004630 <USB_EPStartXfer+0xac0>
 80045ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045f0:	095b      	lsrs	r3, r3, #5
 80045f2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80045f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045fa:	f003 031f 	and.w	r3, r3, #31
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d104      	bne.n	800460c <USB_EPStartXfer+0xa9c>
 8004602:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004606:	3b01      	subs	r3, #1
 8004608:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800460c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800460e:	881b      	ldrh	r3, [r3, #0]
 8004610:	b29a      	uxth	r2, r3
 8004612:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004616:	b29b      	uxth	r3, r3
 8004618:	029b      	lsls	r3, r3, #10
 800461a:	b29b      	uxth	r3, r3
 800461c:	4313      	orrs	r3, r2
 800461e:	b29b      	uxth	r3, r3
 8004620:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004624:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004628:	b29a      	uxth	r2, r3
 800462a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800462c:	801a      	strh	r2, [r3, #0]
 800462e:	e050      	b.n	80046d2 <USB_EPStartXfer+0xb62>
 8004630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10a      	bne.n	800464e <USB_EPStartXfer+0xade>
 8004638:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	b29b      	uxth	r3, r3
 800463e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004646:	b29a      	uxth	r2, r3
 8004648:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800464a:	801a      	strh	r2, [r3, #0]
 800464c:	e041      	b.n	80046d2 <USB_EPStartXfer+0xb62>
 800464e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004652:	085b      	lsrs	r3, r3, #1
 8004654:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b00      	cmp	r3, #0
 8004662:	d004      	beq.n	800466e <USB_EPStartXfer+0xafe>
 8004664:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004668:	3301      	adds	r3, #1
 800466a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800466e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	b29a      	uxth	r2, r3
 8004674:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004678:	b29b      	uxth	r3, r3
 800467a:	029b      	lsls	r3, r3, #10
 800467c:	b29b      	uxth	r3, r3
 800467e:	4313      	orrs	r3, r2
 8004680:	b29a      	uxth	r2, r3
 8004682:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004684:	801a      	strh	r2, [r3, #0]
 8004686:	e024      	b.n	80046d2 <USB_EPStartXfer+0xb62>
 8004688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800468c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	785b      	ldrb	r3, [r3, #1]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d11c      	bne.n	80046d2 <USB_EPStartXfer+0xb62>
 8004698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800469c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	461a      	mov	r2, r3
 80046aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046ac:	4413      	add	r3, r2
 80046ae:	673b      	str	r3, [r7, #112]	; 0x70
 80046b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	011a      	lsls	r2, r3, #4
 80046be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046c0:	4413      	add	r3, r2
 80046c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80046d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	895b      	ldrh	r3, [r3, #10]
 80046de:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80046e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6959      	ldr	r1, [r3, #20]
 80046ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80046f8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80046fc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004700:	6800      	ldr	r0, [r0, #0]
 8004702:	f000 ff24 	bl	800554e <USB_WritePMA>
 8004706:	e0ca      	b.n	800489e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800470c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	785b      	ldrb	r3, [r3, #1]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d177      	bne.n	8004808 <USB_EPStartXfer+0xc98>
 8004718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800471c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004728:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004732:	b29b      	uxth	r3, r3
 8004734:	461a      	mov	r2, r3
 8004736:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004738:	4413      	add	r3, r2
 800473a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800473c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	011a      	lsls	r2, r3, #4
 800474a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800474c:	4413      	add	r3, r2
 800474e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004752:	67bb      	str	r3, [r7, #120]	; 0x78
 8004754:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	b29b      	uxth	r3, r3
 800475a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800475e:	b29a      	uxth	r2, r3
 8004760:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004762:	801a      	strh	r2, [r3, #0]
 8004764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004768:	2b3e      	cmp	r3, #62	; 0x3e
 800476a:	d921      	bls.n	80047b0 <USB_EPStartXfer+0xc40>
 800476c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004770:	095b      	lsrs	r3, r3, #5
 8004772:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004776:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800477a:	f003 031f 	and.w	r3, r3, #31
 800477e:	2b00      	cmp	r3, #0
 8004780:	d104      	bne.n	800478c <USB_EPStartXfer+0xc1c>
 8004782:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004786:	3b01      	subs	r3, #1
 8004788:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800478c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800478e:	881b      	ldrh	r3, [r3, #0]
 8004790:	b29a      	uxth	r2, r3
 8004792:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004796:	b29b      	uxth	r3, r3
 8004798:	029b      	lsls	r3, r3, #10
 800479a:	b29b      	uxth	r3, r3
 800479c:	4313      	orrs	r3, r2
 800479e:	b29b      	uxth	r3, r3
 80047a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047ac:	801a      	strh	r2, [r3, #0]
 80047ae:	e05c      	b.n	800486a <USB_EPStartXfer+0xcfa>
 80047b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10a      	bne.n	80047ce <USB_EPStartXfer+0xc5e>
 80047b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047ba:	881b      	ldrh	r3, [r3, #0]
 80047bc:	b29b      	uxth	r3, r3
 80047be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047ca:	801a      	strh	r2, [r3, #0]
 80047cc:	e04d      	b.n	800486a <USB_EPStartXfer+0xcfa>
 80047ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047d2:	085b      	lsrs	r3, r3, #1
 80047d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80047d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d004      	beq.n	80047ee <USB_EPStartXfer+0xc7e>
 80047e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80047e8:	3301      	adds	r3, #1
 80047ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80047ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	029b      	lsls	r3, r3, #10
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	4313      	orrs	r3, r2
 8004800:	b29a      	uxth	r2, r3
 8004802:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004804:	801a      	strh	r2, [r3, #0]
 8004806:	e030      	b.n	800486a <USB_EPStartXfer+0xcfa>
 8004808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800480c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	785b      	ldrb	r3, [r3, #1]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d128      	bne.n	800486a <USB_EPStartXfer+0xcfa>
 8004818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800481c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800482a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004834:	b29b      	uxth	r3, r3
 8004836:	461a      	mov	r2, r3
 8004838:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800483c:	4413      	add	r3, r2
 800483e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004846:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	011a      	lsls	r2, r3, #4
 8004850:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004854:	4413      	add	r3, r2
 8004856:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800485a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800485e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004862:	b29a      	uxth	r2, r3
 8004864:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004868:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800486a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800486e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	891b      	ldrh	r3, [r3, #8]
 8004876:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800487a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800487e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6959      	ldr	r1, [r3, #20]
 8004886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800488a:	b29b      	uxth	r3, r3
 800488c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004890:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004894:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004898:	6800      	ldr	r0, [r0, #0]
 800489a:	f000 fe58 	bl	800554e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800489e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048c4:	817b      	strh	r3, [r7, #10]
 80048c6:	897b      	ldrh	r3, [r7, #10]
 80048c8:	f083 0310 	eor.w	r3, r3, #16
 80048cc:	817b      	strh	r3, [r7, #10]
 80048ce:	897b      	ldrh	r3, [r7, #10]
 80048d0:	f083 0320 	eor.w	r3, r3, #32
 80048d4:	817b      	strh	r3, [r7, #10]
 80048d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	441a      	add	r2, r3
 80048f0:	897b      	ldrh	r3, [r7, #10]
 80048f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004902:	b29b      	uxth	r3, r3
 8004904:	8013      	strh	r3, [r2, #0]
 8004906:	f000 bcde 	b.w	80052c6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800490a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800490e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	7b1b      	ldrb	r3, [r3, #12]
 8004916:	2b00      	cmp	r3, #0
 8004918:	f040 80bb 	bne.w	8004a92 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800491c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	699a      	ldr	r2, [r3, #24]
 8004928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800492c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	429a      	cmp	r2, r3
 8004936:	d917      	bls.n	8004968 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8004938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800493c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8004948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800494c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	699a      	ldr	r2, [r3, #24]
 8004954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004958:	1ad2      	subs	r2, r2, r3
 800495a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800495e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	619a      	str	r2, [r3, #24]
 8004966:	e00e      	b.n	8004986 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8004968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800496c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8004978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800497c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2200      	movs	r2, #0
 8004984:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800498a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004998:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	461a      	mov	r2, r3
 80049a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80049aa:	4413      	add	r3, r2
 80049ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	011a      	lsls	r2, r3, #4
 80049be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80049c2:	4413      	add	r3, r2
 80049c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80049cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049d8:	b29a      	uxth	r2, r3
 80049da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049de:	801a      	strh	r2, [r3, #0]
 80049e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049e4:	2b3e      	cmp	r3, #62	; 0x3e
 80049e6:	d924      	bls.n	8004a32 <USB_EPStartXfer+0xec2>
 80049e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049ec:	095b      	lsrs	r3, r3, #5
 80049ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049f6:	f003 031f 	and.w	r3, r3, #31
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d104      	bne.n	8004a08 <USB_EPStartXfer+0xe98>
 80049fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004a02:	3b01      	subs	r3, #1
 8004a04:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	029b      	lsls	r3, r3, #10
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a2c:	801a      	strh	r2, [r3, #0]
 8004a2e:	f000 bc10 	b.w	8005252 <USB_EPStartXfer+0x16e2>
 8004a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10c      	bne.n	8004a54 <USB_EPStartXfer+0xee4>
 8004a3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a3e:	881b      	ldrh	r3, [r3, #0]
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a50:	801a      	strh	r2, [r3, #0]
 8004a52:	e3fe      	b.n	8005252 <USB_EPStartXfer+0x16e2>
 8004a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a58:	085b      	lsrs	r3, r3, #1
 8004a5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d004      	beq.n	8004a74 <USB_EPStartXfer+0xf04>
 8004a6a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004a6e:	3301      	adds	r3, #1
 8004a70:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	029b      	lsls	r3, r3, #10
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	4313      	orrs	r3, r2
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a8e:	801a      	strh	r2, [r3, #0]
 8004a90:	e3df      	b.n	8005252 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	78db      	ldrb	r3, [r3, #3]
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	f040 8218 	bne.w	8004ed4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	785b      	ldrb	r3, [r3, #1]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f040 809d 	bne.w	8004bf0 <USB_EPStartXfer+0x1080>
 8004ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ac8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ada:	4413      	add	r3, r2
 8004adc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	011a      	lsls	r2, r3, #4
 8004aee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004af2:	4413      	add	r3, r2
 8004af4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004af8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004afc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004b0e:	801a      	strh	r2, [r3, #0]
 8004b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	2b3e      	cmp	r3, #62	; 0x3e
 8004b1e:	d92b      	bls.n	8004b78 <USB_EPStartXfer+0x1008>
 8004b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	095b      	lsrs	r3, r3, #5
 8004b2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	f003 031f 	and.w	r3, r3, #31
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d104      	bne.n	8004b50 <USB_EPStartXfer+0xfe0>
 8004b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	029b      	lsls	r3, r3, #10
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	4313      	orrs	r3, r2
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004b74:	801a      	strh	r2, [r3, #0]
 8004b76:	e070      	b.n	8004c5a <USB_EPStartXfer+0x10ea>
 8004b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10c      	bne.n	8004ba2 <USB_EPStartXfer+0x1032>
 8004b88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004b9e:	801a      	strh	r2, [r3, #0]
 8004ba0:	e05b      	b.n	8004c5a <USB_EPStartXfer+0x10ea>
 8004ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ba6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	085b      	lsrs	r3, r3, #1
 8004bb0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d004      	beq.n	8004bd2 <USB_EPStartXfer+0x1062>
 8004bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bcc:	3301      	adds	r3, #1
 8004bce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	029b      	lsls	r3, r3, #10
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	4313      	orrs	r3, r2
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004bec:	801a      	strh	r2, [r3, #0]
 8004bee:	e034      	b.n	8004c5a <USB_EPStartXfer+0x10ea>
 8004bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	785b      	ldrb	r3, [r3, #1]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d12c      	bne.n	8004c5a <USB_EPStartXfer+0x10ea>
 8004c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	461a      	mov	r2, r3
 8004c20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004c24:	4413      	add	r3, r2
 8004c26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	011a      	lsls	r2, r3, #4
 8004c38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c58:	801a      	strh	r2, [r3, #0]
 8004c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	785b      	ldrb	r3, [r3, #1]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f040 809d 	bne.w	8004db4 <USB_EPStartXfer+0x1244>
 8004c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	461a      	mov	r2, r3
 8004c9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	011a      	lsls	r2, r3, #4
 8004cb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004cc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cd2:	801a      	strh	r2, [r3, #0]
 8004cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	2b3e      	cmp	r3, #62	; 0x3e
 8004ce2:	d92b      	bls.n	8004d3c <USB_EPStartXfer+0x11cc>
 8004ce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ce8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	095b      	lsrs	r3, r3, #5
 8004cf2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	f003 031f 	and.w	r3, r3, #31
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d104      	bne.n	8004d14 <USB_EPStartXfer+0x11a4>
 8004d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	029b      	lsls	r3, r3, #10
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	4313      	orrs	r3, r2
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d38:	801a      	strh	r2, [r3, #0]
 8004d3a:	e069      	b.n	8004e10 <USB_EPStartXfer+0x12a0>
 8004d3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10c      	bne.n	8004d66 <USB_EPStartXfer+0x11f6>
 8004d4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d62:	801a      	strh	r2, [r3, #0]
 8004d64:	e054      	b.n	8004e10 <USB_EPStartXfer+0x12a0>
 8004d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	085b      	lsrs	r3, r3, #1
 8004d74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d004      	beq.n	8004d96 <USB_EPStartXfer+0x1226>
 8004d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d90:	3301      	adds	r3, #1
 8004d92:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d9a:	881b      	ldrh	r3, [r3, #0]
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	029b      	lsls	r3, r3, #10
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	4313      	orrs	r3, r2
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004db0:	801a      	strh	r2, [r3, #0]
 8004db2:	e02d      	b.n	8004e10 <USB_EPStartXfer+0x12a0>
 8004db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004db8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	785b      	ldrb	r3, [r3, #1]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d125      	bne.n	8004e10 <USB_EPStartXfer+0x12a0>
 8004dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004dda:	4413      	add	r3, r2
 8004ddc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004de0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004de4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	011a      	lsls	r2, r3, #4
 8004dee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004df2:	4413      	add	r3, r2
 8004df4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004df8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e0e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004e10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 8218 	beq.w	8005252 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004e42:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d005      	beq.n	8004e5a <USB_EPStartXfer+0x12ea>
 8004e4e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10d      	bne.n	8004e76 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004e5a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f040 81f5 	bne.w	8005252 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004e68:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f040 81ee 	bne.w	8005252 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	881b      	ldrh	r3, [r3, #0]
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e9c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8004ea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ea4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	441a      	add	r2, r3
 8004eba:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8004ebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	8013      	strh	r3, [r2, #0]
 8004ed2:	e1be      	b.n	8005252 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ed8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	78db      	ldrb	r3, [r3, #3]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	f040 81b4 	bne.w	800524e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699a      	ldr	r2, [r3, #24]
 8004ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d917      	bls.n	8004f32 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8004f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8004f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	699a      	ldr	r2, [r3, #24]
 8004f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f22:	1ad2      	subs	r2, r2, r3
 8004f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	619a      	str	r2, [r3, #24]
 8004f30:	e00e      	b.n	8004f50 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8004f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8004f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	785b      	ldrb	r3, [r3, #1]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f040 8085 	bne.w	800506c <USB_EPStartXfer+0x14fc>
 8004f62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	461a      	mov	r2, r3
 8004f82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f86:	4413      	add	r3, r2
 8004f88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	011a      	lsls	r2, r3, #4
 8004f9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fa4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fa8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004fba:	801a      	strh	r2, [r3, #0]
 8004fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fc0:	2b3e      	cmp	r3, #62	; 0x3e
 8004fc2:	d923      	bls.n	800500c <USB_EPStartXfer+0x149c>
 8004fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fc8:	095b      	lsrs	r3, r3, #5
 8004fca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fd2:	f003 031f 	and.w	r3, r3, #31
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d104      	bne.n	8004fe4 <USB_EPStartXfer+0x1474>
 8004fda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004fe4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	029b      	lsls	r3, r3, #10
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005002:	b29a      	uxth	r2, r3
 8005004:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005008:	801a      	strh	r2, [r3, #0]
 800500a:	e060      	b.n	80050ce <USB_EPStartXfer+0x155e>
 800500c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10c      	bne.n	800502e <USB_EPStartXfer+0x14be>
 8005014:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005018:	881b      	ldrh	r3, [r3, #0]
 800501a:	b29b      	uxth	r3, r3
 800501c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005020:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005024:	b29a      	uxth	r2, r3
 8005026:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800502a:	801a      	strh	r2, [r3, #0]
 800502c:	e04f      	b.n	80050ce <USB_EPStartXfer+0x155e>
 800502e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005032:	085b      	lsrs	r3, r3, #1
 8005034:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b00      	cmp	r3, #0
 8005042:	d004      	beq.n	800504e <USB_EPStartXfer+0x14de>
 8005044:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005048:	3301      	adds	r3, #1
 800504a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800504e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	b29a      	uxth	r2, r3
 8005056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800505a:	b29b      	uxth	r3, r3
 800505c:	029b      	lsls	r3, r3, #10
 800505e:	b29b      	uxth	r3, r3
 8005060:	4313      	orrs	r3, r2
 8005062:	b29a      	uxth	r2, r3
 8005064:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005068:	801a      	strh	r2, [r3, #0]
 800506a:	e030      	b.n	80050ce <USB_EPStartXfer+0x155e>
 800506c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005070:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	785b      	ldrb	r3, [r3, #1]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d128      	bne.n	80050ce <USB_EPStartXfer+0x155e>
 800507c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005080:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800508a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800508e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005098:	b29b      	uxth	r3, r3
 800509a:	461a      	mov	r2, r3
 800509c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050a0:	4413      	add	r3, r2
 80050a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80050a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	011a      	lsls	r2, r3, #4
 80050b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050b8:	4413      	add	r3, r2
 80050ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80050cc:	801a      	strh	r2, [r3, #0]
 80050ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80050dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	785b      	ldrb	r3, [r3, #1]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f040 8085 	bne.w	80051f8 <USB_EPStartXfer+0x1688>
 80050ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80050fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005100:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800510a:	b29b      	uxth	r3, r3
 800510c:	461a      	mov	r2, r3
 800510e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005112:	4413      	add	r3, r2
 8005114:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800511c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	011a      	lsls	r2, r3, #4
 8005126:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800512a:	4413      	add	r3, r2
 800512c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005130:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005134:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	b29b      	uxth	r3, r3
 800513c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005140:	b29a      	uxth	r2, r3
 8005142:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005146:	801a      	strh	r2, [r3, #0]
 8005148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800514c:	2b3e      	cmp	r3, #62	; 0x3e
 800514e:	d923      	bls.n	8005198 <USB_EPStartXfer+0x1628>
 8005150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005154:	095b      	lsrs	r3, r3, #5
 8005156:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800515a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800515e:	f003 031f 	and.w	r3, r3, #31
 8005162:	2b00      	cmp	r3, #0
 8005164:	d104      	bne.n	8005170 <USB_EPStartXfer+0x1600>
 8005166:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800516a:	3b01      	subs	r3, #1
 800516c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005170:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	b29a      	uxth	r2, r3
 8005178:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800517c:	b29b      	uxth	r3, r3
 800517e:	029b      	lsls	r3, r3, #10
 8005180:	b29b      	uxth	r3, r3
 8005182:	4313      	orrs	r3, r2
 8005184:	b29b      	uxth	r3, r3
 8005186:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800518a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800518e:	b29a      	uxth	r2, r3
 8005190:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005194:	801a      	strh	r2, [r3, #0]
 8005196:	e05c      	b.n	8005252 <USB_EPStartXfer+0x16e2>
 8005198:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10c      	bne.n	80051ba <USB_EPStartXfer+0x164a>
 80051a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80051b6:	801a      	strh	r2, [r3, #0]
 80051b8:	e04b      	b.n	8005252 <USB_EPStartXfer+0x16e2>
 80051ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051be:	085b      	lsrs	r3, r3, #1
 80051c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80051c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d004      	beq.n	80051da <USB_EPStartXfer+0x166a>
 80051d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051d4:	3301      	adds	r3, #1
 80051d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80051da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80051de:	881b      	ldrh	r3, [r3, #0]
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	029b      	lsls	r3, r3, #10
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	4313      	orrs	r3, r2
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80051f4:	801a      	strh	r2, [r3, #0]
 80051f6:	e02c      	b.n	8005252 <USB_EPStartXfer+0x16e2>
 80051f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	785b      	ldrb	r3, [r3, #1]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d124      	bne.n	8005252 <USB_EPStartXfer+0x16e2>
 8005208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800520c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005216:	b29b      	uxth	r3, r3
 8005218:	461a      	mov	r2, r3
 800521a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800521e:	4413      	add	r3, r2
 8005220:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	011a      	lsls	r2, r3, #4
 8005232:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005236:	4413      	add	r3, r2
 8005238:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800523c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005244:	b29a      	uxth	r2, r3
 8005246:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800524a:	801a      	strh	r2, [r3, #0]
 800524c:	e001      	b.n	8005252 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e03a      	b.n	80052c8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005256:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	881b      	ldrh	r3, [r3, #0]
 800526e:	b29b      	uxth	r3, r3
 8005270:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005278:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800527c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005280:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005284:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005288:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800528c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005290:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005298:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	441a      	add	r2, r3
 80052ae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80052b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b085      	sub	sp, #20
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
 80052da:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	785b      	ldrb	r3, [r3, #1]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d020      	beq.n	8005326 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052fa:	81bb      	strh	r3, [r7, #12]
 80052fc:	89bb      	ldrh	r3, [r7, #12]
 80052fe:	f083 0310 	eor.w	r3, r3, #16
 8005302:	81bb      	strh	r3, [r7, #12]
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	441a      	add	r2, r3
 800530e:	89bb      	ldrh	r3, [r7, #12]
 8005310:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005314:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005318:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800531c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005320:	b29b      	uxth	r3, r3
 8005322:	8013      	strh	r3, [r2, #0]
 8005324:	e01f      	b.n	8005366 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4413      	add	r3, r2
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	b29b      	uxth	r3, r3
 8005334:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533c:	81fb      	strh	r3, [r7, #14]
 800533e:	89fb      	ldrh	r3, [r7, #14]
 8005340:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005344:	81fb      	strh	r3, [r7, #14]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	441a      	add	r2, r3
 8005350:	89fb      	ldrh	r3, [r7, #14]
 8005352:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005356:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800535a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800535e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005362:	b29b      	uxth	r3, r3
 8005364:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	bc80      	pop	{r7}
 8005370:	4770      	bx	lr

08005372 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005372:	b480      	push	{r7}
 8005374:	b087      	sub	sp, #28
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
 800537a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	7b1b      	ldrb	r3, [r3, #12]
 8005380:	2b00      	cmp	r3, #0
 8005382:	f040 809d 	bne.w	80054c0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	785b      	ldrb	r3, [r3, #1]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d04c      	beq.n	8005428 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	881b      	ldrh	r3, [r3, #0]
 800539a:	823b      	strh	r3, [r7, #16]
 800539c:	8a3b      	ldrh	r3, [r7, #16]
 800539e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d01b      	beq.n	80053de <USB_EPClearStall+0x6c>
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053bc:	81fb      	strh	r3, [r7, #14]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	441a      	add	r2, r3
 80053c8:	89fb      	ldrh	r3, [r7, #14]
 80053ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053da:	b29b      	uxth	r3, r3
 80053dc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	78db      	ldrb	r3, [r3, #3]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d06c      	beq.n	80054c0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4413      	add	r3, r2
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053fc:	81bb      	strh	r3, [r7, #12]
 80053fe:	89bb      	ldrh	r3, [r7, #12]
 8005400:	f083 0320 	eor.w	r3, r3, #32
 8005404:	81bb      	strh	r3, [r7, #12]
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	441a      	add	r2, r3
 8005410:	89bb      	ldrh	r3, [r7, #12]
 8005412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800541a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800541e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005422:	b29b      	uxth	r3, r3
 8005424:	8013      	strh	r3, [r2, #0]
 8005426:	e04b      	b.n	80054c0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	82fb      	strh	r3, [r7, #22]
 8005436:	8afb      	ldrh	r3, [r7, #22]
 8005438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d01b      	beq.n	8005478 <USB_EPClearStall+0x106>
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4413      	add	r3, r2
 800544a:	881b      	ldrh	r3, [r3, #0]
 800544c:	b29b      	uxth	r3, r3
 800544e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005456:	82bb      	strh	r3, [r7, #20]
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	441a      	add	r2, r3
 8005462:	8abb      	ldrh	r3, [r7, #20]
 8005464:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005468:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800546c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005474:	b29b      	uxth	r3, r3
 8005476:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	881b      	ldrh	r3, [r3, #0]
 8005484:	b29b      	uxth	r3, r3
 8005486:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800548a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548e:	827b      	strh	r3, [r7, #18]
 8005490:	8a7b      	ldrh	r3, [r7, #18]
 8005492:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005496:	827b      	strh	r3, [r7, #18]
 8005498:	8a7b      	ldrh	r3, [r7, #18]
 800549a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800549e:	827b      	strh	r3, [r7, #18]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	441a      	add	r2, r3
 80054aa:	8a7b      	ldrh	r3, [r7, #18]
 80054ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054bc:	b29b      	uxth	r3, r3
 80054be:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	371c      	adds	r7, #28
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bc80      	pop	{r7}
 80054ca:	4770      	bx	lr

080054cc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	460b      	mov	r3, r1
 80054d6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80054d8:	78fb      	ldrb	r3, [r7, #3]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d103      	bne.n	80054e6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2280      	movs	r2, #128	; 0x80
 80054e2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bc80      	pop	{r7}
 80054f0:	4770      	bx	lr

080054f2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	bc80      	pop	{r7}
 8005504:	4770      	bx	lr

08005506 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	bc80      	pop	{r7}
 8005518:	4770      	bx	lr

0800551a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800551a:	b480      	push	{r7}
 800551c:	b085      	sub	sp, #20
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005528:	b29b      	uxth	r3, r3
 800552a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800552c:	68fb      	ldr	r3, [r7, #12]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	bc80      	pop	{r7}
 8005536:	4770      	bx	lr

08005538 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	bc80      	pop	{r7}
 800554c:	4770      	bx	lr

0800554e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800554e:	b480      	push	{r7}
 8005550:	b08b      	sub	sp, #44	; 0x2c
 8005552:	af00      	add	r7, sp, #0
 8005554:	60f8      	str	r0, [r7, #12]
 8005556:	60b9      	str	r1, [r7, #8]
 8005558:	4611      	mov	r1, r2
 800555a:	461a      	mov	r2, r3
 800555c:	460b      	mov	r3, r1
 800555e:	80fb      	strh	r3, [r7, #6]
 8005560:	4613      	mov	r3, r2
 8005562:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005564:	88bb      	ldrh	r3, [r7, #4]
 8005566:	3301      	adds	r3, #1
 8005568:	085b      	lsrs	r3, r3, #1
 800556a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005574:	88fb      	ldrh	r3, [r7, #6]
 8005576:	005a      	lsls	r2, r3, #1
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005580:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	627b      	str	r3, [r7, #36]	; 0x24
 8005586:	e01e      	b.n	80055c6 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	3301      	adds	r3, #1
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	021b      	lsls	r3, r3, #8
 8005596:	b21a      	sxth	r2, r3
 8005598:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800559c:	4313      	orrs	r3, r2
 800559e:	b21b      	sxth	r3, r3
 80055a0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	8a7a      	ldrh	r2, [r7, #18]
 80055a6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80055a8:	6a3b      	ldr	r3, [r7, #32]
 80055aa:	3302      	adds	r3, #2
 80055ac:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80055ae:	6a3b      	ldr	r3, [r7, #32]
 80055b0:	3302      	adds	r3, #2
 80055b2:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	3301      	adds	r3, #1
 80055b8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	3301      	adds	r3, #1
 80055be:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	3b01      	subs	r3, #1
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1dd      	bne.n	8005588 <USB_WritePMA+0x3a>
  }
}
 80055cc:	bf00      	nop
 80055ce:	bf00      	nop
 80055d0:	372c      	adds	r7, #44	; 0x2c
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bc80      	pop	{r7}
 80055d6:	4770      	bx	lr

080055d8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80055d8:	b480      	push	{r7}
 80055da:	b08b      	sub	sp, #44	; 0x2c
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	4611      	mov	r1, r2
 80055e4:	461a      	mov	r2, r3
 80055e6:	460b      	mov	r3, r1
 80055e8:	80fb      	strh	r3, [r7, #6]
 80055ea:	4613      	mov	r3, r2
 80055ec:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80055ee:	88bb      	ldrh	r3, [r7, #4]
 80055f0:	085b      	lsrs	r3, r3, #1
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80055fe:	88fb      	ldrh	r3, [r7, #6]
 8005600:	005a      	lsls	r2, r3, #1
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	4413      	add	r3, r2
 8005606:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800560a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	627b      	str	r3, [r7, #36]	; 0x24
 8005610:	e01b      	b.n	800564a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005612:	6a3b      	ldr	r3, [r7, #32]
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	b29b      	uxth	r3, r3
 8005618:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	3302      	adds	r3, #2
 800561e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	b2da      	uxtb	r2, r3
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	3301      	adds	r3, #1
 800562c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	0a1b      	lsrs	r3, r3, #8
 8005632:	b2da      	uxtb	r2, r3
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	3301      	adds	r3, #1
 800563c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	3302      	adds	r3, #2
 8005642:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	3b01      	subs	r3, #1
 8005648:	627b      	str	r3, [r7, #36]	; 0x24
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1e0      	bne.n	8005612 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005650:	88bb      	ldrh	r3, [r7, #4]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	b29b      	uxth	r3, r3
 8005658:	2b00      	cmp	r3, #0
 800565a:	d007      	beq.n	800566c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	b29b      	uxth	r3, r3
 8005662:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	b2da      	uxtb	r2, r3
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	701a      	strb	r2, [r3, #0]
  }
}
 800566c:	bf00      	nop
 800566e:	372c      	adds	r7, #44	; 0x2c
 8005670:	46bd      	mov	sp, r7
 8005672:	bc80      	pop	{r7}
 8005674:	4770      	bx	lr

08005676 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b082      	sub	sp, #8
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
 800567e:	460b      	mov	r3, r1
 8005680:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005682:	2304      	movs	r3, #4
 8005684:	2203      	movs	r2, #3
 8005686:	2181      	movs	r1, #129	; 0x81
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f001 fc62 	bl	8006f52 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005694:	2010      	movs	r0, #16
 8005696:	f001 fd71 	bl	800717c <USBD_static_malloc>
 800569a:	4602      	mov	r2, r0
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d101      	bne.n	80056b0 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 80056ac:	2302      	movs	r3, #2
 80056ae:	e005      	b.n	80056bc <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056b6:	2200      	movs	r2, #0
 80056b8:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3708      	adds	r7, #8
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	460b      	mov	r3, r1
 80056ce:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80056d0:	2181      	movs	r1, #129	; 0x81
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f001 fc63 	bl	8006f9e <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d009      	beq.n	80056fc <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056ee:	4618      	mov	r0, r3
 80056f0:	f001 fd50 	bl	8007194 <USBD_static_free>
    pdev->pClassData = NULL;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
	...

08005708 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b088      	sub	sp, #32
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005718:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800571a:	2300      	movs	r3, #0
 800571c:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800571e:	2300      	movs	r3, #0
 8005720:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005722:	2300      	movs	r3, #0
 8005724:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8005726:	2300      	movs	r3, #0
 8005728:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005732:	2b00      	cmp	r3, #0
 8005734:	d045      	beq.n	80057c2 <USBD_HID_Setup+0xba>
 8005736:	2b20      	cmp	r3, #32
 8005738:	f040 80d3 	bne.w	80058e2 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	785b      	ldrb	r3, [r3, #1]
 8005740:	3b02      	subs	r3, #2
 8005742:	2b09      	cmp	r3, #9
 8005744:	d835      	bhi.n	80057b2 <USBD_HID_Setup+0xaa>
 8005746:	a201      	add	r2, pc, #4	; (adr r2, 800574c <USBD_HID_Setup+0x44>)
 8005748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574c:	080057a3 	.word	0x080057a3
 8005750:	08005783 	.word	0x08005783
 8005754:	080057b3 	.word	0x080057b3
 8005758:	080057b3 	.word	0x080057b3
 800575c:	080057b3 	.word	0x080057b3
 8005760:	080057b3 	.word	0x080057b3
 8005764:	080057b3 	.word	0x080057b3
 8005768:	080057b3 	.word	0x080057b3
 800576c:	08005791 	.word	0x08005791
 8005770:	08005775 	.word	0x08005775
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	885b      	ldrh	r3, [r3, #2]
 8005778:	b2db      	uxtb	r3, r3
 800577a:	461a      	mov	r2, r3
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	601a      	str	r2, [r3, #0]
          break;
 8005780:	e01e      	b.n	80057c0 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	2201      	movs	r2, #1
 8005786:	4619      	mov	r1, r3
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f001 f922 	bl	80069d2 <USBD_CtlSendData>
          break;
 800578e:	e017      	b.n	80057c0 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	885b      	ldrh	r3, [r3, #2]
 8005794:	0a1b      	lsrs	r3, r3, #8
 8005796:	b29b      	uxth	r3, r3
 8005798:	b2db      	uxtb	r3, r3
 800579a:	461a      	mov	r2, r3
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	605a      	str	r2, [r3, #4]
          break;
 80057a0:	e00e      	b.n	80057c0 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	3304      	adds	r3, #4
 80057a6:	2201      	movs	r2, #1
 80057a8:	4619      	mov	r1, r3
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f001 f911 	bl	80069d2 <USBD_CtlSendData>
          break;
 80057b0:	e006      	b.n	80057c0 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 80057b2:	6839      	ldr	r1, [r7, #0]
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f001 f8a2 	bl	80068fe <USBD_CtlError>
          ret = USBD_FAIL;
 80057ba:	2302      	movs	r3, #2
 80057bc:	75fb      	strb	r3, [r7, #23]
          break;
 80057be:	bf00      	nop
      }
      break;
 80057c0:	e096      	b.n	80058f0 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	785b      	ldrb	r3, [r3, #1]
 80057c6:	2b0b      	cmp	r3, #11
 80057c8:	f200 8083 	bhi.w	80058d2 <USBD_HID_Setup+0x1ca>
 80057cc:	a201      	add	r2, pc, #4	; (adr r2, 80057d4 <USBD_HID_Setup+0xcc>)
 80057ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d2:	bf00      	nop
 80057d4:	08005805 	.word	0x08005805
 80057d8:	080058d3 	.word	0x080058d3
 80057dc:	080058d3 	.word	0x080058d3
 80057e0:	080058d3 	.word	0x080058d3
 80057e4:	080058d3 	.word	0x080058d3
 80057e8:	080058d3 	.word	0x080058d3
 80057ec:	0800582d 	.word	0x0800582d
 80057f0:	080058d3 	.word	0x080058d3
 80057f4:	080058d3 	.word	0x080058d3
 80057f8:	080058d3 	.word	0x080058d3
 80057fc:	08005885 	.word	0x08005885
 8005800:	080058ad 	.word	0x080058ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800580a:	2b03      	cmp	r3, #3
 800580c:	d107      	bne.n	800581e <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800580e:	f107 030e 	add.w	r3, r7, #14
 8005812:	2202      	movs	r2, #2
 8005814:	4619      	mov	r1, r3
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f001 f8db 	bl	80069d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800581c:	e060      	b.n	80058e0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800581e:	6839      	ldr	r1, [r7, #0]
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f001 f86c 	bl	80068fe <USBD_CtlError>
            ret = USBD_FAIL;
 8005826:	2302      	movs	r3, #2
 8005828:	75fb      	strb	r3, [r7, #23]
          break;
 800582a:	e059      	b.n	80058e0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	885b      	ldrh	r3, [r3, #2]
 8005830:	0a1b      	lsrs	r3, r3, #8
 8005832:	b29b      	uxth	r3, r3
 8005834:	2b22      	cmp	r3, #34	; 0x22
 8005836:	d108      	bne.n	800584a <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	88db      	ldrh	r3, [r3, #6]
 800583c:	2b4a      	cmp	r3, #74	; 0x4a
 800583e:	bf28      	it	cs
 8005840:	234a      	movcs	r3, #74	; 0x4a
 8005842:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8005844:	4b2d      	ldr	r3, [pc, #180]	; (80058fc <USBD_HID_Setup+0x1f4>)
 8005846:	61bb      	str	r3, [r7, #24]
 8005848:	e015      	b.n	8005876 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	885b      	ldrh	r3, [r3, #2]
 800584e:	0a1b      	lsrs	r3, r3, #8
 8005850:	b29b      	uxth	r3, r3
 8005852:	2b21      	cmp	r3, #33	; 0x21
 8005854:	d108      	bne.n	8005868 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8005856:	4b2a      	ldr	r3, [pc, #168]	; (8005900 <USBD_HID_Setup+0x1f8>)
 8005858:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	88db      	ldrh	r3, [r3, #6]
 800585e:	2b09      	cmp	r3, #9
 8005860:	bf28      	it	cs
 8005862:	2309      	movcs	r3, #9
 8005864:	83fb      	strh	r3, [r7, #30]
 8005866:	e006      	b.n	8005876 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005868:	6839      	ldr	r1, [r7, #0]
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f001 f847 	bl	80068fe <USBD_CtlError>
            ret = USBD_FAIL;
 8005870:	2302      	movs	r3, #2
 8005872:	75fb      	strb	r3, [r7, #23]
            break;
 8005874:	e034      	b.n	80058e0 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8005876:	8bfb      	ldrh	r3, [r7, #30]
 8005878:	461a      	mov	r2, r3
 800587a:	69b9      	ldr	r1, [r7, #24]
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f001 f8a8 	bl	80069d2 <USBD_CtlSendData>
          break;
 8005882:	e02d      	b.n	80058e0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800588a:	2b03      	cmp	r3, #3
 800588c:	d107      	bne.n	800589e <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	3308      	adds	r3, #8
 8005892:	2201      	movs	r2, #1
 8005894:	4619      	mov	r1, r3
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f001 f89b 	bl	80069d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800589c:	e020      	b.n	80058e0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800589e:	6839      	ldr	r1, [r7, #0]
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f001 f82c 	bl	80068fe <USBD_CtlError>
            ret = USBD_FAIL;
 80058a6:	2302      	movs	r3, #2
 80058a8:	75fb      	strb	r3, [r7, #23]
          break;
 80058aa:	e019      	b.n	80058e0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058b2:	2b03      	cmp	r3, #3
 80058b4:	d106      	bne.n	80058c4 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	885b      	ldrh	r3, [r3, #2]
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	461a      	mov	r2, r3
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058c2:	e00d      	b.n	80058e0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80058c4:	6839      	ldr	r1, [r7, #0]
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f001 f819 	bl	80068fe <USBD_CtlError>
            ret = USBD_FAIL;
 80058cc:	2302      	movs	r3, #2
 80058ce:	75fb      	strb	r3, [r7, #23]
          break;
 80058d0:	e006      	b.n	80058e0 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 80058d2:	6839      	ldr	r1, [r7, #0]
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f001 f812 	bl	80068fe <USBD_CtlError>
          ret = USBD_FAIL;
 80058da:	2302      	movs	r3, #2
 80058dc:	75fb      	strb	r3, [r7, #23]
          break;
 80058de:	bf00      	nop
      }
      break;
 80058e0:	e006      	b.n	80058f0 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 80058e2:	6839      	ldr	r1, [r7, #0]
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f001 f80a 	bl	80068fe <USBD_CtlError>
      ret = USBD_FAIL;
 80058ea:	2302      	movs	r3, #2
 80058ec:	75fb      	strb	r3, [r7, #23]
      break;
 80058ee:	bf00      	nop
  }

  return ret;
 80058f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3720      	adds	r7, #32
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	20000168 	.word	0x20000168
 8005900:	20000150 	.word	0x20000150

08005904 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2222      	movs	r2, #34	; 0x22
 8005910:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8005912:	4b03      	ldr	r3, [pc, #12]	; (8005920 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8005914:	4618      	mov	r0, r3
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	bc80      	pop	{r7}
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	200000e4 	.word	0x200000e4

08005924 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2222      	movs	r2, #34	; 0x22
 8005930:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8005932:	4b03      	ldr	r3, [pc, #12]	; (8005940 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8005934:	4618      	mov	r0, r3
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	bc80      	pop	{r7}
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	20000108 	.word	0x20000108

08005944 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2222      	movs	r2, #34	; 0x22
 8005950:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8005952:	4b03      	ldr	r3, [pc, #12]	; (8005960 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005954:	4618      	mov	r0, r3
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	bc80      	pop	{r7}
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	2000012c 	.word	0x2000012c

08005964 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	460b      	mov	r3, r1
 800596e:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005976:	2200      	movs	r2, #0
 8005978:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	bc80      	pop	{r7}
 8005984:	4770      	bx	lr
	...

08005988 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	220a      	movs	r2, #10
 8005994:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8005996:	4b03      	ldr	r3, [pc, #12]	; (80059a4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005998:	4618      	mov	r0, r3
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	bc80      	pop	{r7}
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	2000015c 	.word	0x2000015c

080059a8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	4613      	mov	r3, r2
 80059b4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80059bc:	2302      	movs	r3, #2
 80059be:	e01a      	b.n	80059f6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	79fa      	ldrb	r2, [r7, #7]
 80059ec:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f001 fa4c 	bl	8006e8c <USBD_LL_Init>

  return USBD_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b085      	sub	sp, #20
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
 8005a06:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d006      	beq.n	8005a20 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	73fb      	strb	r3, [r7, #15]
 8005a1e:	e001      	b.n	8005a24 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005a20:	2302      	movs	r3, #2
 8005a22:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3714      	adds	r7, #20
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bc80      	pop	{r7}
 8005a2e:	4770      	bx	lr

08005a30 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f001 fa6f 	bl	8006f1c <USBD_LL_Start>

  return USBD_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bc80      	pop	{r7}
 8005a5a:	4770      	bx	lr

08005a5c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	460b      	mov	r3, r1
 8005a66:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005a68:	2302      	movs	r3, #2
 8005a6a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00c      	beq.n	8005a90 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	78fa      	ldrb	r2, [r7, #3]
 8005a80:	4611      	mov	r1, r2
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	4798      	blx	r3
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b082      	sub	sp, #8
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	78fa      	ldrb	r2, [r7, #3]
 8005ab0:	4611      	mov	r1, r2
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	4798      	blx	r3

  return USBD_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3708      	adds	r7, #8
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005ad0:	6839      	ldr	r1, [r7, #0]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 fed7 	bl	8006886 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005af4:	f003 031f 	and.w	r3, r3, #31
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d016      	beq.n	8005b2a <USBD_LL_SetupStage+0x6a>
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d81c      	bhi.n	8005b3a <USBD_LL_SetupStage+0x7a>
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d002      	beq.n	8005b0a <USBD_LL_SetupStage+0x4a>
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d008      	beq.n	8005b1a <USBD_LL_SetupStage+0x5a>
 8005b08:	e017      	b.n	8005b3a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005b10:	4619      	mov	r1, r3
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f9ca 	bl	8005eac <USBD_StdDevReq>
      break;
 8005b18:	e01a      	b.n	8005b50 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005b20:	4619      	mov	r1, r3
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 fa2c 	bl	8005f80 <USBD_StdItfReq>
      break;
 8005b28:	e012      	b.n	8005b50 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005b30:	4619      	mov	r1, r3
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fa6c 	bl	8006010 <USBD_StdEPReq>
      break;
 8005b38:	e00a      	b.n	8005b50 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005b40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	4619      	mov	r1, r3
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f001 fa47 	bl	8006fdc <USBD_LL_StallEP>
      break;
 8005b4e:	bf00      	nop
  }

  return USBD_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b086      	sub	sp, #24
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	60f8      	str	r0, [r7, #12]
 8005b62:	460b      	mov	r3, r1
 8005b64:	607a      	str	r2, [r7, #4]
 8005b66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005b68:	7afb      	ldrb	r3, [r7, #11]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d14b      	bne.n	8005c06 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005b74:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	d134      	bne.n	8005bea <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	68da      	ldr	r2, [r3, #12]
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d919      	bls.n	8005bc0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	68da      	ldr	r2, [r3, #12]
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	1ad2      	subs	r2, r2, r3
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	68da      	ldr	r2, [r3, #12]
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d203      	bcs.n	8005bae <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	e002      	b.n	8005bb4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	6879      	ldr	r1, [r7, #4]
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f000 ff38 	bl	8006a2e <USBD_CtlContinueRx>
 8005bbe:	e038      	b.n	8005c32 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00a      	beq.n	8005be2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005bd2:	2b03      	cmp	r3, #3
 8005bd4:	d105      	bne.n	8005be2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f000 ff35 	bl	8006a52 <USBD_CtlSendStatus>
 8005be8:	e023      	b.n	8005c32 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005bf0:	2b05      	cmp	r3, #5
 8005bf2:	d11e      	bne.n	8005c32 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f001 f9ec 	bl	8006fdc <USBD_LL_StallEP>
 8005c04:	e015      	b.n	8005c32 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00d      	beq.n	8005c2e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005c18:	2b03      	cmp	r3, #3
 8005c1a:	d108      	bne.n	8005c2e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	7afa      	ldrb	r2, [r7, #11]
 8005c26:	4611      	mov	r1, r2
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	4798      	blx	r3
 8005c2c:	e001      	b.n	8005c32 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005c2e:	2302      	movs	r3, #2
 8005c30:	e000      	b.n	8005c34 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3718      	adds	r7, #24
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	460b      	mov	r3, r1
 8005c46:	607a      	str	r2, [r7, #4]
 8005c48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005c4a:	7afb      	ldrb	r3, [r7, #11]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d17f      	bne.n	8005d50 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	3314      	adds	r3, #20
 8005c54:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d15c      	bne.n	8005d1a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	68da      	ldr	r2, [r3, #12]
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d915      	bls.n	8005c98 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	68da      	ldr	r2, [r3, #12]
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	1ad2      	subs	r2, r2, r3
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	461a      	mov	r2, r3
 8005c82:	6879      	ldr	r1, [r7, #4]
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f000 fec0 	bl	8006a0a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	2100      	movs	r1, #0
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f001 fa4f 	bl	8007134 <USBD_LL_PrepareReceive>
 8005c96:	e04e      	b.n	8005d36 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	6912      	ldr	r2, [r2, #16]
 8005ca0:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ca4:	fb01 f202 	mul.w	r2, r1, r2
 8005ca8:	1a9b      	subs	r3, r3, r2
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d11c      	bne.n	8005ce8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	689a      	ldr	r2, [r3, #8]
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d316      	bcc.n	8005ce8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	689a      	ldr	r2, [r3, #8]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d20f      	bcs.n	8005ce8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005cc8:	2200      	movs	r2, #0
 8005cca:	2100      	movs	r1, #0
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 fe9c 	bl	8006a0a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005cda:	2300      	movs	r3, #0
 8005cdc:	2200      	movs	r2, #0
 8005cde:	2100      	movs	r1, #0
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f001 fa27 	bl	8007134 <USBD_LL_PrepareReceive>
 8005ce6:	e026      	b.n	8005d36 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00a      	beq.n	8005d0a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005cfa:	2b03      	cmp	r3, #3
 8005cfc:	d105      	bne.n	8005d0a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005d0a:	2180      	movs	r1, #128	; 0x80
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f001 f965 	bl	8006fdc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 feb0 	bl	8006a78 <USBD_CtlReceiveStatus>
 8005d18:	e00d      	b.n	8005d36 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d20:	2b04      	cmp	r3, #4
 8005d22:	d004      	beq.n	8005d2e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d103      	bne.n	8005d36 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005d2e:	2180      	movs	r1, #128	; 0x80
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f001 f953 	bl	8006fdc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d11d      	bne.n	8005d7c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f7ff fe81 	bl	8005a48 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005d4e:	e015      	b.n	8005d7c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00d      	beq.n	8005d78 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005d62:	2b03      	cmp	r3, #3
 8005d64:	d108      	bne.n	8005d78 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	7afa      	ldrb	r2, [r7, #11]
 8005d70:	4611      	mov	r1, r2
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	4798      	blx	r3
 8005d76:	e001      	b.n	8005d7c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005d78:	2302      	movs	r3, #2
 8005d7a:	e000      	b.n	8005d7e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3718      	adds	r7, #24
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b082      	sub	sp, #8
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d8e:	2340      	movs	r3, #64	; 0x40
 8005d90:	2200      	movs	r2, #0
 8005d92:	2100      	movs	r1, #0
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f001 f8dc 	bl	8006f52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2240      	movs	r2, #64	; 0x40
 8005da6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005daa:	2340      	movs	r3, #64	; 0x40
 8005dac:	2200      	movs	r2, #0
 8005dae:	2180      	movs	r1, #128	; 0x80
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f001 f8ce 	bl	8006f52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2240      	movs	r2, #64	; 0x40
 8005dc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d009      	beq.n	8005dfe <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	6852      	ldr	r2, [r2, #4]
 8005df6:	b2d2      	uxtb	r2, r2
 8005df8:	4611      	mov	r1, r2
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	4798      	blx	r3
  }

  return USBD_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	460b      	mov	r3, r1
 8005e12:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	78fa      	ldrb	r2, [r7, #3]
 8005e18:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bc80      	pop	{r7}
 8005e24:	4770      	bx	lr

08005e26 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b083      	sub	sp, #12
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2204      	movs	r2, #4
 8005e3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bc80      	pop	{r7}
 8005e4c:	4770      	bx	lr

08005e4e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b083      	sub	sp, #12
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e5c:	2b04      	cmp	r3, #4
 8005e5e:	d105      	bne.n	8005e6c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bc80      	pop	{r7}
 8005e76:	4770      	bx	lr

08005e78 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e86:	2b03      	cmp	r3, #3
 8005e88:	d10b      	bne.n	8005ea2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e90:	69db      	ldr	r3, [r3, #28]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d005      	beq.n	8005ea2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e9c:	69db      	ldr	r3, [r3, #28]
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3708      	adds	r7, #8
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ec2:	2b40      	cmp	r3, #64	; 0x40
 8005ec4:	d005      	beq.n	8005ed2 <USBD_StdDevReq+0x26>
 8005ec6:	2b40      	cmp	r3, #64	; 0x40
 8005ec8:	d84f      	bhi.n	8005f6a <USBD_StdDevReq+0xbe>
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d009      	beq.n	8005ee2 <USBD_StdDevReq+0x36>
 8005ece:	2b20      	cmp	r3, #32
 8005ed0:	d14b      	bne.n	8005f6a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	6839      	ldr	r1, [r7, #0]
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	4798      	blx	r3
      break;
 8005ee0:	e048      	b.n	8005f74 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	785b      	ldrb	r3, [r3, #1]
 8005ee6:	2b09      	cmp	r3, #9
 8005ee8:	d839      	bhi.n	8005f5e <USBD_StdDevReq+0xb2>
 8005eea:	a201      	add	r2, pc, #4	; (adr r2, 8005ef0 <USBD_StdDevReq+0x44>)
 8005eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef0:	08005f41 	.word	0x08005f41
 8005ef4:	08005f55 	.word	0x08005f55
 8005ef8:	08005f5f 	.word	0x08005f5f
 8005efc:	08005f4b 	.word	0x08005f4b
 8005f00:	08005f5f 	.word	0x08005f5f
 8005f04:	08005f23 	.word	0x08005f23
 8005f08:	08005f19 	.word	0x08005f19
 8005f0c:	08005f5f 	.word	0x08005f5f
 8005f10:	08005f37 	.word	0x08005f37
 8005f14:	08005f2d 	.word	0x08005f2d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005f18:	6839      	ldr	r1, [r7, #0]
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f9dc 	bl	80062d8 <USBD_GetDescriptor>
          break;
 8005f20:	e022      	b.n	8005f68 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005f22:	6839      	ldr	r1, [r7, #0]
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 fb3f 	bl	80065a8 <USBD_SetAddress>
          break;
 8005f2a:	e01d      	b.n	8005f68 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005f2c:	6839      	ldr	r1, [r7, #0]
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fb7e 	bl	8006630 <USBD_SetConfig>
          break;
 8005f34:	e018      	b.n	8005f68 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005f36:	6839      	ldr	r1, [r7, #0]
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fc07 	bl	800674c <USBD_GetConfig>
          break;
 8005f3e:	e013      	b.n	8005f68 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005f40:	6839      	ldr	r1, [r7, #0]
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fc37 	bl	80067b6 <USBD_GetStatus>
          break;
 8005f48:	e00e      	b.n	8005f68 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005f4a:	6839      	ldr	r1, [r7, #0]
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fc65 	bl	800681c <USBD_SetFeature>
          break;
 8005f52:	e009      	b.n	8005f68 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005f54:	6839      	ldr	r1, [r7, #0]
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fc74 	bl	8006844 <USBD_ClrFeature>
          break;
 8005f5c:	e004      	b.n	8005f68 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005f5e:	6839      	ldr	r1, [r7, #0]
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 fccc 	bl	80068fe <USBD_CtlError>
          break;
 8005f66:	bf00      	nop
      }
      break;
 8005f68:	e004      	b.n	8005f74 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005f6a:	6839      	ldr	r1, [r7, #0]
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fcc6 	bl	80068fe <USBD_CtlError>
      break;
 8005f72:	bf00      	nop
  }

  return ret;
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop

08005f80 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f96:	2b40      	cmp	r3, #64	; 0x40
 8005f98:	d005      	beq.n	8005fa6 <USBD_StdItfReq+0x26>
 8005f9a:	2b40      	cmp	r3, #64	; 0x40
 8005f9c:	d82e      	bhi.n	8005ffc <USBD_StdItfReq+0x7c>
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <USBD_StdItfReq+0x26>
 8005fa2:	2b20      	cmp	r3, #32
 8005fa4:	d12a      	bne.n	8005ffc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fac:	3b01      	subs	r3, #1
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d81d      	bhi.n	8005fee <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	889b      	ldrh	r3, [r3, #4]
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d813      	bhi.n	8005fe4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	6839      	ldr	r1, [r7, #0]
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	4798      	blx	r3
 8005fca:	4603      	mov	r3, r0
 8005fcc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	88db      	ldrh	r3, [r3, #6]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d110      	bne.n	8005ff8 <USBD_StdItfReq+0x78>
 8005fd6:	7bfb      	ldrb	r3, [r7, #15]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10d      	bne.n	8005ff8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fd38 	bl	8006a52 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005fe2:	e009      	b.n	8005ff8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8005fe4:	6839      	ldr	r1, [r7, #0]
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 fc89 	bl	80068fe <USBD_CtlError>
          break;
 8005fec:	e004      	b.n	8005ff8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8005fee:	6839      	ldr	r1, [r7, #0]
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 fc84 	bl	80068fe <USBD_CtlError>
          break;
 8005ff6:	e000      	b.n	8005ffa <USBD_StdItfReq+0x7a>
          break;
 8005ff8:	bf00      	nop
      }
      break;
 8005ffa:	e004      	b.n	8006006 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8005ffc:	6839      	ldr	r1, [r7, #0]
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fc7d 	bl	80068fe <USBD_CtlError>
      break;
 8006004:	bf00      	nop
  }

  return USBD_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	889b      	ldrh	r3, [r3, #4]
 8006022:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800602c:	2b40      	cmp	r3, #64	; 0x40
 800602e:	d007      	beq.n	8006040 <USBD_StdEPReq+0x30>
 8006030:	2b40      	cmp	r3, #64	; 0x40
 8006032:	f200 8146 	bhi.w	80062c2 <USBD_StdEPReq+0x2b2>
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00a      	beq.n	8006050 <USBD_StdEPReq+0x40>
 800603a:	2b20      	cmp	r3, #32
 800603c:	f040 8141 	bne.w	80062c2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	6839      	ldr	r1, [r7, #0]
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	4798      	blx	r3
      break;
 800604e:	e13d      	b.n	80062cc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006058:	2b20      	cmp	r3, #32
 800605a:	d10a      	bne.n	8006072 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	6839      	ldr	r1, [r7, #0]
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	4798      	blx	r3
 800606a:	4603      	mov	r3, r0
 800606c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800606e:	7bfb      	ldrb	r3, [r7, #15]
 8006070:	e12d      	b.n	80062ce <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	785b      	ldrb	r3, [r3, #1]
 8006076:	2b03      	cmp	r3, #3
 8006078:	d007      	beq.n	800608a <USBD_StdEPReq+0x7a>
 800607a:	2b03      	cmp	r3, #3
 800607c:	f300 811b 	bgt.w	80062b6 <USBD_StdEPReq+0x2a6>
 8006080:	2b00      	cmp	r3, #0
 8006082:	d072      	beq.n	800616a <USBD_StdEPReq+0x15a>
 8006084:	2b01      	cmp	r3, #1
 8006086:	d03a      	beq.n	80060fe <USBD_StdEPReq+0xee>
 8006088:	e115      	b.n	80062b6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006090:	2b02      	cmp	r3, #2
 8006092:	d002      	beq.n	800609a <USBD_StdEPReq+0x8a>
 8006094:	2b03      	cmp	r3, #3
 8006096:	d015      	beq.n	80060c4 <USBD_StdEPReq+0xb4>
 8006098:	e02b      	b.n	80060f2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800609a:	7bbb      	ldrb	r3, [r7, #14]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00c      	beq.n	80060ba <USBD_StdEPReq+0xaa>
 80060a0:	7bbb      	ldrb	r3, [r7, #14]
 80060a2:	2b80      	cmp	r3, #128	; 0x80
 80060a4:	d009      	beq.n	80060ba <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80060a6:	7bbb      	ldrb	r3, [r7, #14]
 80060a8:	4619      	mov	r1, r3
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 ff96 	bl	8006fdc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80060b0:	2180      	movs	r1, #128	; 0x80
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 ff92 	bl	8006fdc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80060b8:	e020      	b.n	80060fc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80060ba:	6839      	ldr	r1, [r7, #0]
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fc1e 	bl	80068fe <USBD_CtlError>
              break;
 80060c2:	e01b      	b.n	80060fc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	885b      	ldrh	r3, [r3, #2]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10e      	bne.n	80060ea <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80060cc:	7bbb      	ldrb	r3, [r7, #14]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00b      	beq.n	80060ea <USBD_StdEPReq+0xda>
 80060d2:	7bbb      	ldrb	r3, [r7, #14]
 80060d4:	2b80      	cmp	r3, #128	; 0x80
 80060d6:	d008      	beq.n	80060ea <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	88db      	ldrh	r3, [r3, #6]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d104      	bne.n	80060ea <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80060e0:	7bbb      	ldrb	r3, [r7, #14]
 80060e2:	4619      	mov	r1, r3
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 ff79 	bl	8006fdc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 fcb1 	bl	8006a52 <USBD_CtlSendStatus>

              break;
 80060f0:	e004      	b.n	80060fc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80060f2:	6839      	ldr	r1, [r7, #0]
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 fc02 	bl	80068fe <USBD_CtlError>
              break;
 80060fa:	bf00      	nop
          }
          break;
 80060fc:	e0e0      	b.n	80062c0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006104:	2b02      	cmp	r3, #2
 8006106:	d002      	beq.n	800610e <USBD_StdEPReq+0xfe>
 8006108:	2b03      	cmp	r3, #3
 800610a:	d015      	beq.n	8006138 <USBD_StdEPReq+0x128>
 800610c:	e026      	b.n	800615c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800610e:	7bbb      	ldrb	r3, [r7, #14]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00c      	beq.n	800612e <USBD_StdEPReq+0x11e>
 8006114:	7bbb      	ldrb	r3, [r7, #14]
 8006116:	2b80      	cmp	r3, #128	; 0x80
 8006118:	d009      	beq.n	800612e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800611a:	7bbb      	ldrb	r3, [r7, #14]
 800611c:	4619      	mov	r1, r3
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 ff5c 	bl	8006fdc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006124:	2180      	movs	r1, #128	; 0x80
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 ff58 	bl	8006fdc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800612c:	e01c      	b.n	8006168 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 fbe4 	bl	80068fe <USBD_CtlError>
              break;
 8006136:	e017      	b.n	8006168 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	885b      	ldrh	r3, [r3, #2]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d112      	bne.n	8006166 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006140:	7bbb      	ldrb	r3, [r7, #14]
 8006142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006146:	2b00      	cmp	r3, #0
 8006148:	d004      	beq.n	8006154 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800614a:	7bbb      	ldrb	r3, [r7, #14]
 800614c:	4619      	mov	r1, r3
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 ff63 	bl	800701a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 fc7c 	bl	8006a52 <USBD_CtlSendStatus>
              }
              break;
 800615a:	e004      	b.n	8006166 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800615c:	6839      	ldr	r1, [r7, #0]
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 fbcd 	bl	80068fe <USBD_CtlError>
              break;
 8006164:	e000      	b.n	8006168 <USBD_StdEPReq+0x158>
              break;
 8006166:	bf00      	nop
          }
          break;
 8006168:	e0aa      	b.n	80062c0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006170:	2b02      	cmp	r3, #2
 8006172:	d002      	beq.n	800617a <USBD_StdEPReq+0x16a>
 8006174:	2b03      	cmp	r3, #3
 8006176:	d032      	beq.n	80061de <USBD_StdEPReq+0x1ce>
 8006178:	e097      	b.n	80062aa <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800617a:	7bbb      	ldrb	r3, [r7, #14]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d007      	beq.n	8006190 <USBD_StdEPReq+0x180>
 8006180:	7bbb      	ldrb	r3, [r7, #14]
 8006182:	2b80      	cmp	r3, #128	; 0x80
 8006184:	d004      	beq.n	8006190 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006186:	6839      	ldr	r1, [r7, #0]
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 fbb8 	bl	80068fe <USBD_CtlError>
                break;
 800618e:	e091      	b.n	80062b4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006190:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006194:	2b00      	cmp	r3, #0
 8006196:	da0b      	bge.n	80061b0 <USBD_StdEPReq+0x1a0>
 8006198:	7bbb      	ldrb	r3, [r7, #14]
 800619a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800619e:	4613      	mov	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	3310      	adds	r3, #16
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	4413      	add	r3, r2
 80061ac:	3304      	adds	r3, #4
 80061ae:	e00b      	b.n	80061c8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80061b0:	7bbb      	ldrb	r3, [r7, #14]
 80061b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061b6:	4613      	mov	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	4413      	add	r3, r2
 80061c6:	3304      	adds	r3, #4
 80061c8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	2200      	movs	r2, #0
 80061ce:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	2202      	movs	r2, #2
 80061d4:	4619      	mov	r1, r3
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fbfb 	bl	80069d2 <USBD_CtlSendData>
              break;
 80061dc:	e06a      	b.n	80062b4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80061de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	da11      	bge.n	800620a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80061e6:	7bbb      	ldrb	r3, [r7, #14]
 80061e8:	f003 020f 	and.w	r2, r3, #15
 80061ec:	6879      	ldr	r1, [r7, #4]
 80061ee:	4613      	mov	r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4413      	add	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	440b      	add	r3, r1
 80061f8:	3318      	adds	r3, #24
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d117      	bne.n	8006230 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006200:	6839      	ldr	r1, [r7, #0]
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fb7b 	bl	80068fe <USBD_CtlError>
                  break;
 8006208:	e054      	b.n	80062b4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800620a:	7bbb      	ldrb	r3, [r7, #14]
 800620c:	f003 020f 	and.w	r2, r3, #15
 8006210:	6879      	ldr	r1, [r7, #4]
 8006212:	4613      	mov	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4413      	add	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	440b      	add	r3, r1
 800621c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d104      	bne.n	8006230 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006226:	6839      	ldr	r1, [r7, #0]
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fb68 	bl	80068fe <USBD_CtlError>
                  break;
 800622e:	e041      	b.n	80062b4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006230:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006234:	2b00      	cmp	r3, #0
 8006236:	da0b      	bge.n	8006250 <USBD_StdEPReq+0x240>
 8006238:	7bbb      	ldrb	r3, [r7, #14]
 800623a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800623e:	4613      	mov	r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	3310      	adds	r3, #16
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	4413      	add	r3, r2
 800624c:	3304      	adds	r3, #4
 800624e:	e00b      	b.n	8006268 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006250:	7bbb      	ldrb	r3, [r7, #14]
 8006252:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006256:	4613      	mov	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	4413      	add	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	4413      	add	r3, r2
 8006266:	3304      	adds	r3, #4
 8006268:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800626a:	7bbb      	ldrb	r3, [r7, #14]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d002      	beq.n	8006276 <USBD_StdEPReq+0x266>
 8006270:	7bbb      	ldrb	r3, [r7, #14]
 8006272:	2b80      	cmp	r3, #128	; 0x80
 8006274:	d103      	bne.n	800627e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	2200      	movs	r2, #0
 800627a:	601a      	str	r2, [r3, #0]
 800627c:	e00e      	b.n	800629c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800627e:	7bbb      	ldrb	r3, [r7, #14]
 8006280:	4619      	mov	r1, r3
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fee8 	bl	8007058 <USBD_LL_IsStallEP>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d003      	beq.n	8006296 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	2201      	movs	r2, #1
 8006292:	601a      	str	r2, [r3, #0]
 8006294:	e002      	b.n	800629c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	2200      	movs	r2, #0
 800629a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2202      	movs	r2, #2
 80062a0:	4619      	mov	r1, r3
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 fb95 	bl	80069d2 <USBD_CtlSendData>
              break;
 80062a8:	e004      	b.n	80062b4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80062aa:	6839      	ldr	r1, [r7, #0]
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fb26 	bl	80068fe <USBD_CtlError>
              break;
 80062b2:	bf00      	nop
          }
          break;
 80062b4:	e004      	b.n	80062c0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80062b6:	6839      	ldr	r1, [r7, #0]
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fb20 	bl	80068fe <USBD_CtlError>
          break;
 80062be:	bf00      	nop
      }
      break;
 80062c0:	e004      	b.n	80062cc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80062c2:	6839      	ldr	r1, [r7, #0]
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 fb1a 	bl	80068fe <USBD_CtlError>
      break;
 80062ca:	bf00      	nop
  }

  return ret;
 80062cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
	...

080062d8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80062e2:	2300      	movs	r3, #0
 80062e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	885b      	ldrh	r3, [r3, #2]
 80062f2:	0a1b      	lsrs	r3, r3, #8
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	3b01      	subs	r3, #1
 80062f8:	2b06      	cmp	r3, #6
 80062fa:	f200 8128 	bhi.w	800654e <USBD_GetDescriptor+0x276>
 80062fe:	a201      	add	r2, pc, #4	; (adr r2, 8006304 <USBD_GetDescriptor+0x2c>)
 8006300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006304:	08006321 	.word	0x08006321
 8006308:	08006339 	.word	0x08006339
 800630c:	08006379 	.word	0x08006379
 8006310:	0800654f 	.word	0x0800654f
 8006314:	0800654f 	.word	0x0800654f
 8006318:	080064ef 	.word	0x080064ef
 800631c:	0800651b 	.word	0x0800651b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	7c12      	ldrb	r2, [r2, #16]
 800632c:	f107 0108 	add.w	r1, r7, #8
 8006330:	4610      	mov	r0, r2
 8006332:	4798      	blx	r3
 8006334:	60f8      	str	r0, [r7, #12]
      break;
 8006336:	e112      	b.n	800655e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	7c1b      	ldrb	r3, [r3, #16]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10d      	bne.n	800635c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006348:	f107 0208 	add.w	r2, r7, #8
 800634c:	4610      	mov	r0, r2
 800634e:	4798      	blx	r3
 8006350:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3301      	adds	r3, #1
 8006356:	2202      	movs	r2, #2
 8006358:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800635a:	e100      	b.n	800655e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006364:	f107 0208 	add.w	r2, r7, #8
 8006368:	4610      	mov	r0, r2
 800636a:	4798      	blx	r3
 800636c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	3301      	adds	r3, #1
 8006372:	2202      	movs	r2, #2
 8006374:	701a      	strb	r2, [r3, #0]
      break;
 8006376:	e0f2      	b.n	800655e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	885b      	ldrh	r3, [r3, #2]
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b05      	cmp	r3, #5
 8006380:	f200 80ac 	bhi.w	80064dc <USBD_GetDescriptor+0x204>
 8006384:	a201      	add	r2, pc, #4	; (adr r2, 800638c <USBD_GetDescriptor+0xb4>)
 8006386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638a:	bf00      	nop
 800638c:	080063a5 	.word	0x080063a5
 8006390:	080063d9 	.word	0x080063d9
 8006394:	0800640d 	.word	0x0800640d
 8006398:	08006441 	.word	0x08006441
 800639c:	08006475 	.word	0x08006475
 80063a0:	080064a9 	.word	0x080064a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00b      	beq.n	80063c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	7c12      	ldrb	r2, [r2, #16]
 80063bc:	f107 0108 	add.w	r1, r7, #8
 80063c0:	4610      	mov	r0, r2
 80063c2:	4798      	blx	r3
 80063c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063c6:	e091      	b.n	80064ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063c8:	6839      	ldr	r1, [r7, #0]
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fa97 	bl	80068fe <USBD_CtlError>
            err++;
 80063d0:	7afb      	ldrb	r3, [r7, #11]
 80063d2:	3301      	adds	r3, #1
 80063d4:	72fb      	strb	r3, [r7, #11]
          break;
 80063d6:	e089      	b.n	80064ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00b      	beq.n	80063fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	7c12      	ldrb	r2, [r2, #16]
 80063f0:	f107 0108 	add.w	r1, r7, #8
 80063f4:	4610      	mov	r0, r2
 80063f6:	4798      	blx	r3
 80063f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063fa:	e077      	b.n	80064ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063fc:	6839      	ldr	r1, [r7, #0]
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fa7d 	bl	80068fe <USBD_CtlError>
            err++;
 8006404:	7afb      	ldrb	r3, [r7, #11]
 8006406:	3301      	adds	r3, #1
 8006408:	72fb      	strb	r3, [r7, #11]
          break;
 800640a:	e06f      	b.n	80064ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00b      	beq.n	8006430 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	7c12      	ldrb	r2, [r2, #16]
 8006424:	f107 0108 	add.w	r1, r7, #8
 8006428:	4610      	mov	r0, r2
 800642a:	4798      	blx	r3
 800642c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800642e:	e05d      	b.n	80064ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006430:	6839      	ldr	r1, [r7, #0]
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 fa63 	bl	80068fe <USBD_CtlError>
            err++;
 8006438:	7afb      	ldrb	r3, [r7, #11]
 800643a:	3301      	adds	r3, #1
 800643c:	72fb      	strb	r3, [r7, #11]
          break;
 800643e:	e055      	b.n	80064ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00b      	beq.n	8006464 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	7c12      	ldrb	r2, [r2, #16]
 8006458:	f107 0108 	add.w	r1, r7, #8
 800645c:	4610      	mov	r0, r2
 800645e:	4798      	blx	r3
 8006460:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006462:	e043      	b.n	80064ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006464:	6839      	ldr	r1, [r7, #0]
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fa49 	bl	80068fe <USBD_CtlError>
            err++;
 800646c:	7afb      	ldrb	r3, [r7, #11]
 800646e:	3301      	adds	r3, #1
 8006470:	72fb      	strb	r3, [r7, #11]
          break;
 8006472:	e03b      	b.n	80064ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800647a:	695b      	ldr	r3, [r3, #20]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00b      	beq.n	8006498 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	7c12      	ldrb	r2, [r2, #16]
 800648c:	f107 0108 	add.w	r1, r7, #8
 8006490:	4610      	mov	r0, r2
 8006492:	4798      	blx	r3
 8006494:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006496:	e029      	b.n	80064ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006498:	6839      	ldr	r1, [r7, #0]
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fa2f 	bl	80068fe <USBD_CtlError>
            err++;
 80064a0:	7afb      	ldrb	r3, [r7, #11]
 80064a2:	3301      	adds	r3, #1
 80064a4:	72fb      	strb	r3, [r7, #11]
          break;
 80064a6:	e021      	b.n	80064ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00b      	beq.n	80064cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	7c12      	ldrb	r2, [r2, #16]
 80064c0:	f107 0108 	add.w	r1, r7, #8
 80064c4:	4610      	mov	r0, r2
 80064c6:	4798      	blx	r3
 80064c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064ca:	e00f      	b.n	80064ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fa15 	bl	80068fe <USBD_CtlError>
            err++;
 80064d4:	7afb      	ldrb	r3, [r7, #11]
 80064d6:	3301      	adds	r3, #1
 80064d8:	72fb      	strb	r3, [r7, #11]
          break;
 80064da:	e007      	b.n	80064ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80064dc:	6839      	ldr	r1, [r7, #0]
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 fa0d 	bl	80068fe <USBD_CtlError>
          err++;
 80064e4:	7afb      	ldrb	r3, [r7, #11]
 80064e6:	3301      	adds	r3, #1
 80064e8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80064ea:	e038      	b.n	800655e <USBD_GetDescriptor+0x286>
 80064ec:	e037      	b.n	800655e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	7c1b      	ldrb	r3, [r3, #16]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d109      	bne.n	800650a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fe:	f107 0208 	add.w	r2, r7, #8
 8006502:	4610      	mov	r0, r2
 8006504:	4798      	blx	r3
 8006506:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006508:	e029      	b.n	800655e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800650a:	6839      	ldr	r1, [r7, #0]
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 f9f6 	bl	80068fe <USBD_CtlError>
        err++;
 8006512:	7afb      	ldrb	r3, [r7, #11]
 8006514:	3301      	adds	r3, #1
 8006516:	72fb      	strb	r3, [r7, #11]
      break;
 8006518:	e021      	b.n	800655e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	7c1b      	ldrb	r3, [r3, #16]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10d      	bne.n	800653e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652a:	f107 0208 	add.w	r2, r7, #8
 800652e:	4610      	mov	r0, r2
 8006530:	4798      	blx	r3
 8006532:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	3301      	adds	r3, #1
 8006538:	2207      	movs	r2, #7
 800653a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800653c:	e00f      	b.n	800655e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800653e:	6839      	ldr	r1, [r7, #0]
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 f9dc 	bl	80068fe <USBD_CtlError>
        err++;
 8006546:	7afb      	ldrb	r3, [r7, #11]
 8006548:	3301      	adds	r3, #1
 800654a:	72fb      	strb	r3, [r7, #11]
      break;
 800654c:	e007      	b.n	800655e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800654e:	6839      	ldr	r1, [r7, #0]
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f9d4 	bl	80068fe <USBD_CtlError>
      err++;
 8006556:	7afb      	ldrb	r3, [r7, #11]
 8006558:	3301      	adds	r3, #1
 800655a:	72fb      	strb	r3, [r7, #11]
      break;
 800655c:	bf00      	nop
  }

  if (err != 0U)
 800655e:	7afb      	ldrb	r3, [r7, #11]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d11c      	bne.n	800659e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006564:	893b      	ldrh	r3, [r7, #8]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d011      	beq.n	800658e <USBD_GetDescriptor+0x2b6>
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	88db      	ldrh	r3, [r3, #6]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00d      	beq.n	800658e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	88da      	ldrh	r2, [r3, #6]
 8006576:	893b      	ldrh	r3, [r7, #8]
 8006578:	4293      	cmp	r3, r2
 800657a:	bf28      	it	cs
 800657c:	4613      	movcs	r3, r2
 800657e:	b29b      	uxth	r3, r3
 8006580:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006582:	893b      	ldrh	r3, [r7, #8]
 8006584:	461a      	mov	r2, r3
 8006586:	68f9      	ldr	r1, [r7, #12]
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fa22 	bl	80069d2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	88db      	ldrh	r3, [r3, #6]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d104      	bne.n	80065a0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 fa5b 	bl	8006a52 <USBD_CtlSendStatus>
 800659c:	e000      	b.n	80065a0 <USBD_GetDescriptor+0x2c8>
    return;
 800659e:	bf00      	nop
    }
  }
}
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop

080065a8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	889b      	ldrh	r3, [r3, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d130      	bne.n	800661c <USBD_SetAddress+0x74>
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	88db      	ldrh	r3, [r3, #6]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d12c      	bne.n	800661c <USBD_SetAddress+0x74>
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	885b      	ldrh	r3, [r3, #2]
 80065c6:	2b7f      	cmp	r3, #127	; 0x7f
 80065c8:	d828      	bhi.n	800661c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	885b      	ldrh	r3, [r3, #2]
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065dc:	2b03      	cmp	r3, #3
 80065de:	d104      	bne.n	80065ea <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80065e0:	6839      	ldr	r1, [r7, #0]
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f98b 	bl	80068fe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065e8:	e01d      	b.n	8006626 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	7bfa      	ldrb	r2, [r7, #15]
 80065ee:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80065f2:	7bfb      	ldrb	r3, [r7, #15]
 80065f4:	4619      	mov	r1, r3
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fd5a 	bl	80070b0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 fa28 	bl	8006a52 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006602:	7bfb      	ldrb	r3, [r7, #15]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d004      	beq.n	8006612 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2202      	movs	r2, #2
 800660c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006610:	e009      	b.n	8006626 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800661a:	e004      	b.n	8006626 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800661c:	6839      	ldr	r1, [r7, #0]
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f96d 	bl	80068fe <USBD_CtlError>
  }
}
 8006624:	bf00      	nop
 8006626:	bf00      	nop
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
	...

08006630 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	885b      	ldrh	r3, [r3, #2]
 800663e:	b2da      	uxtb	r2, r3
 8006640:	4b41      	ldr	r3, [pc, #260]	; (8006748 <USBD_SetConfig+0x118>)
 8006642:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006644:	4b40      	ldr	r3, [pc, #256]	; (8006748 <USBD_SetConfig+0x118>)
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d904      	bls.n	8006656 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800664c:	6839      	ldr	r1, [r7, #0]
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f955 	bl	80068fe <USBD_CtlError>
 8006654:	e075      	b.n	8006742 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800665c:	2b02      	cmp	r3, #2
 800665e:	d002      	beq.n	8006666 <USBD_SetConfig+0x36>
 8006660:	2b03      	cmp	r3, #3
 8006662:	d023      	beq.n	80066ac <USBD_SetConfig+0x7c>
 8006664:	e062      	b.n	800672c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006666:	4b38      	ldr	r3, [pc, #224]	; (8006748 <USBD_SetConfig+0x118>)
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d01a      	beq.n	80066a4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800666e:	4b36      	ldr	r3, [pc, #216]	; (8006748 <USBD_SetConfig+0x118>)
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	461a      	mov	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2203      	movs	r2, #3
 800667c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006680:	4b31      	ldr	r3, [pc, #196]	; (8006748 <USBD_SetConfig+0x118>)
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	4619      	mov	r1, r3
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7ff f9e8 	bl	8005a5c <USBD_SetClassConfig>
 800668c:	4603      	mov	r3, r0
 800668e:	2b02      	cmp	r3, #2
 8006690:	d104      	bne.n	800669c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006692:	6839      	ldr	r1, [r7, #0]
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 f932 	bl	80068fe <USBD_CtlError>
            return;
 800669a:	e052      	b.n	8006742 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f9d8 	bl	8006a52 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80066a2:	e04e      	b.n	8006742 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 f9d4 	bl	8006a52 <USBD_CtlSendStatus>
        break;
 80066aa:	e04a      	b.n	8006742 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80066ac:	4b26      	ldr	r3, [pc, #152]	; (8006748 <USBD_SetConfig+0x118>)
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d112      	bne.n	80066da <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2202      	movs	r2, #2
 80066b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80066bc:	4b22      	ldr	r3, [pc, #136]	; (8006748 <USBD_SetConfig+0x118>)
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	461a      	mov	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80066c6:	4b20      	ldr	r3, [pc, #128]	; (8006748 <USBD_SetConfig+0x118>)
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	4619      	mov	r1, r3
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f7ff f9e4 	bl	8005a9a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f9bd 	bl	8006a52 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80066d8:	e033      	b.n	8006742 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80066da:	4b1b      	ldr	r3, [pc, #108]	; (8006748 <USBD_SetConfig+0x118>)
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	461a      	mov	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d01d      	beq.n	8006724 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	4619      	mov	r1, r3
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f7ff f9d2 	bl	8005a9a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80066f6:	4b14      	ldr	r3, [pc, #80]	; (8006748 <USBD_SetConfig+0x118>)
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	461a      	mov	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006700:	4b11      	ldr	r3, [pc, #68]	; (8006748 <USBD_SetConfig+0x118>)
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	4619      	mov	r1, r3
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7ff f9a8 	bl	8005a5c <USBD_SetClassConfig>
 800670c:	4603      	mov	r3, r0
 800670e:	2b02      	cmp	r3, #2
 8006710:	d104      	bne.n	800671c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006712:	6839      	ldr	r1, [r7, #0]
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 f8f2 	bl	80068fe <USBD_CtlError>
            return;
 800671a:	e012      	b.n	8006742 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 f998 	bl	8006a52 <USBD_CtlSendStatus>
        break;
 8006722:	e00e      	b.n	8006742 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f994 	bl	8006a52 <USBD_CtlSendStatus>
        break;
 800672a:	e00a      	b.n	8006742 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800672c:	6839      	ldr	r1, [r7, #0]
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 f8e5 	bl	80068fe <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006734:	4b04      	ldr	r3, [pc, #16]	; (8006748 <USBD_SetConfig+0x118>)
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	4619      	mov	r1, r3
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7ff f9ad 	bl	8005a9a <USBD_ClrClassConfig>
        break;
 8006740:	bf00      	nop
    }
  }
}
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	20000270 	.word	0x20000270

0800674c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	88db      	ldrh	r3, [r3, #6]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d004      	beq.n	8006768 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800675e:	6839      	ldr	r1, [r7, #0]
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f8cc 	bl	80068fe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006766:	e022      	b.n	80067ae <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800676e:	2b02      	cmp	r3, #2
 8006770:	dc02      	bgt.n	8006778 <USBD_GetConfig+0x2c>
 8006772:	2b00      	cmp	r3, #0
 8006774:	dc03      	bgt.n	800677e <USBD_GetConfig+0x32>
 8006776:	e015      	b.n	80067a4 <USBD_GetConfig+0x58>
 8006778:	2b03      	cmp	r3, #3
 800677a:	d00b      	beq.n	8006794 <USBD_GetConfig+0x48>
 800677c:	e012      	b.n	80067a4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	3308      	adds	r3, #8
 8006788:	2201      	movs	r2, #1
 800678a:	4619      	mov	r1, r3
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f920 	bl	80069d2 <USBD_CtlSendData>
        break;
 8006792:	e00c      	b.n	80067ae <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	3304      	adds	r3, #4
 8006798:	2201      	movs	r2, #1
 800679a:	4619      	mov	r1, r3
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f918 	bl	80069d2 <USBD_CtlSendData>
        break;
 80067a2:	e004      	b.n	80067ae <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80067a4:	6839      	ldr	r1, [r7, #0]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f8a9 	bl	80068fe <USBD_CtlError>
        break;
 80067ac:	bf00      	nop
}
 80067ae:	bf00      	nop
 80067b0:	3708      	adds	r7, #8
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b082      	sub	sp, #8
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
 80067be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067c6:	3b01      	subs	r3, #1
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d81e      	bhi.n	800680a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	88db      	ldrh	r3, [r3, #6]
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d004      	beq.n	80067de <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80067d4:	6839      	ldr	r1, [r7, #0]
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f891 	bl	80068fe <USBD_CtlError>
        break;
 80067dc:	e01a      	b.n	8006814 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d005      	beq.n	80067fa <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	f043 0202 	orr.w	r2, r3, #2
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	330c      	adds	r3, #12
 80067fe:	2202      	movs	r2, #2
 8006800:	4619      	mov	r1, r3
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f8e5 	bl	80069d2 <USBD_CtlSendData>
      break;
 8006808:	e004      	b.n	8006814 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800680a:	6839      	ldr	r1, [r7, #0]
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f876 	bl	80068fe <USBD_CtlError>
      break;
 8006812:	bf00      	nop
  }
}
 8006814:	bf00      	nop
 8006816:	3708      	adds	r7, #8
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	885b      	ldrh	r3, [r3, #2]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d106      	bne.n	800683c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 f90b 	bl	8006a52 <USBD_CtlSendStatus>
  }
}
 800683c:	bf00      	nop
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006854:	3b01      	subs	r3, #1
 8006856:	2b02      	cmp	r3, #2
 8006858:	d80b      	bhi.n	8006872 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	885b      	ldrh	r3, [r3, #2]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d10c      	bne.n	800687c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f8f1 	bl	8006a52 <USBD_CtlSendStatus>
      }
      break;
 8006870:	e004      	b.n	800687c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006872:	6839      	ldr	r1, [r7, #0]
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 f842 	bl	80068fe <USBD_CtlError>
      break;
 800687a:	e000      	b.n	800687e <USBD_ClrFeature+0x3a>
      break;
 800687c:	bf00      	nop
  }
}
 800687e:	bf00      	nop
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006886:	b480      	push	{r7}
 8006888:	b083      	sub	sp, #12
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
 800688e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	781a      	ldrb	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	785a      	ldrb	r2, [r3, #1]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	3302      	adds	r3, #2
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	3303      	adds	r3, #3
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	021b      	lsls	r3, r3, #8
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	4413      	add	r3, r2
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	3304      	adds	r3, #4
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	3305      	adds	r3, #5
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	021b      	lsls	r3, r3, #8
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	4413      	add	r3, r2
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	3306      	adds	r3, #6
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	b29a      	uxth	r2, r3
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	3307      	adds	r3, #7
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	021b      	lsls	r3, r3, #8
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	4413      	add	r3, r2
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	80da      	strh	r2, [r3, #6]

}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bc80      	pop	{r7}
 80068fc:	4770      	bx	lr

080068fe <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b082      	sub	sp, #8
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006908:	2180      	movs	r1, #128	; 0x80
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fb66 	bl	8006fdc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006910:	2100      	movs	r1, #0
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fb62 	bl	8006fdc <USBD_LL_StallEP>
}
 8006918:	bf00      	nop
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d032      	beq.n	800699c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f000 f834 	bl	80069a4 <USBD_GetLen>
 800693c:	4603      	mov	r3, r0
 800693e:	3301      	adds	r3, #1
 8006940:	b29b      	uxth	r3, r3
 8006942:	005b      	lsls	r3, r3, #1
 8006944:	b29a      	uxth	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800694a:	7dfb      	ldrb	r3, [r7, #23]
 800694c:	1c5a      	adds	r2, r3, #1
 800694e:	75fa      	strb	r2, [r7, #23]
 8006950:	461a      	mov	r2, r3
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	4413      	add	r3, r2
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	7812      	ldrb	r2, [r2, #0]
 800695a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800695c:	7dfb      	ldrb	r3, [r7, #23]
 800695e:	1c5a      	adds	r2, r3, #1
 8006960:	75fa      	strb	r2, [r7, #23]
 8006962:	461a      	mov	r2, r3
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	4413      	add	r3, r2
 8006968:	2203      	movs	r2, #3
 800696a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800696c:	e012      	b.n	8006994 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	1c5a      	adds	r2, r3, #1
 8006972:	60fa      	str	r2, [r7, #12]
 8006974:	7dfa      	ldrb	r2, [r7, #23]
 8006976:	1c51      	adds	r1, r2, #1
 8006978:	75f9      	strb	r1, [r7, #23]
 800697a:	4611      	mov	r1, r2
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	440a      	add	r2, r1
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006984:	7dfb      	ldrb	r3, [r7, #23]
 8006986:	1c5a      	adds	r2, r3, #1
 8006988:	75fa      	strb	r2, [r7, #23]
 800698a:	461a      	mov	r2, r3
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	4413      	add	r3, r2
 8006990:	2200      	movs	r2, #0
 8006992:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1e8      	bne.n	800696e <USBD_GetString+0x4e>
    }
  }
}
 800699c:	bf00      	nop
 800699e:	3718      	adds	r7, #24
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80069ac:	2300      	movs	r3, #0
 80069ae:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80069b0:	e005      	b.n	80069be <USBD_GetLen+0x1a>
  {
    len++;
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
 80069b4:	3301      	adds	r3, #1
 80069b6:	73fb      	strb	r3, [r7, #15]
    buf++;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	3301      	adds	r3, #1
 80069bc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1f5      	bne.n	80069b2 <USBD_GetLen+0xe>
  }

  return len;
 80069c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3714      	adds	r7, #20
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bc80      	pop	{r7}
 80069d0:	4770      	bx	lr

080069d2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	60f8      	str	r0, [r7, #12]
 80069da:	60b9      	str	r1, [r7, #8]
 80069dc:	4613      	mov	r3, r2
 80069de:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2202      	movs	r2, #2
 80069e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80069e8:	88fa      	ldrh	r2, [r7, #6]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80069ee:	88fa      	ldrh	r2, [r7, #6]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80069f4:	88fb      	ldrh	r3, [r7, #6]
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	2100      	movs	r1, #0
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f000 fb77 	bl	80070ee <USBD_LL_Transmit>

  return USBD_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b084      	sub	sp, #16
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	60f8      	str	r0, [r7, #12]
 8006a12:	60b9      	str	r1, [r7, #8]
 8006a14:	4613      	mov	r3, r2
 8006a16:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a18:	88fb      	ldrh	r3, [r7, #6]
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f000 fb65 	bl	80070ee <USBD_LL_Transmit>

  return USBD_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b084      	sub	sp, #16
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	60f8      	str	r0, [r7, #12]
 8006a36:	60b9      	str	r1, [r7, #8]
 8006a38:	4613      	mov	r3, r2
 8006a3a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a3c:	88fb      	ldrh	r3, [r7, #6]
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	2100      	movs	r1, #0
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 fb76 	bl	8007134 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b082      	sub	sp, #8
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2204      	movs	r2, #4
 8006a5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006a62:	2300      	movs	r3, #0
 8006a64:	2200      	movs	r2, #0
 8006a66:	2100      	movs	r1, #0
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fb40 	bl	80070ee <USBD_LL_Transmit>

  return USBD_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3708      	adds	r7, #8
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2205      	movs	r2, #5
 8006a84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a88:	2300      	movs	r3, #0
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fb50 	bl	8007134 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3708      	adds	r7, #8
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
	...

08006aa0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	490e      	ldr	r1, [pc, #56]	; (8006ae0 <MX_USB_DEVICE_Init+0x40>)
 8006aa8:	480e      	ldr	r0, [pc, #56]	; (8006ae4 <MX_USB_DEVICE_Init+0x44>)
 8006aaa:	f7fe ff7d 	bl	80059a8 <USBD_Init>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d001      	beq.n	8006ab8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006ab4:	f7f9 fca0 	bl	80003f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006ab8:	490b      	ldr	r1, [pc, #44]	; (8006ae8 <MX_USB_DEVICE_Init+0x48>)
 8006aba:	480a      	ldr	r0, [pc, #40]	; (8006ae4 <MX_USB_DEVICE_Init+0x44>)
 8006abc:	f7fe ff9f 	bl	80059fe <USBD_RegisterClass>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d001      	beq.n	8006aca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006ac6:	f7f9 fc97 	bl	80003f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006aca:	4806      	ldr	r0, [pc, #24]	; (8006ae4 <MX_USB_DEVICE_Init+0x44>)
 8006acc:	f7fe ffb0 	bl	8005a30 <USBD_Start>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006ad6:	f7f9 fc8f 	bl	80003f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006ada:	bf00      	nop
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	200001b4 	.word	0x200001b4
 8006ae4:	20000274 	.word	0x20000274
 8006ae8:	200000ac 	.word	0x200000ac

08006aec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	4603      	mov	r3, r0
 8006af4:	6039      	str	r1, [r7, #0]
 8006af6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	2212      	movs	r2, #18
 8006afc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006afe:	4b03      	ldr	r3, [pc, #12]	; (8006b0c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bc80      	pop	{r7}
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	200001d0 	.word	0x200001d0

08006b10 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	4603      	mov	r3, r0
 8006b18:	6039      	str	r1, [r7, #0]
 8006b1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	2204      	movs	r2, #4
 8006b20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006b22:	4b03      	ldr	r3, [pc, #12]	; (8006b30 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bc80      	pop	{r7}
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	200001e4 	.word	0x200001e4

08006b34 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	6039      	str	r1, [r7, #0]
 8006b3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006b40:	79fb      	ldrb	r3, [r7, #7]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d105      	bne.n	8006b52 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	4907      	ldr	r1, [pc, #28]	; (8006b68 <USBD_FS_ProductStrDescriptor+0x34>)
 8006b4a:	4808      	ldr	r0, [pc, #32]	; (8006b6c <USBD_FS_ProductStrDescriptor+0x38>)
 8006b4c:	f7ff fee8 	bl	8006920 <USBD_GetString>
 8006b50:	e004      	b.n	8006b5c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006b52:	683a      	ldr	r2, [r7, #0]
 8006b54:	4904      	ldr	r1, [pc, #16]	; (8006b68 <USBD_FS_ProductStrDescriptor+0x34>)
 8006b56:	4805      	ldr	r0, [pc, #20]	; (8006b6c <USBD_FS_ProductStrDescriptor+0x38>)
 8006b58:	f7ff fee2 	bl	8006920 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b5c:	4b02      	ldr	r3, [pc, #8]	; (8006b68 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	20000538 	.word	0x20000538
 8006b6c:	08007284 	.word	0x08007284

08006b70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	4603      	mov	r3, r0
 8006b78:	6039      	str	r1, [r7, #0]
 8006b7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006b7c:	683a      	ldr	r2, [r7, #0]
 8006b7e:	4904      	ldr	r1, [pc, #16]	; (8006b90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006b80:	4804      	ldr	r0, [pc, #16]	; (8006b94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006b82:	f7ff fecd 	bl	8006920 <USBD_GetString>
  return USBD_StrDesc;
 8006b86:	4b02      	ldr	r3, [pc, #8]	; (8006b90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3708      	adds	r7, #8
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	20000538 	.word	0x20000538
 8006b94:	0800729c 	.word	0x0800729c

08006b98 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	6039      	str	r1, [r7, #0]
 8006ba2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	221a      	movs	r2, #26
 8006ba8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006baa:	f000 f843 	bl	8006c34 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006bae:	4b02      	ldr	r3, [pc, #8]	; (8006bb8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	200001e8 	.word	0x200001e8

08006bbc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	6039      	str	r1, [r7, #0]
 8006bc6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006bc8:	79fb      	ldrb	r3, [r7, #7]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d105      	bne.n	8006bda <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006bce:	683a      	ldr	r2, [r7, #0]
 8006bd0:	4907      	ldr	r1, [pc, #28]	; (8006bf0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006bd2:	4808      	ldr	r0, [pc, #32]	; (8006bf4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006bd4:	f7ff fea4 	bl	8006920 <USBD_GetString>
 8006bd8:	e004      	b.n	8006be4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	4904      	ldr	r1, [pc, #16]	; (8006bf0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006bde:	4805      	ldr	r0, [pc, #20]	; (8006bf4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006be0:	f7ff fe9e 	bl	8006920 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006be4:	4b02      	ldr	r3, [pc, #8]	; (8006bf0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	20000538 	.word	0x20000538
 8006bf4:	080072b0 	.word	0x080072b0

08006bf8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	4603      	mov	r3, r0
 8006c00:	6039      	str	r1, [r7, #0]
 8006c02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006c04:	79fb      	ldrb	r3, [r7, #7]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d105      	bne.n	8006c16 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	4907      	ldr	r1, [pc, #28]	; (8006c2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c0e:	4808      	ldr	r0, [pc, #32]	; (8006c30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c10:	f7ff fe86 	bl	8006920 <USBD_GetString>
 8006c14:	e004      	b.n	8006c20 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c16:	683a      	ldr	r2, [r7, #0]
 8006c18:	4904      	ldr	r1, [pc, #16]	; (8006c2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c1a:	4805      	ldr	r0, [pc, #20]	; (8006c30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c1c:	f7ff fe80 	bl	8006920 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c20:	4b02      	ldr	r3, [pc, #8]	; (8006c2c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	20000538 	.word	0x20000538
 8006c30:	080072bc 	.word	0x080072bc

08006c34 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006c3a:	4b0f      	ldr	r3, [pc, #60]	; (8006c78 <Get_SerialNum+0x44>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006c40:	4b0e      	ldr	r3, [pc, #56]	; (8006c7c <Get_SerialNum+0x48>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006c46:	4b0e      	ldr	r3, [pc, #56]	; (8006c80 <Get_SerialNum+0x4c>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4413      	add	r3, r2
 8006c52:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d009      	beq.n	8006c6e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006c5a:	2208      	movs	r2, #8
 8006c5c:	4909      	ldr	r1, [pc, #36]	; (8006c84 <Get_SerialNum+0x50>)
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f000 f814 	bl	8006c8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006c64:	2204      	movs	r2, #4
 8006c66:	4908      	ldr	r1, [pc, #32]	; (8006c88 <Get_SerialNum+0x54>)
 8006c68:	68b8      	ldr	r0, [r7, #8]
 8006c6a:	f000 f80f 	bl	8006c8c <IntToUnicode>
  }
}
 8006c6e:	bf00      	nop
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	1ffff7e8 	.word	0x1ffff7e8
 8006c7c:	1ffff7ec 	.word	0x1ffff7ec
 8006c80:	1ffff7f0 	.word	0x1ffff7f0
 8006c84:	200001ea 	.word	0x200001ea
 8006c88:	200001fa 	.word	0x200001fa

08006c8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b087      	sub	sp, #28
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	4613      	mov	r3, r2
 8006c98:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	75fb      	strb	r3, [r7, #23]
 8006ca2:	e027      	b.n	8006cf4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	0f1b      	lsrs	r3, r3, #28
 8006ca8:	2b09      	cmp	r3, #9
 8006caa:	d80b      	bhi.n	8006cc4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	0f1b      	lsrs	r3, r3, #28
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	7dfb      	ldrb	r3, [r7, #23]
 8006cb4:	005b      	lsls	r3, r3, #1
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	440b      	add	r3, r1
 8006cbc:	3230      	adds	r2, #48	; 0x30
 8006cbe:	b2d2      	uxtb	r2, r2
 8006cc0:	701a      	strb	r2, [r3, #0]
 8006cc2:	e00a      	b.n	8006cda <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	0f1b      	lsrs	r3, r3, #28
 8006cc8:	b2da      	uxtb	r2, r3
 8006cca:	7dfb      	ldrb	r3, [r7, #23]
 8006ccc:	005b      	lsls	r3, r3, #1
 8006cce:	4619      	mov	r1, r3
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	440b      	add	r3, r1
 8006cd4:	3237      	adds	r2, #55	; 0x37
 8006cd6:	b2d2      	uxtb	r2, r2
 8006cd8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	011b      	lsls	r3, r3, #4
 8006cde:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006ce0:	7dfb      	ldrb	r3, [r7, #23]
 8006ce2:	005b      	lsls	r3, r3, #1
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	4413      	add	r3, r2
 8006cea:	2200      	movs	r2, #0
 8006cec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006cee:	7dfb      	ldrb	r3, [r7, #23]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	75fb      	strb	r3, [r7, #23]
 8006cf4:	7dfa      	ldrb	r2, [r7, #23]
 8006cf6:	79fb      	ldrb	r3, [r7, #7]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d3d3      	bcc.n	8006ca4 <IntToUnicode+0x18>
  }
}
 8006cfc:	bf00      	nop
 8006cfe:	bf00      	nop
 8006d00:	371c      	adds	r7, #28
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bc80      	pop	{r7}
 8006d06:	4770      	bx	lr

08006d08 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a0d      	ldr	r2, [pc, #52]	; (8006d4c <HAL_PCD_MspInit+0x44>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d113      	bne.n	8006d42 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006d1a:	4b0d      	ldr	r3, [pc, #52]	; (8006d50 <HAL_PCD_MspInit+0x48>)
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	4a0c      	ldr	r2, [pc, #48]	; (8006d50 <HAL_PCD_MspInit+0x48>)
 8006d20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006d24:	61d3      	str	r3, [r2, #28]
 8006d26:	4b0a      	ldr	r3, [pc, #40]	; (8006d50 <HAL_PCD_MspInit+0x48>)
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d2e:	60fb      	str	r3, [r7, #12]
 8006d30:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006d32:	2200      	movs	r2, #0
 8006d34:	2100      	movs	r1, #0
 8006d36:	2014      	movs	r0, #20
 8006d38:	f7f9 fd2d 	bl	8000796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006d3c:	2014      	movs	r0, #20
 8006d3e:	f7f9 fd46 	bl	80007ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006d42:	bf00      	nop
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	40005c00 	.word	0x40005c00
 8006d50:	40021000 	.word	0x40021000

08006d54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8006d68:	4619      	mov	r1, r3
 8006d6a:	4610      	mov	r0, r2
 8006d6c:	f7fe fea8 	bl	8005ac0 <USBD_LL_SetupStage>
}
 8006d70:	bf00      	nop
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	460b      	mov	r3, r1
 8006d82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8006d8a:	78fa      	ldrb	r2, [r7, #3]
 8006d8c:	6879      	ldr	r1, [r7, #4]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	00db      	lsls	r3, r3, #3
 8006d96:	440b      	add	r3, r1
 8006d98:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	78fb      	ldrb	r3, [r7, #3]
 8006da0:	4619      	mov	r1, r3
 8006da2:	f7fe feda 	bl	8005b5a <USBD_LL_DataOutStage>
}
 8006da6:	bf00      	nop
 8006da8:	3708      	adds	r7, #8
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b082      	sub	sp, #8
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
 8006db6:	460b      	mov	r3, r1
 8006db8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8006dc0:	78fa      	ldrb	r2, [r7, #3]
 8006dc2:	6879      	ldr	r1, [r7, #4]
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	00db      	lsls	r3, r3, #3
 8006dcc:	440b      	add	r3, r1
 8006dce:	333c      	adds	r3, #60	; 0x3c
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	78fb      	ldrb	r3, [r7, #3]
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	f7fe ff31 	bl	8005c3c <USBD_LL_DataInStage>
}
 8006dda:	bf00      	nop
 8006ddc:	3708      	adds	r7, #8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b082      	sub	sp, #8
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7ff f841 	bl	8005e78 <USBD_LL_SOF>
}
 8006df6:	bf00      	nop
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b084      	sub	sp, #16
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006e06:	2301      	movs	r3, #1
 8006e08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d001      	beq.n	8006e16 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006e12:	f7f9 faf1 	bl	80003f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8006e1c:	7bfa      	ldrb	r2, [r7, #15]
 8006e1e:	4611      	mov	r1, r2
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7fe fff1 	bl	8005e08 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7fe ffaa 	bl	8005d86 <USBD_LL_Reset>
}
 8006e32:	bf00      	nop
 8006e34:	3710      	adds	r7, #16
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
	...

08006e3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fe ffeb 	bl	8005e26 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d005      	beq.n	8006e64 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006e58:	4b04      	ldr	r3, [pc, #16]	; (8006e6c <HAL_PCD_SuspendCallback+0x30>)
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	4a03      	ldr	r2, [pc, #12]	; (8006e6c <HAL_PCD_SuspendCallback+0x30>)
 8006e5e:	f043 0306 	orr.w	r3, r3, #6
 8006e62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006e64:	bf00      	nop
 8006e66:	3708      	adds	r7, #8
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	e000ed00 	.word	0xe000ed00

08006e70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7fe ffe5 	bl	8005e4e <USBD_LL_Resume>
}
 8006e84:	bf00      	nop
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006e94:	4a1f      	ldr	r2, [pc, #124]	; (8006f14 <USBD_LL_Init+0x88>)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a1d      	ldr	r2, [pc, #116]	; (8006f14 <USBD_LL_Init+0x88>)
 8006ea0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006ea4:	4b1b      	ldr	r3, [pc, #108]	; (8006f14 <USBD_LL_Init+0x88>)
 8006ea6:	4a1c      	ldr	r2, [pc, #112]	; (8006f18 <USBD_LL_Init+0x8c>)
 8006ea8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006eaa:	4b1a      	ldr	r3, [pc, #104]	; (8006f14 <USBD_LL_Init+0x88>)
 8006eac:	2208      	movs	r2, #8
 8006eae:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006eb0:	4b18      	ldr	r3, [pc, #96]	; (8006f14 <USBD_LL_Init+0x88>)
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006eb6:	4b17      	ldr	r3, [pc, #92]	; (8006f14 <USBD_LL_Init+0x88>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006ebc:	4b15      	ldr	r3, [pc, #84]	; (8006f14 <USBD_LL_Init+0x88>)
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006ec2:	4b14      	ldr	r3, [pc, #80]	; (8006f14 <USBD_LL_Init+0x88>)
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006ec8:	4812      	ldr	r0, [pc, #72]	; (8006f14 <USBD_LL_Init+0x88>)
 8006eca:	f7f9 fe4e 	bl	8000b6a <HAL_PCD_Init>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d001      	beq.n	8006ed8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006ed4:	f7f9 fa90 	bl	80003f8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006ede:	2318      	movs	r3, #24
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	f7fb fb56 	bl	8002594 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006eee:	2358      	movs	r3, #88	; 0x58
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	2180      	movs	r1, #128	; 0x80
 8006ef4:	f7fb fb4e 	bl	8002594 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f02:	2200      	movs	r2, #0
 8006f04:	2181      	movs	r1, #129	; 0x81
 8006f06:	f7fb fb45 	bl	8002594 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3708      	adds	r7, #8
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	20000738 	.word	0x20000738
 8006f18:	40005c00 	.word	0x40005c00

08006f1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f24:	2300      	movs	r3, #0
 8006f26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7f9 ff18 	bl	8000d68 <HAL_PCD_Start>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f000 f93c 	bl	80071bc <USBD_Get_USB_Status>
 8006f44:	4603      	mov	r3, r0
 8006f46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f48:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b084      	sub	sp, #16
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
 8006f5a:	4608      	mov	r0, r1
 8006f5c:	4611      	mov	r1, r2
 8006f5e:	461a      	mov	r2, r3
 8006f60:	4603      	mov	r3, r0
 8006f62:	70fb      	strb	r3, [r7, #3]
 8006f64:	460b      	mov	r3, r1
 8006f66:	70bb      	strb	r3, [r7, #2]
 8006f68:	4613      	mov	r3, r2
 8006f6a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f70:	2300      	movs	r3, #0
 8006f72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f7a:	78bb      	ldrb	r3, [r7, #2]
 8006f7c:	883a      	ldrh	r2, [r7, #0]
 8006f7e:	78f9      	ldrb	r1, [r7, #3]
 8006f80:	f7fa f86d 	bl	800105e <HAL_PCD_EP_Open>
 8006f84:	4603      	mov	r3, r0
 8006f86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f88:	7bfb      	ldrb	r3, [r7, #15]
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f000 f916 	bl	80071bc <USBD_Get_USB_Status>
 8006f90:	4603      	mov	r3, r0
 8006f92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f94:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b084      	sub	sp, #16
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006faa:	2300      	movs	r3, #0
 8006fac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fb8:	78fa      	ldrb	r2, [r7, #3]
 8006fba:	4611      	mov	r1, r2
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7fa f8ab 	bl	8001118 <HAL_PCD_EP_Close>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fc6:	7bfb      	ldrb	r3, [r7, #15]
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f000 f8f7 	bl	80071bc <USBD_Get_USB_Status>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fec:	2300      	movs	r3, #0
 8006fee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ff6:	78fa      	ldrb	r2, [r7, #3]
 8006ff8:	4611      	mov	r1, r2
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7fa f93c 	bl	8001278 <HAL_PCD_EP_SetStall>
 8007000:	4603      	mov	r3, r0
 8007002:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007004:	7bfb      	ldrb	r3, [r7, #15]
 8007006:	4618      	mov	r0, r3
 8007008:	f000 f8d8 	bl	80071bc <USBD_Get_USB_Status>
 800700c:	4603      	mov	r3, r0
 800700e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007010:	7bbb      	ldrb	r3, [r7, #14]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b084      	sub	sp, #16
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
 8007022:	460b      	mov	r3, r1
 8007024:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007026:	2300      	movs	r3, #0
 8007028:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800702a:	2300      	movs	r3, #0
 800702c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007034:	78fa      	ldrb	r2, [r7, #3]
 8007036:	4611      	mov	r1, r2
 8007038:	4618      	mov	r0, r3
 800703a:	f7fa f97d 	bl	8001338 <HAL_PCD_EP_ClrStall>
 800703e:	4603      	mov	r3, r0
 8007040:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007042:	7bfb      	ldrb	r3, [r7, #15]
 8007044:	4618      	mov	r0, r3
 8007046:	f000 f8b9 	bl	80071bc <USBD_Get_USB_Status>
 800704a:	4603      	mov	r3, r0
 800704c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800704e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	460b      	mov	r3, r1
 8007062:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800706a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800706c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007070:	2b00      	cmp	r3, #0
 8007072:	da0c      	bge.n	800708e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007074:	78fb      	ldrb	r3, [r7, #3]
 8007076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800707a:	68f9      	ldr	r1, [r7, #12]
 800707c:	1c5a      	adds	r2, r3, #1
 800707e:	4613      	mov	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	00db      	lsls	r3, r3, #3
 8007086:	440b      	add	r3, r1
 8007088:	3302      	adds	r3, #2
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	e00b      	b.n	80070a6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800708e:	78fb      	ldrb	r3, [r7, #3]
 8007090:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007094:	68f9      	ldr	r1, [r7, #12]
 8007096:	4613      	mov	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	00db      	lsls	r3, r3, #3
 800709e:	440b      	add	r3, r1
 80070a0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80070a4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3714      	adds	r7, #20
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bc80      	pop	{r7}
 80070ae:	4770      	bx	lr

080070b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	460b      	mov	r3, r1
 80070ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070bc:	2300      	movs	r3, #0
 80070be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070c0:	2300      	movs	r3, #0
 80070c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070ca:	78fa      	ldrb	r2, [r7, #3]
 80070cc:	4611      	mov	r1, r2
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7f9 ffa0 	bl	8001014 <HAL_PCD_SetAddress>
 80070d4:	4603      	mov	r3, r0
 80070d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
 80070da:	4618      	mov	r0, r3
 80070dc:	f000 f86e 	bl	80071bc <USBD_Get_USB_Status>
 80070e0:	4603      	mov	r3, r0
 80070e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b086      	sub	sp, #24
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	60f8      	str	r0, [r7, #12]
 80070f6:	607a      	str	r2, [r7, #4]
 80070f8:	461a      	mov	r2, r3
 80070fa:	460b      	mov	r3, r1
 80070fc:	72fb      	strb	r3, [r7, #11]
 80070fe:	4613      	mov	r3, r2
 8007100:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007106:	2300      	movs	r3, #0
 8007108:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007110:	893b      	ldrh	r3, [r7, #8]
 8007112:	7af9      	ldrb	r1, [r7, #11]
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	f7fa f878 	bl	800120a <HAL_PCD_EP_Transmit>
 800711a:	4603      	mov	r3, r0
 800711c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800711e:	7dfb      	ldrb	r3, [r7, #23]
 8007120:	4618      	mov	r0, r3
 8007122:	f000 f84b 	bl	80071bc <USBD_Get_USB_Status>
 8007126:	4603      	mov	r3, r0
 8007128:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800712a:	7dbb      	ldrb	r3, [r7, #22]
}
 800712c:	4618      	mov	r0, r3
 800712e:	3718      	adds	r7, #24
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b086      	sub	sp, #24
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	607a      	str	r2, [r7, #4]
 800713e:	461a      	mov	r2, r3
 8007140:	460b      	mov	r3, r1
 8007142:	72fb      	strb	r3, [r7, #11]
 8007144:	4613      	mov	r3, r2
 8007146:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007148:	2300      	movs	r3, #0
 800714a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800714c:	2300      	movs	r3, #0
 800714e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007156:	893b      	ldrh	r3, [r7, #8]
 8007158:	7af9      	ldrb	r1, [r7, #11]
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	f7fa f824 	bl	80011a8 <HAL_PCD_EP_Receive>
 8007160:	4603      	mov	r3, r0
 8007162:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007164:	7dfb      	ldrb	r3, [r7, #23]
 8007166:	4618      	mov	r0, r3
 8007168:	f000 f828 	bl	80071bc <USBD_Get_USB_Status>
 800716c:	4603      	mov	r3, r0
 800716e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007170:	7dbb      	ldrb	r3, [r7, #22]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3718      	adds	r7, #24
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
	...

0800717c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007184:	4b02      	ldr	r3, [pc, #8]	; (8007190 <USBD_static_malloc+0x14>)
}
 8007186:	4618      	mov	r0, r3
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	bc80      	pop	{r7}
 800718e:	4770      	bx	lr
 8007190:	20000a28 	.word	0x20000a28

08007194 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]

}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bc80      	pop	{r7}
 80071a4:	4770      	bx	lr

080071a6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071a6:	b480      	push	{r7}
 80071a8:	b083      	sub	sp, #12
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
 80071ae:	460b      	mov	r3, r1
 80071b0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80071b2:	bf00      	nop
 80071b4:	370c      	adds	r7, #12
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bc80      	pop	{r7}
 80071ba:	4770      	bx	lr

080071bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	4603      	mov	r3, r0
 80071c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071c6:	2300      	movs	r3, #0
 80071c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80071ca:	79fb      	ldrb	r3, [r7, #7]
 80071cc:	2b03      	cmp	r3, #3
 80071ce:	d817      	bhi.n	8007200 <USBD_Get_USB_Status+0x44>
 80071d0:	a201      	add	r2, pc, #4	; (adr r2, 80071d8 <USBD_Get_USB_Status+0x1c>)
 80071d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d6:	bf00      	nop
 80071d8:	080071e9 	.word	0x080071e9
 80071dc:	080071ef 	.word	0x080071ef
 80071e0:	080071f5 	.word	0x080071f5
 80071e4:	080071fb 	.word	0x080071fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	73fb      	strb	r3, [r7, #15]
    break;
 80071ec:	e00b      	b.n	8007206 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80071ee:	2302      	movs	r3, #2
 80071f0:	73fb      	strb	r3, [r7, #15]
    break;
 80071f2:	e008      	b.n	8007206 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80071f4:	2301      	movs	r3, #1
 80071f6:	73fb      	strb	r3, [r7, #15]
    break;
 80071f8:	e005      	b.n	8007206 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80071fa:	2302      	movs	r3, #2
 80071fc:	73fb      	strb	r3, [r7, #15]
    break;
 80071fe:	e002      	b.n	8007206 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007200:	2302      	movs	r3, #2
 8007202:	73fb      	strb	r3, [r7, #15]
    break;
 8007204:	bf00      	nop
  }
  return usb_status;
 8007206:	7bfb      	ldrb	r3, [r7, #15]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3714      	adds	r7, #20
 800720c:	46bd      	mov	sp, r7
 800720e:	bc80      	pop	{r7}
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop

08007214 <__libc_init_array>:
 8007214:	b570      	push	{r4, r5, r6, lr}
 8007216:	2600      	movs	r6, #0
 8007218:	4d0c      	ldr	r5, [pc, #48]	; (800724c <__libc_init_array+0x38>)
 800721a:	4c0d      	ldr	r4, [pc, #52]	; (8007250 <__libc_init_array+0x3c>)
 800721c:	1b64      	subs	r4, r4, r5
 800721e:	10a4      	asrs	r4, r4, #2
 8007220:	42a6      	cmp	r6, r4
 8007222:	d109      	bne.n	8007238 <__libc_init_array+0x24>
 8007224:	f000 f822 	bl	800726c <_init>
 8007228:	2600      	movs	r6, #0
 800722a:	4d0a      	ldr	r5, [pc, #40]	; (8007254 <__libc_init_array+0x40>)
 800722c:	4c0a      	ldr	r4, [pc, #40]	; (8007258 <__libc_init_array+0x44>)
 800722e:	1b64      	subs	r4, r4, r5
 8007230:	10a4      	asrs	r4, r4, #2
 8007232:	42a6      	cmp	r6, r4
 8007234:	d105      	bne.n	8007242 <__libc_init_array+0x2e>
 8007236:	bd70      	pop	{r4, r5, r6, pc}
 8007238:	f855 3b04 	ldr.w	r3, [r5], #4
 800723c:	4798      	blx	r3
 800723e:	3601      	adds	r6, #1
 8007240:	e7ee      	b.n	8007220 <__libc_init_array+0xc>
 8007242:	f855 3b04 	ldr.w	r3, [r5], #4
 8007246:	4798      	blx	r3
 8007248:	3601      	adds	r6, #1
 800724a:	e7f2      	b.n	8007232 <__libc_init_array+0x1e>
 800724c:	080072f0 	.word	0x080072f0
 8007250:	080072f0 	.word	0x080072f0
 8007254:	080072f0 	.word	0x080072f0
 8007258:	080072f4 	.word	0x080072f4

0800725c <memset>:
 800725c:	4603      	mov	r3, r0
 800725e:	4402      	add	r2, r0
 8007260:	4293      	cmp	r3, r2
 8007262:	d100      	bne.n	8007266 <memset+0xa>
 8007264:	4770      	bx	lr
 8007266:	f803 1b01 	strb.w	r1, [r3], #1
 800726a:	e7f9      	b.n	8007260 <memset+0x4>

0800726c <_init>:
 800726c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726e:	bf00      	nop
 8007270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007272:	bc08      	pop	{r3}
 8007274:	469e      	mov	lr, r3
 8007276:	4770      	bx	lr

08007278 <_fini>:
 8007278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800727a:	bf00      	nop
 800727c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800727e:	bc08      	pop	{r3}
 8007280:	469e      	mov	lr, r3
 8007282:	4770      	bx	lr
