
smx_0_keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080073b8  080073b8  000173b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007420  08007420  00020290  2**0
                  CONTENTS
  4 .ARM          00000000  08007420  08007420  00020290  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007420  08007420  00020290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007420  08007420  00017420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007424  08007424  00017424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  08007428  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000084c  20000290  080076b8  00020290  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000adc  080076b8  00020adc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be7e  00000000  00000000  000202b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000279a  00000000  00000000  0002c137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002e8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e0  00000000  00000000  0002f300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193a7  00000000  00000000  0002fbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d343  00000000  00000000  00048f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008493b  00000000  00000000  000562ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dac05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026a8  00000000  00000000  000dac58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000290 	.word	0x20000290
 8000128:	00000000 	.word	0x00000000
 800012c:	080073a0 	.word	0x080073a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000294 	.word	0x20000294
 8000148:	080073a0 	.word	0x080073a0

0800014c <check_matrix>:
uint8_t keys_to_send[6] = {0};
uint8_t shift_value;



void check_matrix(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

	uint8_t row, col;
	uint8_t key_index = 0;
 8000152:	2300      	movs	r3, #0
 8000154:	717b      	strb	r3, [r7, #5]
	//reset all rows to known state
	for (row = 0; row < ROWS_TO_ITERATE_SIZE; row++){
 8000156:	2300      	movs	r3, #0
 8000158:	71fb      	strb	r3, [r7, #7]
 800015a:	e00f      	b.n	800017c <check_matrix+0x30>
		HAL_GPIO_WritePin(rowsToIterate[row].port, rowsToIterate[row].pin, GPIO_PIN_RESET);
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	4a49      	ldr	r2, [pc, #292]	; (8000284 <check_matrix+0x138>)
 8000160:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000164:	79fb      	ldrb	r3, [r7, #7]
 8000166:	4a47      	ldr	r2, [pc, #284]	; (8000284 <check_matrix+0x138>)
 8000168:	00db      	lsls	r3, r3, #3
 800016a:	4413      	add	r3, r2
 800016c:	889b      	ldrh	r3, [r3, #4]
 800016e:	2200      	movs	r2, #0
 8000170:	4619      	mov	r1, r3
 8000172:	f000 fd5a 	bl	8000c2a <HAL_GPIO_WritePin>
	for (row = 0; row < ROWS_TO_ITERATE_SIZE; row++){
 8000176:	79fb      	ldrb	r3, [r7, #7]
 8000178:	3301      	adds	r3, #1
 800017a:	71fb      	strb	r3, [r7, #7]
 800017c:	79fb      	ldrb	r3, [r7, #7]
 800017e:	2b04      	cmp	r3, #4
 8000180:	d9ec      	bls.n	800015c <check_matrix+0x10>
	}

	//check each key and save status to matrix_current
	for (row = 0; row < ROWS_TO_ITERATE_SIZE; row++){
 8000182:	2300      	movs	r3, #0
 8000184:	71fb      	strb	r3, [r7, #7]
 8000186:	e073      	b.n	8000270 <check_matrix+0x124>
		HAL_GPIO_WritePin(rowsToIterate[row].port, rowsToIterate[row].pin, GPIO_PIN_SET);
 8000188:	79fb      	ldrb	r3, [r7, #7]
 800018a:	4a3e      	ldr	r2, [pc, #248]	; (8000284 <check_matrix+0x138>)
 800018c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000190:	79fb      	ldrb	r3, [r7, #7]
 8000192:	4a3c      	ldr	r2, [pc, #240]	; (8000284 <check_matrix+0x138>)
 8000194:	00db      	lsls	r3, r3, #3
 8000196:	4413      	add	r3, r2
 8000198:	889b      	ldrh	r3, [r3, #4]
 800019a:	2201      	movs	r2, #1
 800019c:	4619      	mov	r1, r3
 800019e:	f000 fd44 	bl	8000c2a <HAL_GPIO_WritePin>

		for(col = 0; col < COLS_TO_ITERATE_SIZE; col++){
 80001a2:	2300      	movs	r3, #0
 80001a4:	71bb      	strb	r3, [r7, #6]
 80001a6:	e050      	b.n	800024a <check_matrix+0xfe>
			if(HAL_GPIO_ReadPin(colsToIterate[col].port, colsToIterate[col].pin)){
 80001a8:	79bb      	ldrb	r3, [r7, #6]
 80001aa:	4a37      	ldr	r2, [pc, #220]	; (8000288 <check_matrix+0x13c>)
 80001ac:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80001b0:	79bb      	ldrb	r3, [r7, #6]
 80001b2:	4935      	ldr	r1, [pc, #212]	; (8000288 <check_matrix+0x13c>)
 80001b4:	00db      	lsls	r3, r3, #3
 80001b6:	440b      	add	r3, r1
 80001b8:	889b      	ldrh	r3, [r3, #4]
 80001ba:	4619      	mov	r1, r3
 80001bc:	4610      	mov	r0, r2
 80001be:	f000 fd1d 	bl	8000bfc <HAL_GPIO_ReadPin>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d03d      	beq.n	8000244 <check_matrix+0xf8>
				matrix_current[row][col] = 1;
 80001c8:	79fa      	ldrb	r2, [r7, #7]
 80001ca:	79b9      	ldrb	r1, [r7, #6]
 80001cc:	482f      	ldr	r0, [pc, #188]	; (800028c <check_matrix+0x140>)
 80001ce:	4613      	mov	r3, r2
 80001d0:	011b      	lsls	r3, r3, #4
 80001d2:	1a9b      	subs	r3, r3, r2
 80001d4:	4403      	add	r3, r0
 80001d6:	440b      	add	r3, r1
 80001d8:	2201      	movs	r2, #1
 80001da:	701a      	strb	r2, [r3, #0]
				key_pressed = keyMapping[row * COLS_TO_ITERATE_SIZE + col].hexValue; //extract usage ID from keyMapping
 80001dc:	79fa      	ldrb	r2, [r7, #7]
 80001de:	4613      	mov	r3, r2
 80001e0:	011b      	lsls	r3, r3, #4
 80001e2:	1a9b      	subs	r3, r3, r2
 80001e4:	00db      	lsls	r3, r3, #3
 80001e6:	08da      	lsrs	r2, r3, #3
 80001e8:	79bb      	ldrb	r3, [r7, #6]
 80001ea:	4413      	add	r3, r2
 80001ec:	4a28      	ldr	r2, [pc, #160]	; (8000290 <check_matrix+0x144>)
 80001ee:	005b      	lsls	r3, r3, #1
 80001f0:	4413      	add	r3, r2
 80001f2:	785a      	ldrb	r2, [r3, #1]
 80001f4:	4b27      	ldr	r3, [pc, #156]	; (8000294 <check_matrix+0x148>)
 80001f6:	701a      	strb	r2, [r3, #0]
				if (key_pressed >= 0xE0){ // if the value is in modifier range translate 0xE0, 0xE1... to 0x01 for leftCTRL, 0x02 for leftShift etc
 80001f8:	4b26      	ldr	r3, [pc, #152]	; (8000294 <check_matrix+0x148>)
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	2bdf      	cmp	r3, #223	; 0xdf
 80001fe:	d916      	bls.n	800022e <check_matrix+0xe2>
					shift_value =  key_pressed ^ 0xE0;
 8000200:	4b24      	ldr	r3, [pc, #144]	; (8000294 <check_matrix+0x148>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	f083 031f 	eor.w	r3, r3, #31
 8000208:	43db      	mvns	r3, r3
 800020a:	b2da      	uxtb	r2, r3
 800020c:	4b22      	ldr	r3, [pc, #136]	; (8000298 <check_matrix+0x14c>)
 800020e:	701a      	strb	r2, [r3, #0]
					modifier_pressed |= (1 << shift_value); //if multiple modifiers are pressed, combine them into one hex value
 8000210:	4b21      	ldr	r3, [pc, #132]	; (8000298 <check_matrix+0x14c>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	461a      	mov	r2, r3
 8000216:	2301      	movs	r3, #1
 8000218:	4093      	lsls	r3, r2
 800021a:	b25a      	sxtb	r2, r3
 800021c:	4b1f      	ldr	r3, [pc, #124]	; (800029c <check_matrix+0x150>)
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	b25b      	sxtb	r3, r3
 8000222:	4313      	orrs	r3, r2
 8000224:	b25b      	sxtb	r3, r3
 8000226:	b2da      	uxtb	r2, r3
 8000228:	4b1c      	ldr	r3, [pc, #112]	; (800029c <check_matrix+0x150>)
 800022a:	701a      	strb	r2, [r3, #0]
 800022c:	e00a      	b.n	8000244 <check_matrix+0xf8>
				}
				else if (key_index <= 6){
 800022e:	797b      	ldrb	r3, [r7, #5]
 8000230:	2b06      	cmp	r3, #6
 8000232:	d807      	bhi.n	8000244 <check_matrix+0xf8>
					keys_to_send[key_index] = key_pressed;
 8000234:	797b      	ldrb	r3, [r7, #5]
 8000236:	4a17      	ldr	r2, [pc, #92]	; (8000294 <check_matrix+0x148>)
 8000238:	7811      	ldrb	r1, [r2, #0]
 800023a:	4a19      	ldr	r2, [pc, #100]	; (80002a0 <check_matrix+0x154>)
 800023c:	54d1      	strb	r1, [r2, r3]
					key_index++;
 800023e:	797b      	ldrb	r3, [r7, #5]
 8000240:	3301      	adds	r3, #1
 8000242:	717b      	strb	r3, [r7, #5]
		for(col = 0; col < COLS_TO_ITERATE_SIZE; col++){
 8000244:	79bb      	ldrb	r3, [r7, #6]
 8000246:	3301      	adds	r3, #1
 8000248:	71bb      	strb	r3, [r7, #6]
 800024a:	79bb      	ldrb	r3, [r7, #6]
 800024c:	2b0e      	cmp	r3, #14
 800024e:	d9ab      	bls.n	80001a8 <check_matrix+0x5c>
			} /*else {
				matrix_current[row][col] = 0;

			}*/
		}
		HAL_GPIO_WritePin(rowsToIterate[row].port, rowsToIterate[row].pin, GPIO_PIN_RESET);
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	4a0c      	ldr	r2, [pc, #48]	; (8000284 <check_matrix+0x138>)
 8000254:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000258:	79fb      	ldrb	r3, [r7, #7]
 800025a:	4a0a      	ldr	r2, [pc, #40]	; (8000284 <check_matrix+0x138>)
 800025c:	00db      	lsls	r3, r3, #3
 800025e:	4413      	add	r3, r2
 8000260:	889b      	ldrh	r3, [r3, #4]
 8000262:	2200      	movs	r2, #0
 8000264:	4619      	mov	r1, r3
 8000266:	f000 fce0 	bl	8000c2a <HAL_GPIO_WritePin>
	for (row = 0; row < ROWS_TO_ITERATE_SIZE; row++){
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	3301      	adds	r3, #1
 800026e:	71fb      	strb	r3, [r7, #7]
 8000270:	79fb      	ldrb	r3, [r7, #7]
 8000272:	2b04      	cmp	r3, #4
 8000274:	d988      	bls.n	8000188 <check_matrix+0x3c>
	}
	key_index = 0;
 8000276:	2300      	movs	r3, #0
 8000278:	717b      	strb	r3, [r7, #5]
	//HAL_Delay(200);

}
 800027a:	bf00      	nop
 800027c:	3708      	adds	r7, #8
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	20000000 	.word	0x20000000
 8000288:	20000028 	.word	0x20000028
 800028c:	200002ac 	.word	0x200002ac
 8000290:	200000a0 	.word	0x200000a0
 8000294:	200002f7 	.word	0x200002f7
 8000298:	20000302 	.word	0x20000302
 800029c:	200002f8 	.word	0x200002f8
 80002a0:	200002fc 	.word	0x200002fc

080002a4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002aa:	f000 f9b3 	bl	8000614 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002ae:	f000 f849 	bl	8000344 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002b2:	f000 f8a3 	bl	80003fc <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 80002b6:	f006 fc8d 	bl	8006bd4 <MX_USB_DEVICE_Init>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		uint8_t i;
		check_matrix();
 80002ba:	f7ff ff47 	bl	800014c <check_matrix>
		keyBoardHIDsub.MODIFIER = modifier_pressed;
 80002be:	4b1c      	ldr	r3, [pc, #112]	; (8000330 <main+0x8c>)
 80002c0:	781a      	ldrb	r2, [r3, #0]
 80002c2:	4b1c      	ldr	r3, [pc, #112]	; (8000334 <main+0x90>)
 80002c4:	701a      	strb	r2, [r3, #0]
		keyBoardHIDsub.KEYCODE1 = key_pressed;
 80002c6:	4b1c      	ldr	r3, [pc, #112]	; (8000338 <main+0x94>)
 80002c8:	781a      	ldrb	r2, [r3, #0]
 80002ca:	4b1a      	ldr	r3, [pc, #104]	; (8000334 <main+0x90>)
 80002cc:	709a      	strb	r2, [r3, #2]

		keyBoardHIDsub.KEYCODE1 = keys_to_send[0];
 80002ce:	4b1b      	ldr	r3, [pc, #108]	; (800033c <main+0x98>)
 80002d0:	781a      	ldrb	r2, [r3, #0]
 80002d2:	4b18      	ldr	r3, [pc, #96]	; (8000334 <main+0x90>)
 80002d4:	709a      	strb	r2, [r3, #2]
		keyBoardHIDsub.KEYCODE2 = keys_to_send[1];
 80002d6:	4b19      	ldr	r3, [pc, #100]	; (800033c <main+0x98>)
 80002d8:	785a      	ldrb	r2, [r3, #1]
 80002da:	4b16      	ldr	r3, [pc, #88]	; (8000334 <main+0x90>)
 80002dc:	70da      	strb	r2, [r3, #3]
		keyBoardHIDsub.KEYCODE3 = keys_to_send[2];
 80002de:	4b17      	ldr	r3, [pc, #92]	; (800033c <main+0x98>)
 80002e0:	789a      	ldrb	r2, [r3, #2]
 80002e2:	4b14      	ldr	r3, [pc, #80]	; (8000334 <main+0x90>)
 80002e4:	711a      	strb	r2, [r3, #4]
		keyBoardHIDsub.KEYCODE4 = keys_to_send[3];
 80002e6:	4b15      	ldr	r3, [pc, #84]	; (800033c <main+0x98>)
 80002e8:	78da      	ldrb	r2, [r3, #3]
 80002ea:	4b12      	ldr	r3, [pc, #72]	; (8000334 <main+0x90>)
 80002ec:	715a      	strb	r2, [r3, #5]
		keyBoardHIDsub.KEYCODE5 = keys_to_send[4];
 80002ee:	4b13      	ldr	r3, [pc, #76]	; (800033c <main+0x98>)
 80002f0:	791a      	ldrb	r2, [r3, #4]
 80002f2:	4b10      	ldr	r3, [pc, #64]	; (8000334 <main+0x90>)
 80002f4:	719a      	strb	r2, [r3, #6]
		keyBoardHIDsub.KEYCODE6 = keys_to_send[5];
 80002f6:	4b11      	ldr	r3, [pc, #68]	; (800033c <main+0x98>)
 80002f8:	795a      	ldrb	r2, [r3, #5]
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <main+0x90>)
 80002fc:	71da      	strb	r2, [r3, #7]

		USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 80002fe:	2208      	movs	r2, #8
 8000300:	490c      	ldr	r1, [pc, #48]	; (8000334 <main+0x90>)
 8000302:	480f      	ldr	r0, [pc, #60]	; (8000340 <main+0x9c>)
 8000304:	f005 fb76 	bl	80059f4 <USBD_HID_SendReport>
		key_pressed = 0x00;
 8000308:	4b0b      	ldr	r3, [pc, #44]	; (8000338 <main+0x94>)
 800030a:	2200      	movs	r2, #0
 800030c:	701a      	strb	r2, [r3, #0]
		modifier_pressed = 0x00;
 800030e:	4b08      	ldr	r3, [pc, #32]	; (8000330 <main+0x8c>)
 8000310:	2200      	movs	r2, #0
 8000312:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= 6; i++){
 8000314:	2300      	movs	r3, #0
 8000316:	71fb      	strb	r3, [r7, #7]
 8000318:	e006      	b.n	8000328 <main+0x84>
			keys_to_send[i] = 0x00;
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	4a07      	ldr	r2, [pc, #28]	; (800033c <main+0x98>)
 800031e:	2100      	movs	r1, #0
 8000320:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i <= 6; i++){
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	3301      	adds	r3, #1
 8000326:	71fb      	strb	r3, [r7, #7]
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	2b06      	cmp	r3, #6
 800032c:	d9f5      	bls.n	800031a <main+0x76>
	{
 800032e:	e7c4      	b.n	80002ba <main+0x16>
 8000330:	200002f8 	.word	0x200002f8
 8000334:	20000304 	.word	0x20000304
 8000338:	200002f7 	.word	0x200002f7
 800033c:	200002fc 	.word	0x200002fc
 8000340:	20000314 	.word	0x20000314

08000344 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b094      	sub	sp, #80	; 0x50
 8000348:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800034e:	2228      	movs	r2, #40	; 0x28
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f007 f81c 	bl	8007390 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000358:	f107 0314 	add.w	r3, r7, #20
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]
 8000360:	605a      	str	r2, [r3, #4]
 8000362:	609a      	str	r2, [r3, #8]
 8000364:	60da      	str	r2, [r3, #12]
 8000366:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000374:	2301      	movs	r3, #1
 8000376:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000378:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800037c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000382:	2301      	movs	r3, #1
 8000384:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000386:	2302      	movs	r3, #2
 8000388:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800038a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800038e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000390:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000394:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000396:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800039a:	4618      	mov	r0, r3
 800039c:	f002 f9b4 	bl	8002708 <HAL_RCC_OscConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x66>
	{
		Error_Handler();
 80003a6:	f000 f89f 	bl	80004e8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003aa:	230f      	movs	r3, #15
 80003ac:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ae:	2302      	movs	r3, #2
 80003b0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ba:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80003bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003c0:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003c2:	f107 0314 	add.w	r3, r7, #20
 80003c6:	2101      	movs	r1, #1
 80003c8:	4618      	mov	r0, r3
 80003ca:	f002 fc1f 	bl	8002c0c <HAL_RCC_ClockConfig>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80003d4:	f000 f888 	bl	80004e8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003d8:	2310      	movs	r3, #16
 80003da:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80003dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80003e0:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	4618      	mov	r0, r3
 80003e6:	f002 fd6d 	bl	8002ec4 <HAL_RCCEx_PeriphCLKConfig>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <SystemClock_Config+0xb0>
	{
		Error_Handler();
 80003f0:	f000 f87a 	bl	80004e8 <Error_Handler>
	}
}
 80003f4:	bf00      	nop
 80003f6:	3750      	adds	r7, #80	; 0x50
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b088      	sub	sp, #32
 8000400:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000402:	f107 0310 	add.w	r3, r7, #16
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000410:	4b32      	ldr	r3, [pc, #200]	; (80004dc <MX_GPIO_Init+0xe0>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a31      	ldr	r2, [pc, #196]	; (80004dc <MX_GPIO_Init+0xe0>)
 8000416:	f043 0320 	orr.w	r3, r3, #32
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b2f      	ldr	r3, [pc, #188]	; (80004dc <MX_GPIO_Init+0xe0>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f003 0320 	and.w	r3, r3, #32
 8000424:	60fb      	str	r3, [r7, #12]
 8000426:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000428:	4b2c      	ldr	r3, [pc, #176]	; (80004dc <MX_GPIO_Init+0xe0>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a2b      	ldr	r2, [pc, #172]	; (80004dc <MX_GPIO_Init+0xe0>)
 800042e:	f043 0304 	orr.w	r3, r3, #4
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b29      	ldr	r3, [pc, #164]	; (80004dc <MX_GPIO_Init+0xe0>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0304 	and.w	r3, r3, #4
 800043c:	60bb      	str	r3, [r7, #8]
 800043e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000440:	4b26      	ldr	r3, [pc, #152]	; (80004dc <MX_GPIO_Init+0xe0>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a25      	ldr	r2, [pc, #148]	; (80004dc <MX_GPIO_Init+0xe0>)
 8000446:	f043 0308 	orr.w	r3, r3, #8
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b23      	ldr	r3, [pc, #140]	; (80004dc <MX_GPIO_Init+0xe0>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0308 	and.w	r3, r3, #8
 8000454:	607b      	str	r3, [r7, #4]
 8000456:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
 8000458:	2200      	movs	r2, #0
 800045a:	f44f 714e 	mov.w	r1, #824	; 0x338
 800045e:	4820      	ldr	r0, [pc, #128]	; (80004e0 <MX_GPIO_Init+0xe4>)
 8000460:	f000 fbe3 	bl	8000c2a <HAL_GPIO_WritePin>
			|GPIO_PIN_9, GPIO_PIN_RESET);

	/*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000464:	f248 73ff 	movw	r3, #34815	; 0x87ff
 8000468:	613b      	str	r3, [r7, #16]
			|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
			|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800046a:	2300      	movs	r3, #0
 800046c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046e:	2300      	movs	r3, #0
 8000470:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000472:	f107 0310 	add.w	r3, r7, #16
 8000476:	4619      	mov	r1, r3
 8000478:	481a      	ldr	r0, [pc, #104]	; (80004e4 <MX_GPIO_Init+0xe8>)
 800047a:	f000 fa3b 	bl	80008f4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 PB11 PB13 PB15
                           PB6 PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15
 800047e:	f64a 43c0 	movw	r3, #44224	; 0xacc0
 8000482:	613b      	str	r3, [r7, #16]
			|GPIO_PIN_6|GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000484:	2300      	movs	r3, #0
 8000486:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000488:	2300      	movs	r3, #0
 800048a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800048c:	f107 0310 	add.w	r3, r7, #16
 8000490:	4619      	mov	r1, r3
 8000492:	4813      	ldr	r0, [pc, #76]	; (80004e0 <MX_GPIO_Init+0xe4>)
 8000494:	f000 fa2e 	bl	80008f4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000498:	2308      	movs	r3, #8
 800049a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049c:	2301      	movs	r3, #1
 800049e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004a0:	2302      	movs	r3, #2
 80004a2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a4:	2302      	movs	r3, #2
 80004a6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a8:	f107 0310 	add.w	r3, r7, #16
 80004ac:	4619      	mov	r1, r3
 80004ae:	480c      	ldr	r0, [pc, #48]	; (80004e0 <MX_GPIO_Init+0xe4>)
 80004b0:	f000 fa20 	bl	80008f4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB4 PB5 PB8 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 80004b4:	f44f 734c 	mov.w	r3, #816	; 0x330
 80004b8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ba:	2301      	movs	r3, #1
 80004bc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004be:	2300      	movs	r3, #0
 80004c0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c2:	2302      	movs	r3, #2
 80004c4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c6:	f107 0310 	add.w	r3, r7, #16
 80004ca:	4619      	mov	r1, r3
 80004cc:	4804      	ldr	r0, [pc, #16]	; (80004e0 <MX_GPIO_Init+0xe4>)
 80004ce:	f000 fa11 	bl	80008f4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80004d2:	bf00      	nop
 80004d4:	3720      	adds	r7, #32
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40021000 	.word	0x40021000
 80004e0:	40010c00 	.word	0x40010c00
 80004e4:	40010800 	.word	0x40010800

080004e8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ec:	b672      	cpsid	i
}
 80004ee:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80004f0:	e7fe      	b.n	80004f0 <Error_Handler+0x8>
	...

080004f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004fa:	4b15      	ldr	r3, [pc, #84]	; (8000550 <HAL_MspInit+0x5c>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	4a14      	ldr	r2, [pc, #80]	; (8000550 <HAL_MspInit+0x5c>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	6193      	str	r3, [r2, #24]
 8000506:	4b12      	ldr	r3, [pc, #72]	; (8000550 <HAL_MspInit+0x5c>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <HAL_MspInit+0x5c>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <HAL_MspInit+0x5c>)
 8000518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800051c:	61d3      	str	r3, [r2, #28]
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <HAL_MspInit+0x5c>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <HAL_MspInit+0x60>)
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	4a04      	ldr	r2, [pc, #16]	; (8000554 <HAL_MspInit+0x60>)
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr
 8000550:	40021000 	.word	0x40021000
 8000554:	40010000 	.word	0x40010000

08000558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800055c:	e7fe      	b.n	800055c <NMI_Handler+0x4>

0800055e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000562:	e7fe      	b.n	8000562 <HardFault_Handler+0x4>

08000564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <MemManage_Handler+0x4>

0800056a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800056e:	e7fe      	b.n	800056e <BusFault_Handler+0x4>

08000570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000574:	e7fe      	b.n	8000574 <UsageFault_Handler+0x4>

08000576 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr

08000582 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr

0800058e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr

0800059a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800059e:	f000 f87f 	bl	80006a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
	...

080005a8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005ac:	4802      	ldr	r0, [pc, #8]	; (80005b8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80005ae:	f000 fc79 	bl	8000ea4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	200007d8 	.word	0x200007d8

080005bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr

080005c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005c8:	f7ff fff8 	bl	80005bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005cc:	480b      	ldr	r0, [pc, #44]	; (80005fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005ce:	490c      	ldr	r1, [pc, #48]	; (8000600 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005d0:	4a0c      	ldr	r2, [pc, #48]	; (8000604 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005d4:	e002      	b.n	80005dc <LoopCopyDataInit>

080005d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005da:	3304      	adds	r3, #4

080005dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e0:	d3f9      	bcc.n	80005d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005e2:	4a09      	ldr	r2, [pc, #36]	; (8000608 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005e4:	4c09      	ldr	r4, [pc, #36]	; (800060c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e8:	e001      	b.n	80005ee <LoopFillZerobss>

080005ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005ec:	3204      	adds	r2, #4

080005ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f0:	d3fb      	bcc.n	80005ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005f2:	f006 fea9 	bl	8007348 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005f6:	f7ff fe55 	bl	80002a4 <main>
  bx lr
 80005fa:	4770      	bx	lr
  ldr r0, =_sdata
 80005fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000600:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 8000604:	08007428 	.word	0x08007428
  ldr r2, =_sbss
 8000608:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 800060c:	20000adc 	.word	0x20000adc

08000610 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000610:	e7fe      	b.n	8000610 <ADC1_2_IRQHandler>
	...

08000614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <HAL_Init+0x28>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a07      	ldr	r2, [pc, #28]	; (800063c <HAL_Init+0x28>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000624:	2003      	movs	r0, #3
 8000626:	f000 f923 	bl	8000870 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800062a:	200f      	movs	r0, #15
 800062c:	f000 f808 	bl	8000640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000630:	f7ff ff60 	bl	80004f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40022000 	.word	0x40022000

08000640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <HAL_InitTick+0x54>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <HAL_InitTick+0x58>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	4619      	mov	r1, r3
 8000652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000656:	fbb3 f3f1 	udiv	r3, r3, r1
 800065a:	fbb2 f3f3 	udiv	r3, r2, r3
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f93b 	bl	80008da <HAL_SYSTICK_Config>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800066a:	2301      	movs	r3, #1
 800066c:	e00e      	b.n	800068c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2b0f      	cmp	r3, #15
 8000672:	d80a      	bhi.n	800068a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000674:	2200      	movs	r2, #0
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800067c:	f000 f903 	bl	8000886 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000680:	4a06      	ldr	r2, [pc, #24]	; (800069c <HAL_InitTick+0x5c>)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000686:	2300      	movs	r3, #0
 8000688:	e000      	b.n	800068c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
}
 800068c:	4618      	mov	r0, r3
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000138 	.word	0x20000138
 8000698:	20000140 	.word	0x20000140
 800069c:	2000013c 	.word	0x2000013c

080006a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <HAL_IncTick+0x1c>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <HAL_IncTick+0x20>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4413      	add	r3, r2
 80006b0:	4a03      	ldr	r2, [pc, #12]	; (80006c0 <HAL_IncTick+0x20>)
 80006b2:	6013      	str	r3, [r2, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	20000140 	.word	0x20000140
 80006c0:	2000030c 	.word	0x2000030c

080006c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  return uwTick;
 80006c8:	4b02      	ldr	r3, [pc, #8]	; (80006d4 <HAL_GetTick+0x10>)
 80006ca:	681b      	ldr	r3, [r3, #0]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr
 80006d4:	2000030c 	.word	0x2000030c

080006d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <__NVIC_SetPriorityGrouping+0x44>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ee:	68ba      	ldr	r2, [r7, #8]
 80006f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006f4:	4013      	ands	r3, r2
 80006f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000700:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800070a:	4a04      	ldr	r2, [pc, #16]	; (800071c <__NVIC_SetPriorityGrouping+0x44>)
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	60d3      	str	r3, [r2, #12]
}
 8000710:	bf00      	nop
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000724:	4b04      	ldr	r3, [pc, #16]	; (8000738 <__NVIC_GetPriorityGrouping+0x18>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	0a1b      	lsrs	r3, r3, #8
 800072a:	f003 0307 	and.w	r3, r3, #7
}
 800072e:	4618      	mov	r0, r3
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074a:	2b00      	cmp	r3, #0
 800074c:	db0b      	blt.n	8000766 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	f003 021f 	and.w	r2, r3, #31
 8000754:	4906      	ldr	r1, [pc, #24]	; (8000770 <__NVIC_EnableIRQ+0x34>)
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	095b      	lsrs	r3, r3, #5
 800075c:	2001      	movs	r0, #1
 800075e:	fa00 f202 	lsl.w	r2, r0, r2
 8000762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr
 8000770:	e000e100 	.word	0xe000e100

08000774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	6039      	str	r1, [r7, #0]
 800077e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000784:	2b00      	cmp	r3, #0
 8000786:	db0a      	blt.n	800079e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	b2da      	uxtb	r2, r3
 800078c:	490c      	ldr	r1, [pc, #48]	; (80007c0 <__NVIC_SetPriority+0x4c>)
 800078e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000792:	0112      	lsls	r2, r2, #4
 8000794:	b2d2      	uxtb	r2, r2
 8000796:	440b      	add	r3, r1
 8000798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800079c:	e00a      	b.n	80007b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4908      	ldr	r1, [pc, #32]	; (80007c4 <__NVIC_SetPriority+0x50>)
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	f003 030f 	and.w	r3, r3, #15
 80007aa:	3b04      	subs	r3, #4
 80007ac:	0112      	lsls	r2, r2, #4
 80007ae:	b2d2      	uxtb	r2, r2
 80007b0:	440b      	add	r3, r1
 80007b2:	761a      	strb	r2, [r3, #24]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000e100 	.word	0xe000e100
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b089      	sub	sp, #36	; 0x24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	60f8      	str	r0, [r7, #12]
 80007d0:	60b9      	str	r1, [r7, #8]
 80007d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f003 0307 	and.w	r3, r3, #7
 80007da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	f1c3 0307 	rsb	r3, r3, #7
 80007e2:	2b04      	cmp	r3, #4
 80007e4:	bf28      	it	cs
 80007e6:	2304      	movcs	r3, #4
 80007e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	3304      	adds	r3, #4
 80007ee:	2b06      	cmp	r3, #6
 80007f0:	d902      	bls.n	80007f8 <NVIC_EncodePriority+0x30>
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	3b03      	subs	r3, #3
 80007f6:	e000      	b.n	80007fa <NVIC_EncodePriority+0x32>
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000800:	69bb      	ldr	r3, [r7, #24]
 8000802:	fa02 f303 	lsl.w	r3, r2, r3
 8000806:	43da      	mvns	r2, r3
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	401a      	ands	r2, r3
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000810:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	fa01 f303 	lsl.w	r3, r1, r3
 800081a:	43d9      	mvns	r1, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000820:	4313      	orrs	r3, r2
         );
}
 8000822:	4618      	mov	r0, r3
 8000824:	3724      	adds	r7, #36	; 0x24
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr

0800082c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	3b01      	subs	r3, #1
 8000838:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800083c:	d301      	bcc.n	8000842 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800083e:	2301      	movs	r3, #1
 8000840:	e00f      	b.n	8000862 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <SysTick_Config+0x40>)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3b01      	subs	r3, #1
 8000848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800084a:	210f      	movs	r1, #15
 800084c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000850:	f7ff ff90 	bl	8000774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <SysTick_Config+0x40>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800085a:	4b04      	ldr	r3, [pc, #16]	; (800086c <SysTick_Config+0x40>)
 800085c:	2207      	movs	r2, #7
 800085e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000860:	2300      	movs	r3, #0
}
 8000862:	4618      	mov	r0, r3
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	e000e010 	.word	0xe000e010

08000870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f7ff ff2d 	bl	80006d8 <__NVIC_SetPriorityGrouping>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000886:	b580      	push	{r7, lr}
 8000888:	b086      	sub	sp, #24
 800088a:	af00      	add	r7, sp, #0
 800088c:	4603      	mov	r3, r0
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
 8000892:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000898:	f7ff ff42 	bl	8000720 <__NVIC_GetPriorityGrouping>
 800089c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	68b9      	ldr	r1, [r7, #8]
 80008a2:	6978      	ldr	r0, [r7, #20]
 80008a4:	f7ff ff90 	bl	80007c8 <NVIC_EncodePriority>
 80008a8:	4602      	mov	r2, r0
 80008aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ff5f 	bl	8000774 <__NVIC_SetPriority>
}
 80008b6:	bf00      	nop
 80008b8:	3718      	adds	r7, #24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	4603      	mov	r3, r0
 80008c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ff35 	bl	800073c <__NVIC_EnableIRQ>
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b082      	sub	sp, #8
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f7ff ffa2 	bl	800082c <SysTick_Config>
 80008e8:	4603      	mov	r3, r0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b08b      	sub	sp, #44	; 0x2c
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000906:	e169      	b.n	8000bdc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000908:	2201      	movs	r2, #1
 800090a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	69fa      	ldr	r2, [r7, #28]
 8000918:	4013      	ands	r3, r2
 800091a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800091c:	69ba      	ldr	r2, [r7, #24]
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	429a      	cmp	r2, r3
 8000922:	f040 8158 	bne.w	8000bd6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	4a9a      	ldr	r2, [pc, #616]	; (8000b94 <HAL_GPIO_Init+0x2a0>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d05e      	beq.n	80009ee <HAL_GPIO_Init+0xfa>
 8000930:	4a98      	ldr	r2, [pc, #608]	; (8000b94 <HAL_GPIO_Init+0x2a0>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d875      	bhi.n	8000a22 <HAL_GPIO_Init+0x12e>
 8000936:	4a98      	ldr	r2, [pc, #608]	; (8000b98 <HAL_GPIO_Init+0x2a4>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d058      	beq.n	80009ee <HAL_GPIO_Init+0xfa>
 800093c:	4a96      	ldr	r2, [pc, #600]	; (8000b98 <HAL_GPIO_Init+0x2a4>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d86f      	bhi.n	8000a22 <HAL_GPIO_Init+0x12e>
 8000942:	4a96      	ldr	r2, [pc, #600]	; (8000b9c <HAL_GPIO_Init+0x2a8>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d052      	beq.n	80009ee <HAL_GPIO_Init+0xfa>
 8000948:	4a94      	ldr	r2, [pc, #592]	; (8000b9c <HAL_GPIO_Init+0x2a8>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d869      	bhi.n	8000a22 <HAL_GPIO_Init+0x12e>
 800094e:	4a94      	ldr	r2, [pc, #592]	; (8000ba0 <HAL_GPIO_Init+0x2ac>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d04c      	beq.n	80009ee <HAL_GPIO_Init+0xfa>
 8000954:	4a92      	ldr	r2, [pc, #584]	; (8000ba0 <HAL_GPIO_Init+0x2ac>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d863      	bhi.n	8000a22 <HAL_GPIO_Init+0x12e>
 800095a:	4a92      	ldr	r2, [pc, #584]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d046      	beq.n	80009ee <HAL_GPIO_Init+0xfa>
 8000960:	4a90      	ldr	r2, [pc, #576]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d85d      	bhi.n	8000a22 <HAL_GPIO_Init+0x12e>
 8000966:	2b12      	cmp	r3, #18
 8000968:	d82a      	bhi.n	80009c0 <HAL_GPIO_Init+0xcc>
 800096a:	2b12      	cmp	r3, #18
 800096c:	d859      	bhi.n	8000a22 <HAL_GPIO_Init+0x12e>
 800096e:	a201      	add	r2, pc, #4	; (adr r2, 8000974 <HAL_GPIO_Init+0x80>)
 8000970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000974:	080009ef 	.word	0x080009ef
 8000978:	080009c9 	.word	0x080009c9
 800097c:	080009db 	.word	0x080009db
 8000980:	08000a1d 	.word	0x08000a1d
 8000984:	08000a23 	.word	0x08000a23
 8000988:	08000a23 	.word	0x08000a23
 800098c:	08000a23 	.word	0x08000a23
 8000990:	08000a23 	.word	0x08000a23
 8000994:	08000a23 	.word	0x08000a23
 8000998:	08000a23 	.word	0x08000a23
 800099c:	08000a23 	.word	0x08000a23
 80009a0:	08000a23 	.word	0x08000a23
 80009a4:	08000a23 	.word	0x08000a23
 80009a8:	08000a23 	.word	0x08000a23
 80009ac:	08000a23 	.word	0x08000a23
 80009b0:	08000a23 	.word	0x08000a23
 80009b4:	08000a23 	.word	0x08000a23
 80009b8:	080009d1 	.word	0x080009d1
 80009bc:	080009e5 	.word	0x080009e5
 80009c0:	4a79      	ldr	r2, [pc, #484]	; (8000ba8 <HAL_GPIO_Init+0x2b4>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d013      	beq.n	80009ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009c6:	e02c      	b.n	8000a22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	623b      	str	r3, [r7, #32]
          break;
 80009ce:	e029      	b.n	8000a24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	3304      	adds	r3, #4
 80009d6:	623b      	str	r3, [r7, #32]
          break;
 80009d8:	e024      	b.n	8000a24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	68db      	ldr	r3, [r3, #12]
 80009de:	3308      	adds	r3, #8
 80009e0:	623b      	str	r3, [r7, #32]
          break;
 80009e2:	e01f      	b.n	8000a24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	330c      	adds	r3, #12
 80009ea:	623b      	str	r3, [r7, #32]
          break;
 80009ec:	e01a      	b.n	8000a24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d102      	bne.n	80009fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009f6:	2304      	movs	r3, #4
 80009f8:	623b      	str	r3, [r7, #32]
          break;
 80009fa:	e013      	b.n	8000a24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d105      	bne.n	8000a10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a04:	2308      	movs	r3, #8
 8000a06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	69fa      	ldr	r2, [r7, #28]
 8000a0c:	611a      	str	r2, [r3, #16]
          break;
 8000a0e:	e009      	b.n	8000a24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a10:	2308      	movs	r3, #8
 8000a12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	69fa      	ldr	r2, [r7, #28]
 8000a18:	615a      	str	r2, [r3, #20]
          break;
 8000a1a:	e003      	b.n	8000a24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
          break;
 8000a20:	e000      	b.n	8000a24 <HAL_GPIO_Init+0x130>
          break;
 8000a22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	2bff      	cmp	r3, #255	; 0xff
 8000a28:	d801      	bhi.n	8000a2e <HAL_GPIO_Init+0x13a>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	e001      	b.n	8000a32 <HAL_GPIO_Init+0x13e>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	3304      	adds	r3, #4
 8000a32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	2bff      	cmp	r3, #255	; 0xff
 8000a38:	d802      	bhi.n	8000a40 <HAL_GPIO_Init+0x14c>
 8000a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	e002      	b.n	8000a46 <HAL_GPIO_Init+0x152>
 8000a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a42:	3b08      	subs	r3, #8
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	210f      	movs	r1, #15
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	fa01 f303 	lsl.w	r3, r1, r3
 8000a54:	43db      	mvns	r3, r3
 8000a56:	401a      	ands	r2, r3
 8000a58:	6a39      	ldr	r1, [r7, #32]
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a60:	431a      	orrs	r2, r3
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	f000 80b1 	beq.w	8000bd6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a74:	4b4d      	ldr	r3, [pc, #308]	; (8000bac <HAL_GPIO_Init+0x2b8>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	4a4c      	ldr	r2, [pc, #304]	; (8000bac <HAL_GPIO_Init+0x2b8>)
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	6193      	str	r3, [r2, #24]
 8000a80:	4b4a      	ldr	r3, [pc, #296]	; (8000bac <HAL_GPIO_Init+0x2b8>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a8c:	4a48      	ldr	r2, [pc, #288]	; (8000bb0 <HAL_GPIO_Init+0x2bc>)
 8000a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a90:	089b      	lsrs	r3, r3, #2
 8000a92:	3302      	adds	r3, #2
 8000a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9c:	f003 0303 	and.w	r3, r3, #3
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	220f      	movs	r2, #15
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	4013      	ands	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a40      	ldr	r2, [pc, #256]	; (8000bb4 <HAL_GPIO_Init+0x2c0>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d013      	beq.n	8000ae0 <HAL_GPIO_Init+0x1ec>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a3f      	ldr	r2, [pc, #252]	; (8000bb8 <HAL_GPIO_Init+0x2c4>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d00d      	beq.n	8000adc <HAL_GPIO_Init+0x1e8>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a3e      	ldr	r2, [pc, #248]	; (8000bbc <HAL_GPIO_Init+0x2c8>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d007      	beq.n	8000ad8 <HAL_GPIO_Init+0x1e4>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4a3d      	ldr	r2, [pc, #244]	; (8000bc0 <HAL_GPIO_Init+0x2cc>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d101      	bne.n	8000ad4 <HAL_GPIO_Init+0x1e0>
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	e006      	b.n	8000ae2 <HAL_GPIO_Init+0x1ee>
 8000ad4:	2304      	movs	r3, #4
 8000ad6:	e004      	b.n	8000ae2 <HAL_GPIO_Init+0x1ee>
 8000ad8:	2302      	movs	r3, #2
 8000ada:	e002      	b.n	8000ae2 <HAL_GPIO_Init+0x1ee>
 8000adc:	2301      	movs	r3, #1
 8000ade:	e000      	b.n	8000ae2 <HAL_GPIO_Init+0x1ee>
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ae4:	f002 0203 	and.w	r2, r2, #3
 8000ae8:	0092      	lsls	r2, r2, #2
 8000aea:	4093      	lsls	r3, r2
 8000aec:	68fa      	ldr	r2, [r7, #12]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000af2:	492f      	ldr	r1, [pc, #188]	; (8000bb0 <HAL_GPIO_Init+0x2bc>)
 8000af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af6:	089b      	lsrs	r3, r3, #2
 8000af8:	3302      	adds	r3, #2
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d006      	beq.n	8000b1a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b0c:	4b2d      	ldr	r3, [pc, #180]	; (8000bc4 <HAL_GPIO_Init+0x2d0>)
 8000b0e:	689a      	ldr	r2, [r3, #8]
 8000b10:	492c      	ldr	r1, [pc, #176]	; (8000bc4 <HAL_GPIO_Init+0x2d0>)
 8000b12:	69bb      	ldr	r3, [r7, #24]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	608b      	str	r3, [r1, #8]
 8000b18:	e006      	b.n	8000b28 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b1a:	4b2a      	ldr	r3, [pc, #168]	; (8000bc4 <HAL_GPIO_Init+0x2d0>)
 8000b1c:	689a      	ldr	r2, [r3, #8]
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	43db      	mvns	r3, r3
 8000b22:	4928      	ldr	r1, [pc, #160]	; (8000bc4 <HAL_GPIO_Init+0x2d0>)
 8000b24:	4013      	ands	r3, r2
 8000b26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d006      	beq.n	8000b42 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b34:	4b23      	ldr	r3, [pc, #140]	; (8000bc4 <HAL_GPIO_Init+0x2d0>)
 8000b36:	68da      	ldr	r2, [r3, #12]
 8000b38:	4922      	ldr	r1, [pc, #136]	; (8000bc4 <HAL_GPIO_Init+0x2d0>)
 8000b3a:	69bb      	ldr	r3, [r7, #24]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	60cb      	str	r3, [r1, #12]
 8000b40:	e006      	b.n	8000b50 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b42:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <HAL_GPIO_Init+0x2d0>)
 8000b44:	68da      	ldr	r2, [r3, #12]
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	491e      	ldr	r1, [pc, #120]	; (8000bc4 <HAL_GPIO_Init+0x2d0>)
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d006      	beq.n	8000b6a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b5c:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <HAL_GPIO_Init+0x2d0>)
 8000b5e:	685a      	ldr	r2, [r3, #4]
 8000b60:	4918      	ldr	r1, [pc, #96]	; (8000bc4 <HAL_GPIO_Init+0x2d0>)
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	604b      	str	r3, [r1, #4]
 8000b68:	e006      	b.n	8000b78 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b6a:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <HAL_GPIO_Init+0x2d0>)
 8000b6c:	685a      	ldr	r2, [r3, #4]
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	43db      	mvns	r3, r3
 8000b72:	4914      	ldr	r1, [pc, #80]	; (8000bc4 <HAL_GPIO_Init+0x2d0>)
 8000b74:	4013      	ands	r3, r2
 8000b76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d021      	beq.n	8000bc8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <HAL_GPIO_Init+0x2d0>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	490e      	ldr	r1, [pc, #56]	; (8000bc4 <HAL_GPIO_Init+0x2d0>)
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	600b      	str	r3, [r1, #0]
 8000b90:	e021      	b.n	8000bd6 <HAL_GPIO_Init+0x2e2>
 8000b92:	bf00      	nop
 8000b94:	10320000 	.word	0x10320000
 8000b98:	10310000 	.word	0x10310000
 8000b9c:	10220000 	.word	0x10220000
 8000ba0:	10210000 	.word	0x10210000
 8000ba4:	10120000 	.word	0x10120000
 8000ba8:	10110000 	.word	0x10110000
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	40010000 	.word	0x40010000
 8000bb4:	40010800 	.word	0x40010800
 8000bb8:	40010c00 	.word	0x40010c00
 8000bbc:	40011000 	.word	0x40011000
 8000bc0:	40011400 	.word	0x40011400
 8000bc4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <HAL_GPIO_Init+0x304>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	43db      	mvns	r3, r3
 8000bd0:	4909      	ldr	r1, [pc, #36]	; (8000bf8 <HAL_GPIO_Init+0x304>)
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd8:	3301      	adds	r3, #1
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be2:	fa22 f303 	lsr.w	r3, r2, r3
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f47f ae8e 	bne.w	8000908 <HAL_GPIO_Init+0x14>
  }
}
 8000bec:	bf00      	nop
 8000bee:	bf00      	nop
 8000bf0:	372c      	adds	r7, #44	; 0x2c
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	40010400 	.word	0x40010400

08000bfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	460b      	mov	r3, r1
 8000c06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	689a      	ldr	r2, [r3, #8]
 8000c0c:	887b      	ldrh	r3, [r7, #2]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d002      	beq.n	8000c1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c14:	2301      	movs	r3, #1
 8000c16:	73fb      	strb	r3, [r7, #15]
 8000c18:	e001      	b.n	8000c1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr

08000c2a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
 8000c32:	460b      	mov	r3, r1
 8000c34:	807b      	strh	r3, [r7, #2]
 8000c36:	4613      	mov	r3, r2
 8000c38:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c3a:	787b      	ldrb	r3, [r7, #1]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d003      	beq.n	8000c48 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c40:	887a      	ldrh	r2, [r7, #2]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c46:	e003      	b.n	8000c50 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c48:	887b      	ldrh	r3, [r7, #2]
 8000c4a:	041a      	lsls	r2, r3, #16
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	611a      	str	r2, [r3, #16]
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr

08000c5a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c5c:	b08b      	sub	sp, #44	; 0x2c
 8000c5e:	af06      	add	r7, sp, #24
 8000c60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d101      	bne.n	8000c6c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e0f1      	b.n	8000e50 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d106      	bne.n	8000c86 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f006 f8db 	bl	8006e3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2203      	movs	r2, #3
 8000c8a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f002 f9f2 	bl	800307c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	687e      	ldr	r6, [r7, #4]
 8000ca0:	466d      	mov	r5, sp
 8000ca2:	f106 0410 	add.w	r4, r6, #16
 8000ca6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ca8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000caa:	6823      	ldr	r3, [r4, #0]
 8000cac:	602b      	str	r3, [r5, #0]
 8000cae:	1d33      	adds	r3, r6, #4
 8000cb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cb2:	6838      	ldr	r0, [r7, #0]
 8000cb4:	f002 f9bc 	bl	8003030 <USB_CoreInit>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d005      	beq.n	8000cca <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2202      	movs	r2, #2
 8000cc2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e0c2      	b.n	8000e50 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f002 f9ed 	bl	80030b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	73fb      	strb	r3, [r7, #15]
 8000cda:	e040      	b.n	8000d5e <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	1c5a      	adds	r2, r3, #1
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	4413      	add	r3, r2
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	440b      	add	r3, r1
 8000cec:	3301      	adds	r3, #1
 8000cee:	2201      	movs	r2, #1
 8000cf0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	6879      	ldr	r1, [r7, #4]
 8000cf6:	1c5a      	adds	r2, r3, #1
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	4413      	add	r3, r2
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	440b      	add	r3, r1
 8000d02:	7bfa      	ldrb	r2, [r7, #15]
 8000d04:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
 8000d08:	6879      	ldr	r1, [r7, #4]
 8000d0a:	1c5a      	adds	r2, r3, #1
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	4413      	add	r3, r2
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	440b      	add	r3, r1
 8000d16:	3303      	adds	r3, #3
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d1c:	7bfa      	ldrb	r2, [r7, #15]
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	4613      	mov	r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	00db      	lsls	r3, r3, #3
 8000d28:	440b      	add	r3, r1
 8000d2a:	3338      	adds	r3, #56	; 0x38
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d30:	7bfa      	ldrb	r2, [r7, #15]
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	4613      	mov	r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	440b      	add	r3, r1
 8000d3e:	333c      	adds	r3, #60	; 0x3c
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d44:	7bfa      	ldrb	r2, [r7, #15]
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	4413      	add	r3, r2
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	440b      	add	r3, r1
 8000d52:	3340      	adds	r3, #64	; 0x40
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	73fb      	strb	r3, [r7, #15]
 8000d5e:	7bfa      	ldrb	r2, [r7, #15]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d3b9      	bcc.n	8000cdc <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d68:	2300      	movs	r3, #0
 8000d6a:	73fb      	strb	r3, [r7, #15]
 8000d6c:	e044      	b.n	8000df8 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d6e:	7bfa      	ldrb	r2, [r7, #15]
 8000d70:	6879      	ldr	r1, [r7, #4]
 8000d72:	4613      	mov	r3, r2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	4413      	add	r3, r2
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	440b      	add	r3, r1
 8000d7c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d84:	7bfa      	ldrb	r2, [r7, #15]
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	4413      	add	r3, r2
 8000d8e:	00db      	lsls	r3, r3, #3
 8000d90:	440b      	add	r3, r1
 8000d92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d96:	7bfa      	ldrb	r2, [r7, #15]
 8000d98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d9a:	7bfa      	ldrb	r2, [r7, #15]
 8000d9c:	6879      	ldr	r1, [r7, #4]
 8000d9e:	4613      	mov	r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	4413      	add	r3, r2
 8000da4:	00db      	lsls	r3, r3, #3
 8000da6:	440b      	add	r3, r1
 8000da8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000db0:	7bfa      	ldrb	r2, [r7, #15]
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	4613      	mov	r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	4413      	add	r3, r2
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	440b      	add	r3, r1
 8000dbe:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000dc6:	7bfa      	ldrb	r2, [r7, #15]
 8000dc8:	6879      	ldr	r1, [r7, #4]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ddc:	7bfa      	ldrb	r2, [r7, #15]
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	4613      	mov	r3, r2
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	4413      	add	r3, r2
 8000de6:	00db      	lsls	r3, r3, #3
 8000de8:	440b      	add	r3, r1
 8000dea:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	3301      	adds	r3, #1
 8000df6:	73fb      	strb	r3, [r7, #15]
 8000df8:	7bfa      	ldrb	r2, [r7, #15]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d3b5      	bcc.n	8000d6e <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	687e      	ldr	r6, [r7, #4]
 8000e0a:	466d      	mov	r5, sp
 8000e0c:	f106 0410 	add.w	r4, r6, #16
 8000e10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e14:	6823      	ldr	r3, [r4, #0]
 8000e16:	602b      	str	r3, [r5, #0]
 8000e18:	1d33      	adds	r3, r6, #4
 8000e1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e1c:	6838      	ldr	r0, [r7, #0]
 8000e1e:	f002 f953 	bl	80030c8 <USB_DevInit>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d005      	beq.n	8000e34 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	e00d      	b.n	8000e50 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f004 fbd4 	bl	80055f6 <USB_DevDisconnect>

  return HAL_OK;
 8000e4e:	2300      	movs	r3, #0
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e58 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d101      	bne.n	8000e6e <HAL_PCD_Start+0x16>
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	e016      	b.n	8000e9c <HAL_PCD_Start+0x44>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2201      	movs	r2, #1
 8000e72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f002 f8e8 	bl	8003050 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000e80:	2101      	movs	r1, #1
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f006 fa29 	bl	80072da <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f004 fba8 	bl	80055e2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f004 fbaa 	bl	800560a <USB_ReadInterrupts>
 8000eb6:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f000 fb04 	bl	80014d0 <PCD_EP_ISR_Handler>

    return;
 8000ec8:	e119      	b.n	80010fe <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d013      	beq.n	8000efc <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ee6:	b292      	uxth	r2, r2
 8000ee8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f006 f820 	bl	8006f32 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f000 f905 	bl	8001104 <HAL_PCD_SetAddress>

    return;
 8000efa:	e100      	b.n	80010fe <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d00c      	beq.n	8000f20 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000f18:	b292      	uxth	r2, r2
 8000f1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000f1e:	e0ee      	b.n	80010fe <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d00c      	beq.n	8000f44 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f3c:	b292      	uxth	r2, r2
 8000f3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000f42:	e0dc      	b.n	80010fe <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d027      	beq.n	8000f9e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f022 0204 	bic.w	r2, r2, #4
 8000f60:	b292      	uxth	r2, r2
 8000f62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f022 0208 	bic.w	r2, r2, #8
 8000f78:	b292      	uxth	r2, r2
 8000f7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f006 f810 	bl	8006fa4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f96:	b292      	uxth	r2, r2
 8000f98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000f9c:	e0af      	b.n	80010fe <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f000 8083 	beq.w	80010b0 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8000faa:	2300      	movs	r3, #0
 8000fac:	77fb      	strb	r3, [r7, #31]
 8000fae:	e010      	b.n	8000fd2 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	7ffb      	ldrb	r3, [r7, #31]
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	441a      	add	r2, r3
 8000fbc:	7ffb      	ldrb	r3, [r7, #31]
 8000fbe:	8812      	ldrh	r2, [r2, #0]
 8000fc0:	b292      	uxth	r2, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	3320      	adds	r3, #32
 8000fc6:	443b      	add	r3, r7
 8000fc8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8000fcc:	7ffb      	ldrb	r3, [r7, #31]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	77fb      	strb	r3, [r7, #31]
 8000fd2:	7ffb      	ldrb	r3, [r7, #31]
 8000fd4:	2b07      	cmp	r3, #7
 8000fd6:	d9eb      	bls.n	8000fb0 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f042 0201 	orr.w	r2, r2, #1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 0201 	bic.w	r2, r2, #1
 8001002:	b292      	uxth	r2, r2
 8001004:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001008:	bf00      	nop
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001012:	b29b      	uxth	r3, r3
 8001014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001018:	2b00      	cmp	r3, #0
 800101a:	d0f6      	beq.n	800100a <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001024:	b29a      	uxth	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800102e:	b292      	uxth	r2, r2
 8001030:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001034:	2300      	movs	r3, #0
 8001036:	77fb      	strb	r3, [r7, #31]
 8001038:	e00f      	b.n	800105a <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800103a:	7ffb      	ldrb	r3, [r7, #31]
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	6812      	ldr	r2, [r2, #0]
 8001040:	4611      	mov	r1, r2
 8001042:	7ffa      	ldrb	r2, [r7, #31]
 8001044:	0092      	lsls	r2, r2, #2
 8001046:	440a      	add	r2, r1
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	3320      	adds	r3, #32
 800104c:	443b      	add	r3, r7
 800104e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001052:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001054:	7ffb      	ldrb	r3, [r7, #31]
 8001056:	3301      	adds	r3, #1
 8001058:	77fb      	strb	r3, [r7, #31]
 800105a:	7ffb      	ldrb	r3, [r7, #31]
 800105c:	2b07      	cmp	r3, #7
 800105e:	d9ec      	bls.n	800103a <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001068:	b29a      	uxth	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f042 0208 	orr.w	r2, r2, #8
 8001072:	b292      	uxth	r2, r2
 8001074:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001080:	b29a      	uxth	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800108a:	b292      	uxth	r2, r2
 800108c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001098:	b29a      	uxth	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f042 0204 	orr.w	r2, r2, #4
 80010a2:	b292      	uxth	r2, r2
 80010a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f005 ff61 	bl	8006f70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80010ae:	e026      	b.n	80010fe <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d00f      	beq.n	80010da <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010cc:	b292      	uxth	r2, r2
 80010ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f005 ff1f 	bl	8006f16 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80010d8:	e011      	b.n	80010fe <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d00c      	beq.n	80010fe <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010f6:	b292      	uxth	r2, r2
 80010f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80010fc:	bf00      	nop
  }
}
 80010fe:	3720      	adds	r7, #32
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001116:	2b01      	cmp	r3, #1
 8001118:	d101      	bne.n	800111e <HAL_PCD_SetAddress+0x1a>
 800111a:	2302      	movs	r3, #2
 800111c:	e013      	b.n	8001146 <HAL_PCD_SetAddress+0x42>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2201      	movs	r2, #1
 8001122:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	78fa      	ldrb	r2, [r7, #3]
 800112a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	78fa      	ldrb	r2, [r7, #3]
 8001134:	4611      	mov	r1, r2
 8001136:	4618      	mov	r0, r3
 8001138:	f004 fa40 	bl	80055bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b084      	sub	sp, #16
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	4608      	mov	r0, r1
 8001158:	4611      	mov	r1, r2
 800115a:	461a      	mov	r2, r3
 800115c:	4603      	mov	r3, r0
 800115e:	70fb      	strb	r3, [r7, #3]
 8001160:	460b      	mov	r3, r1
 8001162:	803b      	strh	r3, [r7, #0]
 8001164:	4613      	mov	r3, r2
 8001166:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001168:	2300      	movs	r3, #0
 800116a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800116c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001170:	2b00      	cmp	r3, #0
 8001172:	da0e      	bge.n	8001192 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001174:	78fb      	ldrb	r3, [r7, #3]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	1c5a      	adds	r2, r3, #1
 800117c:	4613      	mov	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	4413      	add	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2201      	movs	r2, #1
 800118e:	705a      	strb	r2, [r3, #1]
 8001190:	e00e      	b.n	80011b0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001192:	78fb      	ldrb	r3, [r7, #3]
 8001194:	f003 0207 	and.w	r2, r3, #7
 8001198:	4613      	mov	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	4413      	add	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2200      	movs	r2, #0
 80011ae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80011b0:	78fb      	ldrb	r3, [r7, #3]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80011bc:	883a      	ldrh	r2, [r7, #0]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	78ba      	ldrb	r2, [r7, #2]
 80011c6:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80011c8:	78bb      	ldrb	r3, [r7, #2]
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d102      	bne.n	80011d4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2200      	movs	r2, #0
 80011d2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d101      	bne.n	80011e2 <HAL_PCD_EP_Open+0x94>
 80011de:	2302      	movs	r3, #2
 80011e0:	e00e      	b.n	8001200 <HAL_PCD_EP_Open+0xb2>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2201      	movs	r2, #1
 80011e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	68f9      	ldr	r1, [r7, #12]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f001 ff89 	bl	8003108 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80011fe:	7afb      	ldrb	r3, [r7, #11]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001214:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001218:	2b00      	cmp	r3, #0
 800121a:	da0e      	bge.n	800123a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800121c:	78fb      	ldrb	r3, [r7, #3]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	1c5a      	adds	r2, r3, #1
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	4413      	add	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2201      	movs	r2, #1
 8001236:	705a      	strb	r2, [r3, #1]
 8001238:	e00e      	b.n	8001258 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800123a:	78fb      	ldrb	r3, [r7, #3]
 800123c:	f003 0207 	and.w	r2, r3, #7
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	4413      	add	r3, r2
 8001250:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2200      	movs	r2, #0
 8001256:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001258:	78fb      	ldrb	r3, [r7, #3]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	b2da      	uxtb	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800126a:	2b01      	cmp	r3, #1
 800126c:	d101      	bne.n	8001272 <HAL_PCD_EP_Close+0x6a>
 800126e:	2302      	movs	r3, #2
 8001270:	e00e      	b.n	8001290 <HAL_PCD_EP_Close+0x88>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2201      	movs	r2, #1
 8001276:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68f9      	ldr	r1, [r7, #12]
 8001280:	4618      	mov	r0, r3
 8001282:	f002 fb01 	bl	8003888 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	460b      	mov	r3, r1
 80012a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012a8:	7afb      	ldrb	r3, [r7, #11]
 80012aa:	f003 0207 	and.w	r2, r3, #7
 80012ae:	4613      	mov	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	4413      	add	r3, r2
 80012be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	2200      	movs	r2, #0
 80012d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012d8:	7afb      	ldrb	r3, [r7, #11]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6979      	ldr	r1, [r7, #20]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f002 fcb8 	bl	8003c60 <USB_EPStartXfer>

  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	60f8      	str	r0, [r7, #12]
 8001302:	607a      	str	r2, [r7, #4]
 8001304:	603b      	str	r3, [r7, #0]
 8001306:	460b      	mov	r3, r1
 8001308:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800130a:	7afb      	ldrb	r3, [r7, #11]
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	1c5a      	adds	r2, r3, #1
 8001312:	4613      	mov	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	4413      	add	r3, r2
 800131e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	2201      	movs	r2, #1
 8001330:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	2200      	movs	r2, #0
 800133e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	2201      	movs	r2, #1
 8001344:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001346:	7afb      	ldrb	r3, [r7, #11]
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	b2da      	uxtb	r2, r3
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6979      	ldr	r1, [r7, #20]
 8001358:	4618      	mov	r0, r3
 800135a:	f002 fc81 	bl	8003c60 <USB_EPStartXfer>

  return HAL_OK;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001374:	78fb      	ldrb	r3, [r7, #3]
 8001376:	f003 0207 	and.w	r2, r3, #7
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	429a      	cmp	r2, r3
 8001380:	d901      	bls.n	8001386 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e04c      	b.n	8001420 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001386:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800138a:	2b00      	cmp	r3, #0
 800138c:	da0e      	bge.n	80013ac <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800138e:	78fb      	ldrb	r3, [r7, #3]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	1c5a      	adds	r2, r3, #1
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2201      	movs	r2, #1
 80013a8:	705a      	strb	r2, [r3, #1]
 80013aa:	e00c      	b.n	80013c6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80013ac:	78fa      	ldrb	r2, [r7, #3]
 80013ae:	4613      	mov	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2200      	movs	r2, #0
 80013c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2201      	movs	r2, #1
 80013ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013cc:	78fb      	ldrb	r3, [r7, #3]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d101      	bne.n	80013e6 <HAL_PCD_EP_SetStall+0x7e>
 80013e2:	2302      	movs	r3, #2
 80013e4:	e01c      	b.n	8001420 <HAL_PCD_EP_SetStall+0xb8>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2201      	movs	r2, #1
 80013ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	68f9      	ldr	r1, [r7, #12]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f003 ffe4 	bl	80053c2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80013fa:	78fb      	ldrb	r3, [r7, #3]
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	2b00      	cmp	r3, #0
 8001402:	d108      	bne.n	8001416 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800140e:	4619      	mov	r1, r3
 8001410:	4610      	mov	r0, r2
 8001412:	f004 f909 	bl	8005628 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001434:	78fb      	ldrb	r3, [r7, #3]
 8001436:	f003 020f 	and.w	r2, r3, #15
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	429a      	cmp	r2, r3
 8001440:	d901      	bls.n	8001446 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e040      	b.n	80014c8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001446:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800144a:	2b00      	cmp	r3, #0
 800144c:	da0e      	bge.n	800146c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800144e:	78fb      	ldrb	r3, [r7, #3]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	1c5a      	adds	r2, r3, #1
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2201      	movs	r2, #1
 8001468:	705a      	strb	r2, [r3, #1]
 800146a:	e00e      	b.n	800148a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	f003 0207 	and.w	r2, r3, #7
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2200      	movs	r2, #0
 8001488:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2200      	movs	r2, #0
 800148e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001490:	78fb      	ldrb	r3, [r7, #3]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	b2da      	uxtb	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d101      	bne.n	80014aa <HAL_PCD_EP_ClrStall+0x82>
 80014a6:	2302      	movs	r3, #2
 80014a8:	e00e      	b.n	80014c8 <HAL_PCD_EP_ClrStall+0xa0>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2201      	movs	r2, #1
 80014ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68f9      	ldr	r1, [r7, #12]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f003 ffd2 	bl	8005462 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b096      	sub	sp, #88	; 0x58
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80014d8:	e3bf      	b.n	8001c5a <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80014e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	f003 030f 	and.w	r3, r3, #15
 80014f0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80014f4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f040 8179 	bne.w	80017f0 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80014fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001502:	f003 0310 	and.w	r3, r3, #16
 8001506:	2b00      	cmp	r3, #0
 8001508:	d152      	bne.n	80015b0 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	b29b      	uxth	r3, r3
 8001512:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800151a:	81fb      	strh	r3, [r7, #14]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	89fb      	ldrh	r3, [r7, #14]
 8001522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800152a:	b29b      	uxth	r3, r3
 800152c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3328      	adds	r3, #40	; 0x28
 8001532:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800153c:	b29b      	uxth	r3, r3
 800153e:	461a      	mov	r2, r3
 8001540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	4413      	add	r3, r2
 8001548:	3302      	adds	r3, #2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	6812      	ldr	r2, [r2, #0]
 8001550:	4413      	add	r3, r2
 8001552:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800155c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800155e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001562:	695a      	ldr	r2, [r3, #20]
 8001564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	441a      	add	r2, r3
 800156a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800156c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800156e:	2100      	movs	r1, #0
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f005 fcb6 	bl	8006ee2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	f000 836b 	beq.w	8001c5a <PCD_EP_ISR_Handler+0x78a>
 8001584:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	2b00      	cmp	r3, #0
 800158a:	f040 8366 	bne.w	8001c5a <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001594:	b2db      	uxtb	r3, r3
 8001596:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800159a:	b2da      	uxtb	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	b292      	uxth	r2, r2
 80015a2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80015ae:	e354      	b.n	8001c5a <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015b6:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80015c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80015c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d034      	beq.n	8001638 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	461a      	mov	r2, r3
 80015da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	4413      	add	r3, r2
 80015e2:	3306      	adds	r3, #6
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80015f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015f8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6818      	ldr	r0, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001606:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800160a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800160c:	b29b      	uxth	r3, r3
 800160e:	f004 f85b 	bl	80056c8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	b29a      	uxth	r2, r3
 800161a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800161e:	4013      	ands	r3, r2
 8001620:	823b      	strh	r3, [r7, #16]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	8a3a      	ldrh	r2, [r7, #16]
 8001628:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800162c:	b292      	uxth	r2, r2
 800162e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f005 fc29 	bl	8006e88 <HAL_PCD_SetupStageCallback>
 8001636:	e310      	b.n	8001c5a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001638:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800163c:	2b00      	cmp	r3, #0
 800163e:	f280 830c 	bge.w	8001c5a <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	b29a      	uxth	r2, r3
 800164a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800164e:	4013      	ands	r3, r2
 8001650:	83fb      	strh	r3, [r7, #30]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	8bfa      	ldrh	r2, [r7, #30]
 8001658:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800165c:	b292      	uxth	r2, r2
 800165e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001668:	b29b      	uxth	r3, r3
 800166a:	461a      	mov	r2, r3
 800166c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	4413      	add	r3, r2
 8001674:	3306      	adds	r3, #6
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	4413      	add	r3, r2
 800167e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800168a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800168c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d019      	beq.n	80016c8 <PCD_EP_ISR_Handler+0x1f8>
 8001694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d015      	beq.n	80016c8 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6818      	ldr	r0, [r3, #0]
 80016a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016a2:	6959      	ldr	r1, [r3, #20]
 80016a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016a6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80016a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016aa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	f004 f80b 	bl	80056c8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80016b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	441a      	add	r2, r3
 80016bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016be:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80016c0:	2100      	movs	r1, #0
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f005 fbf2 	bl	8006eac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80016d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80016d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f040 82bd 	bne.w	8001c5a <PCD_EP_ISR_Handler+0x78a>
 80016e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80016e4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80016e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80016ec:	f000 82b5 	beq.w	8001c5a <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	61bb      	str	r3, [r7, #24]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016fe:	b29b      	uxth	r3, r3
 8001700:	461a      	mov	r2, r3
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	4413      	add	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	b29b      	uxth	r3, r3
 8001716:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800171a:	b29a      	uxth	r2, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	801a      	strh	r2, [r3, #0]
 8001720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	2b3e      	cmp	r3, #62	; 0x3e
 8001726:	d91d      	bls.n	8001764 <PCD_EP_ISR_Handler+0x294>
 8001728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	095b      	lsrs	r3, r3, #5
 800172e:	647b      	str	r3, [r7, #68]	; 0x44
 8001730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	f003 031f 	and.w	r3, r3, #31
 8001738:	2b00      	cmp	r3, #0
 800173a:	d102      	bne.n	8001742 <PCD_EP_ISR_Handler+0x272>
 800173c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800173e:	3b01      	subs	r3, #1
 8001740:	647b      	str	r3, [r7, #68]	; 0x44
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	b29a      	uxth	r2, r3
 8001748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800174a:	b29b      	uxth	r3, r3
 800174c:	029b      	lsls	r3, r3, #10
 800174e:	b29b      	uxth	r3, r3
 8001750:	4313      	orrs	r3, r2
 8001752:	b29b      	uxth	r3, r3
 8001754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800175c:	b29a      	uxth	r2, r3
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	801a      	strh	r2, [r3, #0]
 8001762:	e026      	b.n	80017b2 <PCD_EP_ISR_Handler+0x2e2>
 8001764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10a      	bne.n	8001782 <PCD_EP_ISR_Handler+0x2b2>
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	b29b      	uxth	r3, r3
 8001772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800177a:	b29a      	uxth	r2, r3
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	801a      	strh	r2, [r3, #0]
 8001780:	e017      	b.n	80017b2 <PCD_EP_ISR_Handler+0x2e2>
 8001782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	085b      	lsrs	r3, r3, #1
 8001788:	647b      	str	r3, [r7, #68]	; 0x44
 800178a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b00      	cmp	r3, #0
 8001794:	d002      	beq.n	800179c <PCD_EP_ISR_Handler+0x2cc>
 8001796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001798:	3301      	adds	r3, #1
 800179a:	647b      	str	r3, [r7, #68]	; 0x44
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	029b      	lsls	r3, r3, #10
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	4313      	orrs	r3, r2
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017c2:	827b      	strh	r3, [r7, #18]
 80017c4:	8a7b      	ldrh	r3, [r7, #18]
 80017c6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80017ca:	827b      	strh	r3, [r7, #18]
 80017cc:	8a7b      	ldrh	r3, [r7, #18]
 80017ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80017d2:	827b      	strh	r3, [r7, #18]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	8a7b      	ldrh	r3, [r7, #18]
 80017da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80017de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80017e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	8013      	strh	r3, [r2, #0]
 80017ee:	e234      	b.n	8001c5a <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001804:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001808:	2b00      	cmp	r3, #0
 800180a:	f280 80fc 	bge.w	8001a06 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	b29a      	uxth	r2, r3
 8001820:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001824:	4013      	ands	r3, r2
 8001826:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800183c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001840:	b292      	uxth	r2, r2
 8001842:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001844:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001848:	4613      	mov	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	4413      	add	r3, r2
 8001858:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800185a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800185c:	7b1b      	ldrb	r3, [r3, #12]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d125      	bne.n	80018ae <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800186a:	b29b      	uxth	r3, r3
 800186c:	461a      	mov	r2, r3
 800186e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	4413      	add	r3, r2
 8001876:	3306      	adds	r3, #6
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	6812      	ldr	r2, [r2, #0]
 800187e:	4413      	add	r3, r2
 8001880:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800188a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800188e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 8092 	beq.w	80019bc <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6818      	ldr	r0, [r3, #0]
 800189c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800189e:	6959      	ldr	r1, [r3, #20]
 80018a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018a2:	88da      	ldrh	r2, [r3, #6]
 80018a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80018a8:	f003 ff0e 	bl	80056c8 <USB_ReadPMA>
 80018ac:	e086      	b.n	80019bc <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80018ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018b0:	78db      	ldrb	r3, [r3, #3]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d10a      	bne.n	80018cc <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80018b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80018ba:	461a      	mov	r2, r3
 80018bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 f9d9 	bl	8001c76 <HAL_PCD_EP_DB_Receive>
 80018c4:	4603      	mov	r3, r0
 80018c6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80018ca:	e077      	b.n	80019bc <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	b29b      	uxth	r3, r3
 80018de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80018e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018e6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	461a      	mov	r2, r3
 80018f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	441a      	add	r2, r3
 80018f8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80018fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001908:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800190c:	b29b      	uxth	r3, r3
 800190e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	b29b      	uxth	r3, r3
 8001922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d024      	beq.n	8001974 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001932:	b29b      	uxth	r3, r3
 8001934:	461a      	mov	r2, r3
 8001936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	4413      	add	r3, r2
 800193e:	3302      	adds	r3, #2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6812      	ldr	r2, [r2, #0]
 8001946:	4413      	add	r3, r2
 8001948:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001952:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001956:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800195a:	2b00      	cmp	r3, #0
 800195c:	d02e      	beq.n	80019bc <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001964:	6959      	ldr	r1, [r3, #20]
 8001966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001968:	891a      	ldrh	r2, [r3, #8]
 800196a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800196e:	f003 feab 	bl	80056c8 <USB_ReadPMA>
 8001972:	e023      	b.n	80019bc <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800197c:	b29b      	uxth	r3, r3
 800197e:	461a      	mov	r2, r3
 8001980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	4413      	add	r3, r2
 8001988:	3306      	adds	r3, #6
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6812      	ldr	r2, [r2, #0]
 8001990:	4413      	add	r3, r2
 8001992:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800199c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80019a0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d009      	beq.n	80019bc <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6818      	ldr	r0, [r3, #0]
 80019ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ae:	6959      	ldr	r1, [r3, #20]
 80019b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019b2:	895a      	ldrh	r2, [r3, #10]
 80019b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80019b8:	f003 fe86 	bl	80056c8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80019bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019be:	69da      	ldr	r2, [r3, #28]
 80019c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80019c4:	441a      	add	r2, r3
 80019c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80019ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019cc:	695a      	ldr	r2, [r3, #20]
 80019ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80019d2:	441a      	add	r2, r3
 80019d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80019d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d005      	beq.n	80019ec <PCD_EP_ISR_Handler+0x51c>
 80019e0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80019e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d206      	bcs.n	80019fa <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80019ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	4619      	mov	r1, r3
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f005 fa5a 	bl	8006eac <HAL_PCD_DataOutStageCallback>
 80019f8:	e005      	b.n	8001a06 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001a00:	4618      	mov	r0, r3
 8001a02:	f002 f92d 	bl	8003c60 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001a06:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 8123 	beq.w	8001c5a <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001a14:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a18:	1c5a      	adds	r2, r3, #1
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a42:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	441a      	add	r2, r3
 8001a54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a66:	78db      	ldrb	r3, [r3, #3]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	f040 80a2 	bne.w	8001bb2 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a76:	7b1b      	ldrb	r3, [r3, #12]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 8093 	beq.w	8001ba4 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001a7e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d046      	beq.n	8001b18 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a8c:	785b      	ldrb	r3, [r3, #1]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d126      	bne.n	8001ae0 <PCD_EP_ISR_Handler+0x610>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	4413      	add	r3, r2
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	011a      	lsls	r2, r3, #4
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	4413      	add	r3, r2
 8001ab4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001ab8:	623b      	str	r3, [r7, #32]
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	801a      	strh	r2, [r3, #0]
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ad4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	6a3b      	ldr	r3, [r7, #32]
 8001adc:	801a      	strh	r2, [r3, #0]
 8001ade:	e061      	b.n	8001ba4 <PCD_EP_ISR_Handler+0x6d4>
 8001ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ae2:	785b      	ldrb	r3, [r3, #1]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d15d      	bne.n	8001ba4 <PCD_EP_ISR_Handler+0x6d4>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	461a      	mov	r2, r3
 8001afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afc:	4413      	add	r3, r2
 8001afe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	011a      	lsls	r2, r3, #4
 8001b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b08:	4413      	add	r3, r2
 8001b0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001b0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b12:	2200      	movs	r2, #0
 8001b14:	801a      	strh	r2, [r3, #0]
 8001b16:	e045      	b.n	8001ba4 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b20:	785b      	ldrb	r3, [r3, #1]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d126      	bne.n	8001b74 <PCD_EP_ISR_Handler+0x6a4>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	637b      	str	r3, [r7, #52]	; 0x34
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	461a      	mov	r2, r3
 8001b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b3a:	4413      	add	r3, r2
 8001b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	011a      	lsls	r2, r3, #4
 8001b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b46:	4413      	add	r3, r2
 8001b48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001b4c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b5c:	801a      	strh	r2, [r3, #0]
 8001b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b60:	881b      	ldrh	r3, [r3, #0]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b70:	801a      	strh	r2, [r3, #0]
 8001b72:	e017      	b.n	8001ba4 <PCD_EP_ISR_Handler+0x6d4>
 8001b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b76:	785b      	ldrb	r3, [r3, #1]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d113      	bne.n	8001ba4 <PCD_EP_ISR_Handler+0x6d4>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	461a      	mov	r2, r3
 8001b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b8a:	4413      	add	r3, r2
 8001b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	011a      	lsls	r2, r3, #4
 8001b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b96:	4413      	add	r3, r2
 8001b98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001b9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f005 f999 	bl	8006ee2 <HAL_PCD_DataInStageCallback>
 8001bb0:	e053      	b.n	8001c5a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001bb2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d146      	bne.n	8001c4c <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	461a      	mov	r2, r3
 8001bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	4413      	add	r3, r2
 8001bd2:	3302      	adds	r3, #2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6812      	ldr	r2, [r2, #0]
 8001bda:	4413      	add	r3, r2
 8001bdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001be6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bec:	699a      	ldr	r2, [r3, #24]
 8001bee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d907      	bls.n	8001c06 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bf8:	699a      	ldr	r2, [r3, #24]
 8001bfa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001bfe:	1ad2      	subs	r2, r2, r3
 8001c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c02:	619a      	str	r2, [r3, #24]
 8001c04:	e002      	b.n	8001c0c <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d106      	bne.n	8001c22 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f005 f961 	bl	8006ee2 <HAL_PCD_DataInStageCallback>
 8001c20:	e01b      	b.n	8001c5a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c24:	695a      	ldr	r2, [r3, #20]
 8001c26:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001c2a:	441a      	add	r2, r3
 8001c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c2e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001c30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c32:	69da      	ldr	r2, [r3, #28]
 8001c34:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001c38:	441a      	add	r2, r3
 8001c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c3c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c44:	4618      	mov	r0, r3
 8001c46:	f002 f80b 	bl	8003c60 <USB_EPStartXfer>
 8001c4a:	e006      	b.n	8001c5a <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001c4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c50:	461a      	mov	r2, r3
 8001c52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f91b 	bl	8001e90 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	b21b      	sxth	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f6ff ac37 	blt.w	80014da <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3758      	adds	r7, #88	; 0x58
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b088      	sub	sp, #32
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	60f8      	str	r0, [r7, #12]
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	4613      	mov	r3, r2
 8001c82:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001c84:	88fb      	ldrh	r3, [r7, #6]
 8001c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d07e      	beq.n	8001d8c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	461a      	mov	r2, r3
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	6812      	ldr	r2, [r2, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cb0:	881b      	ldrh	r3, [r3, #0]
 8001cb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cb6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	699a      	ldr	r2, [r3, #24]
 8001cbc:	8b7b      	ldrh	r3, [r7, #26]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d306      	bcc.n	8001cd0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	699a      	ldr	r2, [r3, #24]
 8001cc6:	8b7b      	ldrh	r3, [r7, #26]
 8001cc8:	1ad2      	subs	r2, r2, r3
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	619a      	str	r2, [r3, #24]
 8001cce:	e002      	b.n	8001cd6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d123      	bne.n	8001d26 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cf8:	833b      	strh	r3, [r7, #24]
 8001cfa:	8b3b      	ldrh	r3, [r7, #24]
 8001cfc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001d00:	833b      	strh	r3, [r7, #24]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	441a      	add	r2, r3
 8001d10:	8b3b      	ldrh	r3, [r7, #24]
 8001d12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d26:	88fb      	ldrh	r3, [r7, #6]
 8001d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d01f      	beq.n	8001d70 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	461a      	mov	r2, r3
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d4a:	82fb      	strh	r3, [r7, #22]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	441a      	add	r2, r3
 8001d5a:	8afb      	ldrh	r3, [r7, #22]
 8001d5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001d70:	8b7b      	ldrh	r3, [r7, #26]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 8087 	beq.w	8001e86 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6818      	ldr	r0, [r3, #0]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	6959      	ldr	r1, [r3, #20]
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	891a      	ldrh	r2, [r3, #8]
 8001d84:	8b7b      	ldrh	r3, [r7, #26]
 8001d86:	f003 fc9f 	bl	80056c8 <USB_ReadPMA>
 8001d8a:	e07c      	b.n	8001e86 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	461a      	mov	r2, r3
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4413      	add	r3, r2
 8001da0:	3306      	adds	r3, #6
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001db4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	699a      	ldr	r2, [r3, #24]
 8001dba:	8b7b      	ldrh	r3, [r7, #26]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d306      	bcc.n	8001dce <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	699a      	ldr	r2, [r3, #24]
 8001dc4:	8b7b      	ldrh	r3, [r7, #26]
 8001dc6:	1ad2      	subs	r2, r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	619a      	str	r2, [r3, #24]
 8001dcc:	e002      	b.n	8001dd4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d123      	bne.n	8001e24 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001df6:	83fb      	strh	r3, [r7, #30]
 8001df8:	8bfb      	ldrh	r3, [r7, #30]
 8001dfa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001dfe:	83fb      	strh	r3, [r7, #30]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	441a      	add	r2, r3
 8001e0e:	8bfb      	ldrh	r3, [r7, #30]
 8001e10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001e24:	88fb      	ldrh	r3, [r7, #6]
 8001e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d11f      	bne.n	8001e6e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	461a      	mov	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e48:	83bb      	strh	r3, [r7, #28]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	441a      	add	r2, r3
 8001e58:	8bbb      	ldrh	r3, [r7, #28]
 8001e5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001e6e:	8b7b      	ldrh	r3, [r7, #26]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d008      	beq.n	8001e86 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6818      	ldr	r0, [r3, #0]
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	6959      	ldr	r1, [r3, #20]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	895a      	ldrh	r2, [r3, #10]
 8001e80:	8b7b      	ldrh	r3, [r7, #26]
 8001e82:	f003 fc21 	bl	80056c8 <USB_ReadPMA>
    }
  }

  return count;
 8001e86:	8b7b      	ldrh	r3, [r7, #26]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3720      	adds	r7, #32
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b0a4      	sub	sp, #144	; 0x90
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e9e:	88fb      	ldrh	r3, [r7, #6]
 8001ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 81dd 	beq.w	8002264 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3302      	adds	r3, #2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ed2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	699a      	ldr	r2, [r3, #24]
 8001eda:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d907      	bls.n	8001ef2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	699a      	ldr	r2, [r3, #24]
 8001ee6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001eea:	1ad2      	subs	r2, r2, r3
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	619a      	str	r2, [r3, #24]
 8001ef0:	e002      	b.n	8001ef8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f040 80b9 	bne.w	8002074 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	785b      	ldrb	r3, [r3, #1]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d126      	bne.n	8001f58 <HAL_PCD_EP_DB_Transmit+0xc8>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1e:	4413      	add	r3, r2
 8001f20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	011a      	lsls	r2, r3, #4
 8001f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f2a:	4413      	add	r3, r2
 8001f2c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f40:	801a      	strh	r2, [r3, #0]
 8001f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f54:	801a      	strh	r2, [r3, #0]
 8001f56:	e01a      	b.n	8001f8e <HAL_PCD_EP_DB_Transmit+0xfe>
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	785b      	ldrb	r3, [r3, #1]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d116      	bne.n	8001f8e <HAL_PCD_EP_DB_Transmit+0xfe>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	637b      	str	r3, [r7, #52]	; 0x34
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	461a      	mov	r2, r3
 8001f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f74:	4413      	add	r3, r2
 8001f76:	637b      	str	r3, [r7, #52]	; 0x34
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	011a      	lsls	r2, r3, #4
 8001f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f80:	4413      	add	r3, r2
 8001f82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001f86:	633b      	str	r3, [r7, #48]	; 0x30
 8001f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	785b      	ldrb	r3, [r3, #1]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d126      	bne.n	8001fea <HAL_PCD_EP_DB_Transmit+0x15a>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	61fb      	str	r3, [r7, #28]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	61fb      	str	r3, [r7, #28]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	011a      	lsls	r2, r3, #4
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001fc2:	61bb      	str	r3, [r7, #24]
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	801a      	strh	r2, [r3, #0]
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	801a      	strh	r2, [r3, #0]
 8001fe8:	e017      	b.n	800201a <HAL_PCD_EP_DB_Transmit+0x18a>
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	785b      	ldrb	r3, [r3, #1]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d113      	bne.n	800201a <HAL_PCD_EP_DB_Transmit+0x18a>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	4413      	add	r3, r2
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	011a      	lsls	r2, r3, #4
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	4413      	add	r3, r2
 800200e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002012:	623b      	str	r3, [r7, #32]
 8002014:	6a3b      	ldr	r3, [r7, #32]
 8002016:	2200      	movs	r2, #0
 8002018:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	4619      	mov	r1, r3
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f004 ff5e 	bl	8006ee2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002026:	88fb      	ldrh	r3, [r7, #6]
 8002028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 82fc 	beq.w	800262a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	b29b      	uxth	r3, r3
 8002044:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800204c:	82fb      	strh	r3, [r7, #22]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	441a      	add	r2, r3
 800205c:	8afb      	ldrh	r3, [r7, #22]
 800205e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002062:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002066:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800206a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800206e:	b29b      	uxth	r3, r3
 8002070:	8013      	strh	r3, [r2, #0]
 8002072:	e2da      	b.n	800262a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002074:	88fb      	ldrh	r3, [r7, #6]
 8002076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d021      	beq.n	80020c2 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	b29b      	uxth	r3, r3
 8002090:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002098:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	441a      	add	r2, r3
 80020aa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80020ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020be:	b29b      	uxth	r3, r3
 80020c0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	f040 82ae 	bne.w	800262a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	695a      	ldr	r2, [r3, #20]
 80020d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80020d6:	441a      	add	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	69da      	ldr	r2, [r3, #28]
 80020e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80020e4:	441a      	add	r2, r3
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	6a1a      	ldr	r2, [r3, #32]
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d30b      	bcc.n	800210e <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	6a1a      	ldr	r2, [r3, #32]
 8002102:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002106:	1ad2      	subs	r2, r2, r3
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	621a      	str	r2, [r3, #32]
 800210c:	e017      	b.n	800213e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d108      	bne.n	8002128 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002116:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800211a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002126:	e00a      	b.n	800213e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	2200      	movs	r2, #0
 800213c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	785b      	ldrb	r3, [r3, #1]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d165      	bne.n	8002212 <HAL_PCD_EP_DB_Transmit+0x382>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002154:	b29b      	uxth	r3, r3
 8002156:	461a      	mov	r2, r3
 8002158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800215a:	4413      	add	r3, r2
 800215c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	011a      	lsls	r2, r3, #4
 8002164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002166:	4413      	add	r3, r2
 8002168:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800216c:	63bb      	str	r3, [r7, #56]	; 0x38
 800216e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	b29b      	uxth	r3, r3
 8002174:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002178:	b29a      	uxth	r2, r3
 800217a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800217c:	801a      	strh	r2, [r3, #0]
 800217e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002182:	2b3e      	cmp	r3, #62	; 0x3e
 8002184:	d91d      	bls.n	80021c2 <HAL_PCD_EP_DB_Transmit+0x332>
 8002186:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800218a:	095b      	lsrs	r3, r3, #5
 800218c:	64bb      	str	r3, [r7, #72]	; 0x48
 800218e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002192:	f003 031f 	and.w	r3, r3, #31
 8002196:	2b00      	cmp	r3, #0
 8002198:	d102      	bne.n	80021a0 <HAL_PCD_EP_DB_Transmit+0x310>
 800219a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800219c:	3b01      	subs	r3, #1
 800219e:	64bb      	str	r3, [r7, #72]	; 0x48
 80021a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a2:	881b      	ldrh	r3, [r3, #0]
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	029b      	lsls	r3, r3, #10
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	4313      	orrs	r3, r2
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021be:	801a      	strh	r2, [r3, #0]
 80021c0:	e044      	b.n	800224c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80021c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10a      	bne.n	80021e0 <HAL_PCD_EP_DB_Transmit+0x350>
 80021ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021d8:	b29a      	uxth	r2, r3
 80021da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021dc:	801a      	strh	r2, [r3, #0]
 80021de:	e035      	b.n	800224c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80021e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021e4:	085b      	lsrs	r3, r3, #1
 80021e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80021e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d002      	beq.n	80021fa <HAL_PCD_EP_DB_Transmit+0x36a>
 80021f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021f6:	3301      	adds	r3, #1
 80021f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80021fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	b29a      	uxth	r2, r3
 8002200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002202:	b29b      	uxth	r3, r3
 8002204:	029b      	lsls	r3, r3, #10
 8002206:	b29b      	uxth	r3, r3
 8002208:	4313      	orrs	r3, r2
 800220a:	b29a      	uxth	r2, r3
 800220c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800220e:	801a      	strh	r2, [r3, #0]
 8002210:	e01c      	b.n	800224c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	785b      	ldrb	r3, [r3, #1]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d118      	bne.n	800224c <HAL_PCD_EP_DB_Transmit+0x3bc>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	647b      	str	r3, [r7, #68]	; 0x44
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002228:	b29b      	uxth	r3, r3
 800222a:	461a      	mov	r2, r3
 800222c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800222e:	4413      	add	r3, r2
 8002230:	647b      	str	r3, [r7, #68]	; 0x44
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	011a      	lsls	r2, r3, #4
 8002238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800223a:	4413      	add	r3, r2
 800223c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002240:	643b      	str	r3, [r7, #64]	; 0x40
 8002242:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002246:	b29a      	uxth	r2, r3
 8002248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800224a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	6959      	ldr	r1, [r3, #20]
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	891a      	ldrh	r2, [r3, #8]
 8002258:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800225c:	b29b      	uxth	r3, r3
 800225e:	f003 f9ee 	bl	800563e <USB_WritePMA>
 8002262:	e1e2      	b.n	800262a <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800226c:	b29b      	uxth	r3, r3
 800226e:	461a      	mov	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	4413      	add	r3, r2
 8002278:	3306      	adds	r3, #6
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	4413      	add	r3, r2
 8002282:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800228c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	699a      	ldr	r2, [r3, #24]
 8002294:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002298:	429a      	cmp	r2, r3
 800229a:	d307      	bcc.n	80022ac <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	699a      	ldr	r2, [r3, #24]
 80022a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80022a4:	1ad2      	subs	r2, r2, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	619a      	str	r2, [r3, #24]
 80022aa:	e002      	b.n	80022b2 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2200      	movs	r2, #0
 80022b0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f040 80c0 	bne.w	800243c <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	785b      	ldrb	r3, [r3, #1]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d126      	bne.n	8002312 <HAL_PCD_EP_DB_Transmit+0x482>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	461a      	mov	r2, r3
 80022d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022d8:	4413      	add	r3, r2
 80022da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	011a      	lsls	r2, r3, #4
 80022e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022e4:	4413      	add	r3, r2
 80022e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80022ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80022ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022fa:	801a      	strh	r2, [r3, #0]
 80022fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	b29b      	uxth	r3, r3
 8002302:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002306:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800230a:	b29a      	uxth	r2, r3
 800230c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800230e:	801a      	strh	r2, [r3, #0]
 8002310:	e01a      	b.n	8002348 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	785b      	ldrb	r3, [r3, #1]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d116      	bne.n	8002348 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	667b      	str	r3, [r7, #100]	; 0x64
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002328:	b29b      	uxth	r3, r3
 800232a:	461a      	mov	r2, r3
 800232c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800232e:	4413      	add	r3, r2
 8002330:	667b      	str	r3, [r7, #100]	; 0x64
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	011a      	lsls	r2, r3, #4
 8002338:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800233a:	4413      	add	r3, r2
 800233c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002340:	663b      	str	r3, [r7, #96]	; 0x60
 8002342:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002344:	2200      	movs	r2, #0
 8002346:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	677b      	str	r3, [r7, #116]	; 0x74
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	785b      	ldrb	r3, [r3, #1]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d12b      	bne.n	80023ae <HAL_PCD_EP_DB_Transmit+0x51e>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002364:	b29b      	uxth	r3, r3
 8002366:	461a      	mov	r2, r3
 8002368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800236a:	4413      	add	r3, r2
 800236c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	011a      	lsls	r2, r3, #4
 8002374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002376:	4413      	add	r3, r2
 8002378:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800237c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002380:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	b29b      	uxth	r3, r3
 8002388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800238c:	b29a      	uxth	r2, r3
 800238e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002392:	801a      	strh	r2, [r3, #0]
 8002394:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	b29b      	uxth	r3, r3
 800239c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023aa:	801a      	strh	r2, [r3, #0]
 80023ac:	e017      	b.n	80023de <HAL_PCD_EP_DB_Transmit+0x54e>
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	785b      	ldrb	r3, [r3, #1]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d113      	bne.n	80023de <HAL_PCD_EP_DB_Transmit+0x54e>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023be:	b29b      	uxth	r3, r3
 80023c0:	461a      	mov	r2, r3
 80023c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023c4:	4413      	add	r3, r2
 80023c6:	677b      	str	r3, [r7, #116]	; 0x74
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	011a      	lsls	r2, r3, #4
 80023ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023d0:	4413      	add	r3, r2
 80023d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023d6:	673b      	str	r3, [r7, #112]	; 0x70
 80023d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023da:	2200      	movs	r2, #0
 80023dc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	4619      	mov	r1, r3
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f004 fd7c 	bl	8006ee2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80023ea:	88fb      	ldrh	r3, [r7, #6]
 80023ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f040 811a 	bne.w	800262a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	b29b      	uxth	r3, r3
 8002408:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800240c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002410:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	461a      	mov	r2, r3
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	441a      	add	r2, r3
 8002422:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002426:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800242a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800242e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002436:	b29b      	uxth	r3, r3
 8002438:	8013      	strh	r3, [r2, #0]
 800243a:	e0f6      	b.n	800262a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800243c:	88fb      	ldrh	r3, [r7, #6]
 800243e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d121      	bne.n	800248a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	461a      	mov	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	b29b      	uxth	r3, r3
 8002458:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800245c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002460:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	441a      	add	r2, r3
 8002472:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800247a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800247e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002486:	b29b      	uxth	r3, r3
 8002488:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002490:	2b01      	cmp	r3, #1
 8002492:	f040 80ca 	bne.w	800262a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	695a      	ldr	r2, [r3, #20]
 800249a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800249e:	441a      	add	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	69da      	ldr	r2, [r3, #28]
 80024a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024ac:	441a      	add	r2, r3
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	6a1a      	ldr	r2, [r3, #32]
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d30b      	bcc.n	80024d6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	6a1a      	ldr	r2, [r3, #32]
 80024ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024ce:	1ad2      	subs	r2, r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	621a      	str	r2, [r3, #32]
 80024d4:	e017      	b.n	8002506 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d108      	bne.n	80024f0 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80024de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80024e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024ee:	e00a      	b.n	8002506 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2200      	movs	r2, #0
 80024fc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	657b      	str	r3, [r7, #84]	; 0x54
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	785b      	ldrb	r3, [r3, #1]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d165      	bne.n	80025e0 <HAL_PCD_EP_DB_Transmit+0x750>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	65fb      	str	r3, [r7, #92]	; 0x5c
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002522:	b29b      	uxth	r3, r3
 8002524:	461a      	mov	r2, r3
 8002526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002528:	4413      	add	r3, r2
 800252a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	011a      	lsls	r2, r3, #4
 8002532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002534:	4413      	add	r3, r2
 8002536:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800253a:	65bb      	str	r3, [r7, #88]	; 0x58
 800253c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	b29b      	uxth	r3, r3
 8002542:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002546:	b29a      	uxth	r2, r3
 8002548:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800254a:	801a      	strh	r2, [r3, #0]
 800254c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002550:	2b3e      	cmp	r3, #62	; 0x3e
 8002552:	d91d      	bls.n	8002590 <HAL_PCD_EP_DB_Transmit+0x700>
 8002554:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002558:	095b      	lsrs	r3, r3, #5
 800255a:	66bb      	str	r3, [r7, #104]	; 0x68
 800255c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002560:	f003 031f 	and.w	r3, r3, #31
 8002564:	2b00      	cmp	r3, #0
 8002566:	d102      	bne.n	800256e <HAL_PCD_EP_DB_Transmit+0x6de>
 8002568:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800256a:	3b01      	subs	r3, #1
 800256c:	66bb      	str	r3, [r7, #104]	; 0x68
 800256e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	b29a      	uxth	r2, r3
 8002574:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002576:	b29b      	uxth	r3, r3
 8002578:	029b      	lsls	r3, r3, #10
 800257a:	b29b      	uxth	r3, r3
 800257c:	4313      	orrs	r3, r2
 800257e:	b29b      	uxth	r3, r3
 8002580:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002584:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002588:	b29a      	uxth	r2, r3
 800258a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800258c:	801a      	strh	r2, [r3, #0]
 800258e:	e041      	b.n	8002614 <HAL_PCD_EP_DB_Transmit+0x784>
 8002590:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10a      	bne.n	80025ae <HAL_PCD_EP_DB_Transmit+0x71e>
 8002598:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	b29b      	uxth	r3, r3
 800259e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025aa:	801a      	strh	r2, [r3, #0]
 80025ac:	e032      	b.n	8002614 <HAL_PCD_EP_DB_Transmit+0x784>
 80025ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025b2:	085b      	lsrs	r3, r3, #1
 80025b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80025b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d002      	beq.n	80025c8 <HAL_PCD_EP_DB_Transmit+0x738>
 80025c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025c4:	3301      	adds	r3, #1
 80025c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80025c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	029b      	lsls	r3, r3, #10
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	4313      	orrs	r3, r2
 80025d8:	b29a      	uxth	r2, r3
 80025da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025dc:	801a      	strh	r2, [r3, #0]
 80025de:	e019      	b.n	8002614 <HAL_PCD_EP_DB_Transmit+0x784>
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	785b      	ldrb	r3, [r3, #1]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d115      	bne.n	8002614 <HAL_PCD_EP_DB_Transmit+0x784>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	461a      	mov	r2, r3
 80025f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f6:	4413      	add	r3, r2
 80025f8:	657b      	str	r3, [r7, #84]	; 0x54
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	011a      	lsls	r2, r3, #4
 8002600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002602:	4413      	add	r3, r2
 8002604:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002608:	653b      	str	r3, [r7, #80]	; 0x50
 800260a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800260e:	b29a      	uxth	r2, r3
 8002610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002612:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6818      	ldr	r0, [r3, #0]
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	6959      	ldr	r1, [r3, #20]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	895a      	ldrh	r2, [r3, #10]
 8002620:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002624:	b29b      	uxth	r3, r3
 8002626:	f003 f80a 	bl	800563e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	b29b      	uxth	r3, r3
 800263c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002644:	82bb      	strh	r3, [r7, #20]
 8002646:	8abb      	ldrh	r3, [r7, #20]
 8002648:	f083 0310 	eor.w	r3, r3, #16
 800264c:	82bb      	strh	r3, [r7, #20]
 800264e:	8abb      	ldrh	r3, [r7, #20]
 8002650:	f083 0320 	eor.w	r3, r3, #32
 8002654:	82bb      	strh	r3, [r7, #20]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	461a      	mov	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	441a      	add	r2, r3
 8002664:	8abb      	ldrh	r3, [r7, #20]
 8002666:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800266a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800266e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002676:	b29b      	uxth	r3, r3
 8002678:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3790      	adds	r7, #144	; 0x90
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002684:	b480      	push	{r7}
 8002686:	b087      	sub	sp, #28
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	607b      	str	r3, [r7, #4]
 800268e:	460b      	mov	r3, r1
 8002690:	817b      	strh	r3, [r7, #10]
 8002692:	4613      	mov	r3, r2
 8002694:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002696:	897b      	ldrh	r3, [r7, #10]
 8002698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269c:	b29b      	uxth	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00b      	beq.n	80026ba <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026a2:	897b      	ldrh	r3, [r7, #10]
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	4413      	add	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	e009      	b.n	80026ce <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026ba:	897a      	ldrh	r2, [r7, #10]
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	4413      	add	r3, r2
 80026cc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80026ce:	893b      	ldrh	r3, [r7, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d107      	bne.n	80026e4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	2200      	movs	r2, #0
 80026d8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	b29a      	uxth	r2, r3
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	80da      	strh	r2, [r3, #6]
 80026e2:	e00b      	b.n	80026fc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	2201      	movs	r2, #1
 80026e8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	0c1b      	lsrs	r3, r3, #16
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	371c      	adds	r7, #28
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr

08002708 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e272      	b.n	8002c00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 8087 	beq.w	8002836 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002728:	4b92      	ldr	r3, [pc, #584]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 030c 	and.w	r3, r3, #12
 8002730:	2b04      	cmp	r3, #4
 8002732:	d00c      	beq.n	800274e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002734:	4b8f      	ldr	r3, [pc, #572]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 030c 	and.w	r3, r3, #12
 800273c:	2b08      	cmp	r3, #8
 800273e:	d112      	bne.n	8002766 <HAL_RCC_OscConfig+0x5e>
 8002740:	4b8c      	ldr	r3, [pc, #560]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800274c:	d10b      	bne.n	8002766 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800274e:	4b89      	ldr	r3, [pc, #548]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d06c      	beq.n	8002834 <HAL_RCC_OscConfig+0x12c>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d168      	bne.n	8002834 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e24c      	b.n	8002c00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800276e:	d106      	bne.n	800277e <HAL_RCC_OscConfig+0x76>
 8002770:	4b80      	ldr	r3, [pc, #512]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a7f      	ldr	r2, [pc, #508]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800277a:	6013      	str	r3, [r2, #0]
 800277c:	e02e      	b.n	80027dc <HAL_RCC_OscConfig+0xd4>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10c      	bne.n	80027a0 <HAL_RCC_OscConfig+0x98>
 8002786:	4b7b      	ldr	r3, [pc, #492]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a7a      	ldr	r2, [pc, #488]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 800278c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	4b78      	ldr	r3, [pc, #480]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a77      	ldr	r2, [pc, #476]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002798:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	e01d      	b.n	80027dc <HAL_RCC_OscConfig+0xd4>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027a8:	d10c      	bne.n	80027c4 <HAL_RCC_OscConfig+0xbc>
 80027aa:	4b72      	ldr	r3, [pc, #456]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a71      	ldr	r2, [pc, #452]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80027b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	4b6f      	ldr	r3, [pc, #444]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a6e      	ldr	r2, [pc, #440]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	e00b      	b.n	80027dc <HAL_RCC_OscConfig+0xd4>
 80027c4:	4b6b      	ldr	r3, [pc, #428]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a6a      	ldr	r2, [pc, #424]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80027ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	4b68      	ldr	r3, [pc, #416]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a67      	ldr	r2, [pc, #412]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80027d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d013      	beq.n	800280c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e4:	f7fd ff6e 	bl	80006c4 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ec:	f7fd ff6a 	bl	80006c4 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b64      	cmp	r3, #100	; 0x64
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e200      	b.n	8002c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fe:	4b5d      	ldr	r3, [pc, #372]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f0      	beq.n	80027ec <HAL_RCC_OscConfig+0xe4>
 800280a:	e014      	b.n	8002836 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280c:	f7fd ff5a 	bl	80006c4 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002814:	f7fd ff56 	bl	80006c4 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b64      	cmp	r3, #100	; 0x64
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e1ec      	b.n	8002c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002826:	4b53      	ldr	r3, [pc, #332]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0x10c>
 8002832:	e000      	b.n	8002836 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d063      	beq.n	800290a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002842:	4b4c      	ldr	r3, [pc, #304]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 030c 	and.w	r3, r3, #12
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00b      	beq.n	8002866 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800284e:	4b49      	ldr	r3, [pc, #292]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	2b08      	cmp	r3, #8
 8002858:	d11c      	bne.n	8002894 <HAL_RCC_OscConfig+0x18c>
 800285a:	4b46      	ldr	r3, [pc, #280]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d116      	bne.n	8002894 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002866:	4b43      	ldr	r3, [pc, #268]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d005      	beq.n	800287e <HAL_RCC_OscConfig+0x176>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d001      	beq.n	800287e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e1c0      	b.n	8002c00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287e:	4b3d      	ldr	r3, [pc, #244]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	4939      	ldr	r1, [pc, #228]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 800288e:	4313      	orrs	r3, r2
 8002890:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002892:	e03a      	b.n	800290a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d020      	beq.n	80028de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800289c:	4b36      	ldr	r3, [pc, #216]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 800289e:	2201      	movs	r2, #1
 80028a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a2:	f7fd ff0f 	bl	80006c4 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028aa:	f7fd ff0b 	bl	80006c4 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e1a1      	b.n	8002c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028bc:	4b2d      	ldr	r3, [pc, #180]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0f0      	beq.n	80028aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c8:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4927      	ldr	r1, [pc, #156]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	600b      	str	r3, [r1, #0]
 80028dc:	e015      	b.n	800290a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028de:	4b26      	ldr	r3, [pc, #152]	; (8002978 <HAL_RCC_OscConfig+0x270>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7fd feee 	bl	80006c4 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ec:	f7fd feea 	bl	80006c4 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e180      	b.n	8002c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fe:	4b1d      	ldr	r3, [pc, #116]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d03a      	beq.n	800298c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d019      	beq.n	8002952 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800291e:	4b17      	ldr	r3, [pc, #92]	; (800297c <HAL_RCC_OscConfig+0x274>)
 8002920:	2201      	movs	r2, #1
 8002922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002924:	f7fd fece 	bl	80006c4 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800292c:	f7fd feca 	bl	80006c4 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e160      	b.n	8002c00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800293e:	4b0d      	ldr	r3, [pc, #52]	; (8002974 <HAL_RCC_OscConfig+0x26c>)
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800294a:	2001      	movs	r0, #1
 800294c:	f000 fa9c 	bl	8002e88 <RCC_Delay>
 8002950:	e01c      	b.n	800298c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002952:	4b0a      	ldr	r3, [pc, #40]	; (800297c <HAL_RCC_OscConfig+0x274>)
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002958:	f7fd feb4 	bl	80006c4 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800295e:	e00f      	b.n	8002980 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002960:	f7fd feb0 	bl	80006c4 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d908      	bls.n	8002980 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e146      	b.n	8002c00 <HAL_RCC_OscConfig+0x4f8>
 8002972:	bf00      	nop
 8002974:	40021000 	.word	0x40021000
 8002978:	42420000 	.word	0x42420000
 800297c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002980:	4b92      	ldr	r3, [pc, #584]	; (8002bcc <HAL_RCC_OscConfig+0x4c4>)
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1e9      	bne.n	8002960 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 80a6 	beq.w	8002ae6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800299a:	2300      	movs	r3, #0
 800299c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800299e:	4b8b      	ldr	r3, [pc, #556]	; (8002bcc <HAL_RCC_OscConfig+0x4c4>)
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10d      	bne.n	80029c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029aa:	4b88      	ldr	r3, [pc, #544]	; (8002bcc <HAL_RCC_OscConfig+0x4c4>)
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	4a87      	ldr	r2, [pc, #540]	; (8002bcc <HAL_RCC_OscConfig+0x4c4>)
 80029b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b4:	61d3      	str	r3, [r2, #28]
 80029b6:	4b85      	ldr	r3, [pc, #532]	; (8002bcc <HAL_RCC_OscConfig+0x4c4>)
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029be:	60bb      	str	r3, [r7, #8]
 80029c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029c2:	2301      	movs	r3, #1
 80029c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c6:	4b82      	ldr	r3, [pc, #520]	; (8002bd0 <HAL_RCC_OscConfig+0x4c8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d118      	bne.n	8002a04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029d2:	4b7f      	ldr	r3, [pc, #508]	; (8002bd0 <HAL_RCC_OscConfig+0x4c8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a7e      	ldr	r2, [pc, #504]	; (8002bd0 <HAL_RCC_OscConfig+0x4c8>)
 80029d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029de:	f7fd fe71 	bl	80006c4 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e6:	f7fd fe6d 	bl	80006c4 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b64      	cmp	r3, #100	; 0x64
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e103      	b.n	8002c00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f8:	4b75      	ldr	r3, [pc, #468]	; (8002bd0 <HAL_RCC_OscConfig+0x4c8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d106      	bne.n	8002a1a <HAL_RCC_OscConfig+0x312>
 8002a0c:	4b6f      	ldr	r3, [pc, #444]	; (8002bcc <HAL_RCC_OscConfig+0x4c4>)
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	4a6e      	ldr	r2, [pc, #440]	; (8002bcc <HAL_RCC_OscConfig+0x4c4>)
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	6213      	str	r3, [r2, #32]
 8002a18:	e02d      	b.n	8002a76 <HAL_RCC_OscConfig+0x36e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10c      	bne.n	8002a3c <HAL_RCC_OscConfig+0x334>
 8002a22:	4b6a      	ldr	r3, [pc, #424]	; (8002bcc <HAL_RCC_OscConfig+0x4c4>)
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	4a69      	ldr	r2, [pc, #420]	; (8002bcc <HAL_RCC_OscConfig+0x4c4>)
 8002a28:	f023 0301 	bic.w	r3, r3, #1
 8002a2c:	6213      	str	r3, [r2, #32]
 8002a2e:	4b67      	ldr	r3, [pc, #412]	; (8002bcc <HAL_RCC_OscConfig+0x4c4>)
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	4a66      	ldr	r2, [pc, #408]	; (8002bcc <HAL_RCC_OscConfig+0x4c4>)
 8002a34:	f023 0304 	bic.w	r3, r3, #4
 8002a38:	6213      	str	r3, [r2, #32]
 8002a3a:	e01c      	b.n	8002a76 <HAL_RCC_OscConfig+0x36e>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	2b05      	cmp	r3, #5
 8002a42:	d10c      	bne.n	8002a5e <HAL_RCC_OscConfig+0x356>
 8002a44:	4b61      	ldr	r3, [pc, #388]	; (8002bcc <HAL_RCC_OscConfig+0x4c4>)
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	4a60      	ldr	r2, [pc, #384]	; (8002bcc <HAL_RCC_OscConfig+0x4c4>)
 8002a4a:	f043 0304 	orr.w	r3, r3, #4
 8002a4e:	6213      	str	r3, [r2, #32]
 8002a50:	4b5e      	ldr	r3, [pc, #376]	; (8002bcc <HAL_RCC_OscConfig+0x4c4>)
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	4a5d      	ldr	r2, [pc, #372]	; (8002bcc <HAL_RCC_OscConfig+0x4c4>)
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	6213      	str	r3, [r2, #32]
 8002a5c:	e00b      	b.n	8002a76 <HAL_RCC_OscConfig+0x36e>
 8002a5e:	4b5b      	ldr	r3, [pc, #364]	; (8002bcc <HAL_RCC_OscConfig+0x4c4>)
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	4a5a      	ldr	r2, [pc, #360]	; (8002bcc <HAL_RCC_OscConfig+0x4c4>)
 8002a64:	f023 0301 	bic.w	r3, r3, #1
 8002a68:	6213      	str	r3, [r2, #32]
 8002a6a:	4b58      	ldr	r3, [pc, #352]	; (8002bcc <HAL_RCC_OscConfig+0x4c4>)
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	4a57      	ldr	r2, [pc, #348]	; (8002bcc <HAL_RCC_OscConfig+0x4c4>)
 8002a70:	f023 0304 	bic.w	r3, r3, #4
 8002a74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d015      	beq.n	8002aaa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7e:	f7fd fe21 	bl	80006c4 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a84:	e00a      	b.n	8002a9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a86:	f7fd fe1d 	bl	80006c4 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e0b1      	b.n	8002c00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a9c:	4b4b      	ldr	r3, [pc, #300]	; (8002bcc <HAL_RCC_OscConfig+0x4c4>)
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0ee      	beq.n	8002a86 <HAL_RCC_OscConfig+0x37e>
 8002aa8:	e014      	b.n	8002ad4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aaa:	f7fd fe0b 	bl	80006c4 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab0:	e00a      	b.n	8002ac8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab2:	f7fd fe07 	bl	80006c4 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e09b      	b.n	8002c00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac8:	4b40      	ldr	r3, [pc, #256]	; (8002bcc <HAL_RCC_OscConfig+0x4c4>)
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1ee      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ad4:	7dfb      	ldrb	r3, [r7, #23]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d105      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ada:	4b3c      	ldr	r3, [pc, #240]	; (8002bcc <HAL_RCC_OscConfig+0x4c4>)
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	4a3b      	ldr	r2, [pc, #236]	; (8002bcc <HAL_RCC_OscConfig+0x4c4>)
 8002ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 8087 	beq.w	8002bfe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002af0:	4b36      	ldr	r3, [pc, #216]	; (8002bcc <HAL_RCC_OscConfig+0x4c4>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 030c 	and.w	r3, r3, #12
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d061      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d146      	bne.n	8002b92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b04:	4b33      	ldr	r3, [pc, #204]	; (8002bd4 <HAL_RCC_OscConfig+0x4cc>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0a:	f7fd fddb 	bl	80006c4 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b12:	f7fd fdd7 	bl	80006c4 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e06d      	b.n	8002c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b24:	4b29      	ldr	r3, [pc, #164]	; (8002bcc <HAL_RCC_OscConfig+0x4c4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1f0      	bne.n	8002b12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b38:	d108      	bne.n	8002b4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b3a:	4b24      	ldr	r3, [pc, #144]	; (8002bcc <HAL_RCC_OscConfig+0x4c4>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	4921      	ldr	r1, [pc, #132]	; (8002bcc <HAL_RCC_OscConfig+0x4c4>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b4c:	4b1f      	ldr	r3, [pc, #124]	; (8002bcc <HAL_RCC_OscConfig+0x4c4>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a19      	ldr	r1, [r3, #32]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	430b      	orrs	r3, r1
 8002b5e:	491b      	ldr	r1, [pc, #108]	; (8002bcc <HAL_RCC_OscConfig+0x4c4>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b64:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <HAL_RCC_OscConfig+0x4cc>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6a:	f7fd fdab 	bl	80006c4 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b72:	f7fd fda7 	bl	80006c4 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e03d      	b.n	8002c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b84:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <HAL_RCC_OscConfig+0x4c4>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0f0      	beq.n	8002b72 <HAL_RCC_OscConfig+0x46a>
 8002b90:	e035      	b.n	8002bfe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b92:	4b10      	ldr	r3, [pc, #64]	; (8002bd4 <HAL_RCC_OscConfig+0x4cc>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b98:	f7fd fd94 	bl	80006c4 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba0:	f7fd fd90 	bl	80006c4 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e026      	b.n	8002c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb2:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <HAL_RCC_OscConfig+0x4c4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f0      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x498>
 8002bbe:	e01e      	b.n	8002bfe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d107      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e019      	b.n	8002c00 <HAL_RCC_OscConfig+0x4f8>
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	40007000 	.word	0x40007000
 8002bd4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <HAL_RCC_OscConfig+0x500>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d106      	bne.n	8002bfa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d001      	beq.n	8002bfe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e000      	b.n	8002c00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40021000 	.word	0x40021000

08002c0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e0d0      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c20:	4b6a      	ldr	r3, [pc, #424]	; (8002dcc <HAL_RCC_ClockConfig+0x1c0>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d910      	bls.n	8002c50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2e:	4b67      	ldr	r3, [pc, #412]	; (8002dcc <HAL_RCC_ClockConfig+0x1c0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f023 0207 	bic.w	r2, r3, #7
 8002c36:	4965      	ldr	r1, [pc, #404]	; (8002dcc <HAL_RCC_ClockConfig+0x1c0>)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3e:	4b63      	ldr	r3, [pc, #396]	; (8002dcc <HAL_RCC_ClockConfig+0x1c0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e0b8      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d020      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d005      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c68:	4b59      	ldr	r3, [pc, #356]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	4a58      	ldr	r2, [pc, #352]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0308 	and.w	r3, r3, #8
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d005      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c80:	4b53      	ldr	r3, [pc, #332]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	4a52      	ldr	r2, [pc, #328]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c8c:	4b50      	ldr	r3, [pc, #320]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	494d      	ldr	r1, [pc, #308]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d040      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d107      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb2:	4b47      	ldr	r3, [pc, #284]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d115      	bne.n	8002cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e07f      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d107      	bne.n	8002cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cca:	4b41      	ldr	r3, [pc, #260]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d109      	bne.n	8002cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e073      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cda:	4b3d      	ldr	r3, [pc, #244]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e06b      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cea:	4b39      	ldr	r3, [pc, #228]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f023 0203 	bic.w	r2, r3, #3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	4936      	ldr	r1, [pc, #216]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cfc:	f7fd fce2 	bl	80006c4 <HAL_GetTick>
 8002d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d02:	e00a      	b.n	8002d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d04:	f7fd fcde 	bl	80006c4 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e053      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1a:	4b2d      	ldr	r3, [pc, #180]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 020c 	and.w	r2, r3, #12
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d1eb      	bne.n	8002d04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d2c:	4b27      	ldr	r3, [pc, #156]	; (8002dcc <HAL_RCC_ClockConfig+0x1c0>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d210      	bcs.n	8002d5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3a:	4b24      	ldr	r3, [pc, #144]	; (8002dcc <HAL_RCC_ClockConfig+0x1c0>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f023 0207 	bic.w	r2, r3, #7
 8002d42:	4922      	ldr	r1, [pc, #136]	; (8002dcc <HAL_RCC_ClockConfig+0x1c0>)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4a:	4b20      	ldr	r3, [pc, #128]	; (8002dcc <HAL_RCC_ClockConfig+0x1c0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d001      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e032      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d008      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d68:	4b19      	ldr	r3, [pc, #100]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4916      	ldr	r1, [pc, #88]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d009      	beq.n	8002d9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d86:	4b12      	ldr	r3, [pc, #72]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	490e      	ldr	r1, [pc, #56]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d9a:	f000 f821 	bl	8002de0 <HAL_RCC_GetSysClockFreq>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	091b      	lsrs	r3, r3, #4
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	490a      	ldr	r1, [pc, #40]	; (8002dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002dac:	5ccb      	ldrb	r3, [r1, r3]
 8002dae:	fa22 f303 	lsr.w	r3, r2, r3
 8002db2:	4a09      	ldr	r2, [pc, #36]	; (8002dd8 <HAL_RCC_ClockConfig+0x1cc>)
 8002db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002db6:	4b09      	ldr	r3, [pc, #36]	; (8002ddc <HAL_RCC_ClockConfig+0x1d0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fd fc40 	bl	8000640 <HAL_InitTick>

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40022000 	.word	0x40022000
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	080073fc 	.word	0x080073fc
 8002dd8:	20000138 	.word	0x20000138
 8002ddc:	2000013c 	.word	0x2000013c

08002de0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b087      	sub	sp, #28
 8002de4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	2300      	movs	r3, #0
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	2300      	movs	r3, #0
 8002df4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002dfa:	4b1e      	ldr	r3, [pc, #120]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x94>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f003 030c 	and.w	r3, r3, #12
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d002      	beq.n	8002e10 <HAL_RCC_GetSysClockFreq+0x30>
 8002e0a:	2b08      	cmp	r3, #8
 8002e0c:	d003      	beq.n	8002e16 <HAL_RCC_GetSysClockFreq+0x36>
 8002e0e:	e027      	b.n	8002e60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e10:	4b19      	ldr	r3, [pc, #100]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e12:	613b      	str	r3, [r7, #16]
      break;
 8002e14:	e027      	b.n	8002e66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	0c9b      	lsrs	r3, r3, #18
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	4a17      	ldr	r2, [pc, #92]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e20:	5cd3      	ldrb	r3, [r2, r3]
 8002e22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d010      	beq.n	8002e50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e2e:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	0c5b      	lsrs	r3, r3, #17
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	4a11      	ldr	r2, [pc, #68]	; (8002e80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e3a:	5cd3      	ldrb	r3, [r2, r3]
 8002e3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a0d      	ldr	r2, [pc, #52]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e42:	fb03 f202 	mul.w	r2, r3, r2
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	e004      	b.n	8002e5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a0c      	ldr	r2, [pc, #48]	; (8002e84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e54:	fb02 f303 	mul.w	r3, r2, r3
 8002e58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	613b      	str	r3, [r7, #16]
      break;
 8002e5e:	e002      	b.n	8002e66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e60:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e62:	613b      	str	r3, [r7, #16]
      break;
 8002e64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e66:	693b      	ldr	r3, [r7, #16]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	371c      	adds	r7, #28
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40021000 	.word	0x40021000
 8002e78:	007a1200 	.word	0x007a1200
 8002e7c:	0800740c 	.word	0x0800740c
 8002e80:	0800741c 	.word	0x0800741c
 8002e84:	003d0900 	.word	0x003d0900

08002e88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e90:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <RCC_Delay+0x34>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a0a      	ldr	r2, [pc, #40]	; (8002ec0 <RCC_Delay+0x38>)
 8002e96:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9a:	0a5b      	lsrs	r3, r3, #9
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ea2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ea4:	bf00      	nop
  }
  while (Delay --);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	1e5a      	subs	r2, r3, #1
 8002eaa:	60fa      	str	r2, [r7, #12]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1f9      	bne.n	8002ea4 <RCC_Delay+0x1c>
}
 8002eb0:	bf00      	nop
 8002eb2:	bf00      	nop
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr
 8002ebc:	20000138 	.word	0x20000138
 8002ec0:	10624dd3 	.word	0x10624dd3

08002ec4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	613b      	str	r3, [r7, #16]
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d07d      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ee4:	4b4f      	ldr	r3, [pc, #316]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10d      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef0:	4b4c      	ldr	r3, [pc, #304]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	4a4b      	ldr	r2, [pc, #300]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002efa:	61d3      	str	r3, [r2, #28]
 8002efc:	4b49      	ldr	r3, [pc, #292]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0c:	4b46      	ldr	r3, [pc, #280]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d118      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f18:	4b43      	ldr	r3, [pc, #268]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a42      	ldr	r2, [pc, #264]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f24:	f7fd fbce 	bl	80006c4 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2a:	e008      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f2c:	f7fd fbca 	bl	80006c4 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b64      	cmp	r3, #100	; 0x64
 8002f38:	d901      	bls.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e06d      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3e:	4b3a      	ldr	r3, [pc, #232]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f4a:	4b36      	ldr	r3, [pc, #216]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f52:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d02e      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d027      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f68:	4b2e      	ldr	r3, [pc, #184]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f70:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f72:	4b2e      	ldr	r3, [pc, #184]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f74:	2201      	movs	r2, #1
 8002f76:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f78:	4b2c      	ldr	r3, [pc, #176]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f7e:	4a29      	ldr	r2, [pc, #164]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d014      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8e:	f7fd fb99 	bl	80006c4 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f94:	e00a      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f96:	f7fd fb95 	bl	80006c4 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e036      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fac:	4b1d      	ldr	r3, [pc, #116]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0ee      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fb8:	4b1a      	ldr	r3, [pc, #104]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	4917      	ldr	r1, [pc, #92]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fca:	7dfb      	ldrb	r3, [r7, #23]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d105      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd0:	4b14      	ldr	r3, [pc, #80]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	4a13      	ldr	r2, [pc, #76]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fda:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d008      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fe8:	4b0e      	ldr	r3, [pc, #56]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	490b      	ldr	r1, [pc, #44]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	2b00      	cmp	r3, #0
 8003004:	d008      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003006:	4b07      	ldr	r3, [pc, #28]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	4904      	ldr	r1, [pc, #16]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003014:	4313      	orrs	r3, r2
 8003016:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40021000 	.word	0x40021000
 8003028:	40007000 	.word	0x40007000
 800302c:	42420440 	.word	0x42420440

08003030 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003030:	b084      	sub	sp, #16
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	f107 0014 	add.w	r0, r7, #20
 800303e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	b004      	add	sp, #16
 800304e:	4770      	bx	lr

08003050 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003060:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003064:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	b29a      	uxth	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	bc80      	pop	{r7}
 800307a:	4770      	bx	lr

0800307c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003084:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003088:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	b29b      	uxth	r3, r3
 8003096:	43db      	mvns	r3, r3
 8003098:	b29b      	uxth	r3, r3
 800309a:	4013      	ands	r3, r2
 800309c:	b29a      	uxth	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr

080030b0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr

080030c8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80030c8:	b084      	sub	sp, #16
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	f107 0014 	add.w	r0, r7, #20
 80030d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	b004      	add	sp, #16
 8003106:	4770      	bx	lr

08003108 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003108:	b480      	push	{r7}
 800310a:	b09d      	sub	sp, #116	; 0x74
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	b29b      	uxth	r3, r3
 8003126:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800312a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	78db      	ldrb	r3, [r3, #3]
 8003136:	2b03      	cmp	r3, #3
 8003138:	d81f      	bhi.n	800317a <USB_ActivateEndpoint+0x72>
 800313a:	a201      	add	r2, pc, #4	; (adr r2, 8003140 <USB_ActivateEndpoint+0x38>)
 800313c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003140:	08003151 	.word	0x08003151
 8003144:	0800316d 	.word	0x0800316d
 8003148:	08003183 	.word	0x08003183
 800314c:	0800315f 	.word	0x0800315f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003150:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003154:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003158:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800315c:	e012      	b.n	8003184 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800315e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003162:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003166:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800316a:	e00b      	b.n	8003184 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800316c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003170:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003174:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003178:	e004      	b.n	8003184 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8003180:	e000      	b.n	8003184 <USB_ActivateEndpoint+0x7c>
      break;
 8003182:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	441a      	add	r2, r3
 800318e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003192:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003196:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800319a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800319e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031bc:	b29a      	uxth	r2, r3
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	441a      	add	r2, r3
 80031d4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80031d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	7b1b      	ldrb	r3, [r3, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f040 8178 	bne.w	80034e6 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	785b      	ldrb	r3, [r3, #1]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 8084 	beq.w	8003308 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	61bb      	str	r3, [r7, #24]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800320a:	b29b      	uxth	r3, r3
 800320c:	461a      	mov	r2, r3
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	4413      	add	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	011a      	lsls	r2, r3, #4
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	4413      	add	r3, r2
 800321e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	88db      	ldrh	r3, [r3, #6]
 8003228:	085b      	lsrs	r3, r3, #1
 800322a:	b29b      	uxth	r3, r3
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	827b      	strh	r3, [r7, #18]
 8003242:	8a7b      	ldrh	r3, [r7, #18]
 8003244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003248:	2b00      	cmp	r3, #0
 800324a:	d01b      	beq.n	8003284 <USB_ActivateEndpoint+0x17c>
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	b29b      	uxth	r3, r3
 800325a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800325e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003262:	823b      	strh	r3, [r7, #16]
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	441a      	add	r2, r3
 800326e:	8a3b      	ldrh	r3, [r7, #16]
 8003270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800327c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003280:	b29b      	uxth	r3, r3
 8003282:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	78db      	ldrb	r3, [r3, #3]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d020      	beq.n	80032ce <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	b29b      	uxth	r3, r3
 800329a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800329e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032a2:	81bb      	strh	r3, [r7, #12]
 80032a4:	89bb      	ldrh	r3, [r7, #12]
 80032a6:	f083 0320 	eor.w	r3, r3, #32
 80032aa:	81bb      	strh	r3, [r7, #12]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	441a      	add	r2, r3
 80032b6:	89bb      	ldrh	r3, [r7, #12]
 80032b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	8013      	strh	r3, [r2, #0]
 80032cc:	e2d5      	b.n	800387a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	b29b      	uxth	r3, r3
 80032dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032e4:	81fb      	strh	r3, [r7, #14]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	441a      	add	r2, r3
 80032f0:	89fb      	ldrh	r3, [r7, #14]
 80032f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003302:	b29b      	uxth	r3, r3
 8003304:	8013      	strh	r3, [r2, #0]
 8003306:	e2b8      	b.n	800387a <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	633b      	str	r3, [r7, #48]	; 0x30
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003312:	b29b      	uxth	r3, r3
 8003314:	461a      	mov	r2, r3
 8003316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003318:	4413      	add	r3, r2
 800331a:	633b      	str	r3, [r7, #48]	; 0x30
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	011a      	lsls	r2, r3, #4
 8003322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003324:	4413      	add	r3, r2
 8003326:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800332a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	88db      	ldrh	r3, [r3, #6]
 8003330:	085b      	lsrs	r3, r3, #1
 8003332:	b29b      	uxth	r3, r3
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	b29a      	uxth	r2, r3
 8003338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003346:	b29b      	uxth	r3, r3
 8003348:	461a      	mov	r2, r3
 800334a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334c:	4413      	add	r3, r2
 800334e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	011a      	lsls	r2, r3, #4
 8003356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003358:	4413      	add	r3, r2
 800335a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	b29b      	uxth	r3, r3
 8003366:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800336a:	b29a      	uxth	r2, r3
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	801a      	strh	r2, [r3, #0]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	2b3e      	cmp	r3, #62	; 0x3e
 8003376:	d91d      	bls.n	80033b4 <USB_ActivateEndpoint+0x2ac>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	095b      	lsrs	r3, r3, #5
 800337e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	f003 031f 	and.w	r3, r3, #31
 8003388:	2b00      	cmp	r3, #0
 800338a:	d102      	bne.n	8003392 <USB_ActivateEndpoint+0x28a>
 800338c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800338e:	3b01      	subs	r3, #1
 8003390:	66bb      	str	r3, [r7, #104]	; 0x68
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	b29a      	uxth	r2, r3
 8003398:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800339a:	b29b      	uxth	r3, r3
 800339c:	029b      	lsls	r3, r3, #10
 800339e:	b29b      	uxth	r3, r3
 80033a0:	4313      	orrs	r3, r2
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	801a      	strh	r2, [r3, #0]
 80033b2:	e026      	b.n	8003402 <USB_ActivateEndpoint+0x2fa>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10a      	bne.n	80033d2 <USB_ActivateEndpoint+0x2ca>
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	801a      	strh	r2, [r3, #0]
 80033d0:	e017      	b.n	8003402 <USB_ActivateEndpoint+0x2fa>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	085b      	lsrs	r3, r3, #1
 80033d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <USB_ActivateEndpoint+0x2e4>
 80033e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033e8:	3301      	adds	r3, #1
 80033ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80033ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ee:	881b      	ldrh	r3, [r3, #0]
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	029b      	lsls	r3, r3, #10
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	4313      	orrs	r3, r2
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	881b      	ldrh	r3, [r3, #0]
 800340e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003410:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d01b      	beq.n	8003452 <USB_ActivateEndpoint+0x34a>
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	b29b      	uxth	r3, r3
 8003428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800342c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003430:	843b      	strh	r3, [r7, #32]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	441a      	add	r2, r3
 800343c:	8c3b      	ldrh	r3, [r7, #32]
 800343e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003446:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800344a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800344e:	b29b      	uxth	r3, r3
 8003450:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d124      	bne.n	80034a4 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	b29b      	uxth	r3, r3
 8003468:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800346c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003470:	83bb      	strh	r3, [r7, #28]
 8003472:	8bbb      	ldrh	r3, [r7, #28]
 8003474:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003478:	83bb      	strh	r3, [r7, #28]
 800347a:	8bbb      	ldrh	r3, [r7, #28]
 800347c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003480:	83bb      	strh	r3, [r7, #28]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	441a      	add	r2, r3
 800348c:	8bbb      	ldrh	r3, [r7, #28]
 800348e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800349a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800349e:	b29b      	uxth	r3, r3
 80034a0:	8013      	strh	r3, [r2, #0]
 80034a2:	e1ea      	b.n	800387a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ba:	83fb      	strh	r3, [r7, #30]
 80034bc:	8bfb      	ldrh	r3, [r7, #30]
 80034be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80034c2:	83fb      	strh	r3, [r7, #30]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	441a      	add	r2, r3
 80034ce:	8bfb      	ldrh	r3, [r7, #30]
 80034d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	8013      	strh	r3, [r2, #0]
 80034e4:	e1c9      	b.n	800387a <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	78db      	ldrb	r3, [r3, #3]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d11e      	bne.n	800352c <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003504:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	441a      	add	r2, r3
 8003512:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800351a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800351e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003526:	b29b      	uxth	r3, r3
 8003528:	8013      	strh	r3, [r2, #0]
 800352a:	e01d      	b.n	8003568 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	881b      	ldrh	r3, [r3, #0]
 8003538:	b29b      	uxth	r3, r3
 800353a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800353e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003542:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	441a      	add	r2, r3
 8003550:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003554:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003558:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800355c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003564:	b29b      	uxth	r3, r3
 8003566:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003572:	b29b      	uxth	r3, r3
 8003574:	461a      	mov	r2, r3
 8003576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003578:	4413      	add	r3, r2
 800357a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	011a      	lsls	r2, r3, #4
 8003582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003584:	4413      	add	r3, r2
 8003586:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800358a:	65bb      	str	r3, [r7, #88]	; 0x58
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	891b      	ldrh	r3, [r3, #8]
 8003590:	085b      	lsrs	r3, r3, #1
 8003592:	b29b      	uxth	r3, r3
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	b29a      	uxth	r2, r3
 8003598:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800359a:	801a      	strh	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	657b      	str	r3, [r7, #84]	; 0x54
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	461a      	mov	r2, r3
 80035aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ac:	4413      	add	r3, r2
 80035ae:	657b      	str	r3, [r7, #84]	; 0x54
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	011a      	lsls	r2, r3, #4
 80035b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80035be:	653b      	str	r3, [r7, #80]	; 0x50
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	895b      	ldrh	r3, [r3, #10]
 80035c4:	085b      	lsrs	r3, r3, #1
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035ce:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	785b      	ldrb	r3, [r3, #1]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f040 8093 	bne.w	8003700 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80035ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80035ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d01b      	beq.n	800362e <USB_ActivateEndpoint+0x526>
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	b29b      	uxth	r3, r3
 8003604:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	441a      	add	r2, r3
 8003618:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800361a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800361e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003622:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800362a:	b29b      	uxth	r3, r3
 800362c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800363c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800363e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003642:	2b00      	cmp	r3, #0
 8003644:	d01b      	beq.n	800367e <USB_ActivateEndpoint+0x576>
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	b29b      	uxth	r3, r3
 8003654:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	441a      	add	r2, r3
 8003668:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800366a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800366e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003676:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800367a:	b29b      	uxth	r3, r3
 800367c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	b29b      	uxth	r3, r3
 800368c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003694:	873b      	strh	r3, [r7, #56]	; 0x38
 8003696:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003698:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800369c:	873b      	strh	r3, [r7, #56]	; 0x38
 800369e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80036a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80036a4:	873b      	strh	r3, [r7, #56]	; 0x38
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	441a      	add	r2, r3
 80036b0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80036b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036dc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	441a      	add	r2, r3
 80036e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	8013      	strh	r3, [r2, #0]
 80036fe:	e0bc      	b.n	800387a <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003710:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d01d      	beq.n	8003758 <USB_ActivateEndpoint+0x650>
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	b29b      	uxth	r3, r3
 800372a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800372e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003732:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	441a      	add	r2, r3
 8003740:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003744:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003748:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800374c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003754:	b29b      	uxth	r3, r3
 8003756:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003768:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800376c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003770:	2b00      	cmp	r3, #0
 8003772:	d01d      	beq.n	80037b0 <USB_ActivateEndpoint+0x6a8>
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	b29b      	uxth	r3, r3
 8003782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	441a      	add	r2, r3
 8003798:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800379c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	78db      	ldrb	r3, [r3, #3]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d024      	beq.n	8003802 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	881b      	ldrh	r3, [r3, #0]
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037ce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80037d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80037d6:	f083 0320 	eor.w	r3, r3, #32
 80037da:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	441a      	add	r2, r3
 80037e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80037ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	8013      	strh	r3, [r2, #0]
 8003800:	e01d      	b.n	800383e <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	b29b      	uxth	r3, r3
 8003810:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003818:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	441a      	add	r2, r3
 8003826:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800382a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800382e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800383a:	b29b      	uxth	r3, r3
 800383c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	881b      	ldrh	r3, [r3, #0]
 800384a:	b29b      	uxth	r3, r3
 800384c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003854:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	441a      	add	r2, r3
 8003862:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003866:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800386a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800386e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003876:	b29b      	uxth	r3, r3
 8003878:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800387a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800387e:	4618      	mov	r0, r3
 8003880:	3774      	adds	r7, #116	; 0x74
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr

08003888 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003888:	b480      	push	{r7}
 800388a:	b08d      	sub	sp, #52	; 0x34
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	7b1b      	ldrb	r3, [r3, #12]
 8003896:	2b00      	cmp	r3, #0
 8003898:	f040 808e 	bne.w	80039b8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	785b      	ldrb	r3, [r3, #1]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d044      	beq.n	800392e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	881b      	ldrh	r3, [r3, #0]
 80038b0:	81bb      	strh	r3, [r7, #12]
 80038b2:	89bb      	ldrh	r3, [r7, #12]
 80038b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d01b      	beq.n	80038f4 <USB_DeactivateEndpoint+0x6c>
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038d2:	817b      	strh	r3, [r7, #10]
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	441a      	add	r2, r3
 80038de:	897b      	ldrh	r3, [r7, #10]
 80038e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	881b      	ldrh	r3, [r3, #0]
 8003900:	b29b      	uxth	r3, r3
 8003902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003906:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800390a:	813b      	strh	r3, [r7, #8]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	441a      	add	r2, r3
 8003916:	893b      	ldrh	r3, [r7, #8]
 8003918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800391c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003928:	b29b      	uxth	r3, r3
 800392a:	8013      	strh	r3, [r2, #0]
 800392c:	e192      	b.n	8003c54 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	827b      	strh	r3, [r7, #18]
 800393c:	8a7b      	ldrh	r3, [r7, #18]
 800393e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d01b      	beq.n	800397e <USB_DeactivateEndpoint+0xf6>
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	881b      	ldrh	r3, [r3, #0]
 8003952:	b29b      	uxth	r3, r3
 8003954:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800395c:	823b      	strh	r3, [r7, #16]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	441a      	add	r2, r3
 8003968:	8a3b      	ldrh	r3, [r7, #16]
 800396a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800396e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003972:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800397a:	b29b      	uxth	r3, r3
 800397c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	b29b      	uxth	r3, r3
 800398c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003994:	81fb      	strh	r3, [r7, #14]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	441a      	add	r2, r3
 80039a0:	89fb      	ldrh	r3, [r7, #14]
 80039a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	8013      	strh	r3, [r2, #0]
 80039b6:	e14d      	b.n	8003c54 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	785b      	ldrb	r3, [r3, #1]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f040 80a5 	bne.w	8003b0c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	843b      	strh	r3, [r7, #32]
 80039d0:	8c3b      	ldrh	r3, [r7, #32]
 80039d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d01b      	beq.n	8003a12 <USB_DeactivateEndpoint+0x18a>
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f0:	83fb      	strh	r3, [r7, #30]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	441a      	add	r2, r3
 80039fc:	8bfb      	ldrh	r3, [r7, #30]
 80039fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	881b      	ldrh	r3, [r3, #0]
 8003a1e:	83bb      	strh	r3, [r7, #28]
 8003a20:	8bbb      	ldrh	r3, [r7, #28]
 8003a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d01b      	beq.n	8003a62 <USB_DeactivateEndpoint+0x1da>
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	881b      	ldrh	r3, [r3, #0]
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a40:	837b      	strh	r3, [r7, #26]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	441a      	add	r2, r3
 8003a4c:	8b7b      	ldrh	r3, [r7, #26]
 8003a4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a78:	833b      	strh	r3, [r7, #24]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	441a      	add	r2, r3
 8003a84:	8b3b      	ldrh	r3, [r7, #24]
 8003a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab0:	82fb      	strh	r3, [r7, #22]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	441a      	add	r2, r3
 8003abc:	8afb      	ldrh	r3, [r7, #22]
 8003abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4413      	add	r3, r2
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ae8:	82bb      	strh	r3, [r7, #20]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	441a      	add	r2, r3
 8003af4:	8abb      	ldrh	r3, [r7, #20]
 8003af6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003afa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	8013      	strh	r3, [r2, #0]
 8003b0a:	e0a3      	b.n	8003c54 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003b1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d01b      	beq.n	8003b5c <USB_DeactivateEndpoint+0x2d4>
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	441a      	add	r2, r3
 8003b46:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003b48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	881b      	ldrh	r3, [r3, #0]
 8003b68:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003b6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d01b      	beq.n	8003bac <USB_DeactivateEndpoint+0x324>
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	881b      	ldrh	r3, [r3, #0]
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b8a:	853b      	strh	r3, [r7, #40]	; 0x28
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	441a      	add	r2, r3
 8003b96:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003b98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ba4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	441a      	add	r2, r3
 8003bce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003bd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bfa:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	441a      	add	r2, r3
 8003c06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c32:	847b      	strh	r3, [r7, #34]	; 0x22
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	441a      	add	r2, r3
 8003c3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3734      	adds	r7, #52	; 0x34
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr

08003c60 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b0c2      	sub	sp, #264	; 0x108
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c6e:	6018      	str	r0, [r3, #0]
 8003c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c78:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	785b      	ldrb	r3, [r3, #1]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	f040 86b7 	bne.w	80049fa <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	699a      	ldr	r2, [r3, #24]
 8003c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d908      	bls.n	8003cba <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8003ca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003cb8:	e007      	b.n	8003cca <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8003cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	7b1b      	ldrb	r3, [r3, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d13a      	bne.n	8003d50 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6959      	ldr	r1, [r3, #20]
 8003ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	88da      	ldrh	r2, [r3, #6]
 8003cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003cfc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003d00:	6800      	ldr	r0, [r0, #0]
 8003d02:	f001 fc9c 	bl	800563e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	461a      	mov	r2, r3
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	4413      	add	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]
 8003d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	011a      	lsls	r2, r3, #4
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d40:	60fb      	str	r3, [r7, #12]
 8003d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	801a      	strh	r2, [r3, #0]
 8003d4c:	f000 be1f 	b.w	800498e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	78db      	ldrb	r3, [r3, #3]
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	f040 8462 	bne.w	8004626 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6a1a      	ldr	r2, [r3, #32]
 8003d6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	f240 83df 	bls.w	800453e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003d80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003daa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003db8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	441a      	add	r2, r3
 8003dc4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003dc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dd0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003de0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6a1a      	ldr	r2, [r3, #32]
 8003de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dec:	1ad2      	subs	r2, r2, r3
 8003dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003df2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003dfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 81c7 	beq.w	80041b0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	785b      	ldrb	r3, [r3, #1]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d177      	bne.n	8003f2e <USB_EPStartXfer+0x2ce>
 8003e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5e:	4413      	add	r3, r2
 8003e60:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	011a      	lsls	r2, r3, #4
 8003e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e72:	4413      	add	r3, r2
 8003e74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	801a      	strh	r2, [r3, #0]
 8003e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e8e:	2b3e      	cmp	r3, #62	; 0x3e
 8003e90:	d921      	bls.n	8003ed6 <USB_EPStartXfer+0x276>
 8003e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ea0:	f003 031f 	and.w	r3, r3, #31
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d104      	bne.n	8003eb2 <USB_EPStartXfer+0x252>
 8003ea8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003eac:	3b01      	subs	r3, #1
 8003eae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	029b      	lsls	r3, r3, #10
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	801a      	strh	r2, [r3, #0]
 8003ed4:	e050      	b.n	8003f78 <USB_EPStartXfer+0x318>
 8003ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10a      	bne.n	8003ef4 <USB_EPStartXfer+0x294>
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ee8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	801a      	strh	r2, [r3, #0]
 8003ef2:	e041      	b.n	8003f78 <USB_EPStartXfer+0x318>
 8003ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ef8:	085b      	lsrs	r3, r3, #1
 8003efa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d004      	beq.n	8003f14 <USB_EPStartXfer+0x2b4>
 8003f0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003f0e:	3301      	adds	r3, #1
 8003f10:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	029b      	lsls	r3, r3, #10
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	4313      	orrs	r3, r2
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	801a      	strh	r2, [r3, #0]
 8003f2c:	e024      	b.n	8003f78 <USB_EPStartXfer+0x318>
 8003f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	785b      	ldrb	r3, [r3, #1]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d11c      	bne.n	8003f78 <USB_EPStartXfer+0x318>
 8003f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	461a      	mov	r2, r3
 8003f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f52:	4413      	add	r3, r2
 8003f54:	633b      	str	r3, [r7, #48]	; 0x30
 8003f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	011a      	lsls	r2, r3, #4
 8003f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f66:	4413      	add	r3, r2
 8003f68:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f76:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	895b      	ldrh	r3, [r3, #10]
 8003f84:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6959      	ldr	r1, [r3, #20]
 8003f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003f9e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003fa2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003fa6:	6800      	ldr	r0, [r0, #0]
 8003fa8:	f001 fb49 	bl	800563e <USB_WritePMA>
            ep->xfer_buff += len;
 8003fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	695a      	ldr	r2, [r3, #20]
 8003fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fbc:	441a      	add	r2, r3
 8003fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003fca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6a1a      	ldr	r2, [r3, #32]
 8003fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d90f      	bls.n	8004006 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8003fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6a1a      	ldr	r2, [r3, #32]
 8003ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ff6:	1ad2      	subs	r2, r2, r3
 8003ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	621a      	str	r2, [r3, #32]
 8004004:	e00e      	b.n	8004024 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800400a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800401a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2200      	movs	r2, #0
 8004022:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004028:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	785b      	ldrb	r3, [r3, #1]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d177      	bne.n	8004124 <USB_EPStartXfer+0x4c4>
 8004034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004038:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	61bb      	str	r3, [r7, #24]
 8004040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004044:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800404e:	b29b      	uxth	r3, r3
 8004050:	461a      	mov	r2, r3
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	4413      	add	r3, r2
 8004056:	61bb      	str	r3, [r7, #24]
 8004058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800405c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	011a      	lsls	r2, r3, #4
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	4413      	add	r3, r2
 800406a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	881b      	ldrh	r3, [r3, #0]
 8004074:	b29b      	uxth	r3, r3
 8004076:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800407a:	b29a      	uxth	r2, r3
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	801a      	strh	r2, [r3, #0]
 8004080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004084:	2b3e      	cmp	r3, #62	; 0x3e
 8004086:	d921      	bls.n	80040cc <USB_EPStartXfer+0x46c>
 8004088:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800408c:	095b      	lsrs	r3, r3, #5
 800408e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004096:	f003 031f 	and.w	r3, r3, #31
 800409a:	2b00      	cmp	r3, #0
 800409c:	d104      	bne.n	80040a8 <USB_EPStartXfer+0x448>
 800409e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040a2:	3b01      	subs	r3, #1
 80040a4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	881b      	ldrh	r3, [r3, #0]
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	029b      	lsls	r3, r3, #10
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	4313      	orrs	r3, r2
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	801a      	strh	r2, [r3, #0]
 80040ca:	e056      	b.n	800417a <USB_EPStartXfer+0x51a>
 80040cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10a      	bne.n	80040ea <USB_EPStartXfer+0x48a>
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	b29b      	uxth	r3, r3
 80040da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	801a      	strh	r2, [r3, #0]
 80040e8:	e047      	b.n	800417a <USB_EPStartXfer+0x51a>
 80040ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040ee:	085b      	lsrs	r3, r3, #1
 80040f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80040f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d004      	beq.n	800410a <USB_EPStartXfer+0x4aa>
 8004100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004104:	3301      	adds	r3, #1
 8004106:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	b29a      	uxth	r2, r3
 8004110:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004114:	b29b      	uxth	r3, r3
 8004116:	029b      	lsls	r3, r3, #10
 8004118:	b29b      	uxth	r3, r3
 800411a:	4313      	orrs	r3, r2
 800411c:	b29a      	uxth	r2, r3
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	801a      	strh	r2, [r3, #0]
 8004122:	e02a      	b.n	800417a <USB_EPStartXfer+0x51a>
 8004124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	785b      	ldrb	r3, [r3, #1]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d122      	bne.n	800417a <USB_EPStartXfer+0x51a>
 8004134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004138:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	623b      	str	r3, [r7, #32]
 8004140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004144:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800414e:	b29b      	uxth	r3, r3
 8004150:	461a      	mov	r2, r3
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	4413      	add	r3, r2
 8004156:	623b      	str	r3, [r7, #32]
 8004158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800415c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	011a      	lsls	r2, r3, #4
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	4413      	add	r3, r2
 800416a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800416e:	61fb      	str	r3, [r7, #28]
 8004170:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004174:	b29a      	uxth	r2, r3
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800417a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800417e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	891b      	ldrh	r3, [r3, #8]
 8004186:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800418a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800418e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6959      	ldr	r1, [r3, #20]
 8004196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800419a:	b29b      	uxth	r3, r3
 800419c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80041a0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80041a4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80041a8:	6800      	ldr	r0, [r0, #0]
 80041aa:	f001 fa48 	bl	800563e <USB_WritePMA>
 80041ae:	e3ee      	b.n	800498e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80041b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	785b      	ldrb	r3, [r3, #1]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d177      	bne.n	80042b0 <USB_EPStartXfer+0x650>
 80041c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80041cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041da:	b29b      	uxth	r3, r3
 80041dc:	461a      	mov	r2, r3
 80041de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041e0:	4413      	add	r3, r2
 80041e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80041e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	011a      	lsls	r2, r3, #4
 80041f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041f4:	4413      	add	r3, r2
 80041f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80041fa:	647b      	str	r3, [r7, #68]	; 0x44
 80041fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041fe:	881b      	ldrh	r3, [r3, #0]
 8004200:	b29b      	uxth	r3, r3
 8004202:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004206:	b29a      	uxth	r2, r3
 8004208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800420a:	801a      	strh	r2, [r3, #0]
 800420c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004210:	2b3e      	cmp	r3, #62	; 0x3e
 8004212:	d921      	bls.n	8004258 <USB_EPStartXfer+0x5f8>
 8004214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004218:	095b      	lsrs	r3, r3, #5
 800421a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800421e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004222:	f003 031f 	and.w	r3, r3, #31
 8004226:	2b00      	cmp	r3, #0
 8004228:	d104      	bne.n	8004234 <USB_EPStartXfer+0x5d4>
 800422a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800422e:	3b01      	subs	r3, #1
 8004230:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	b29a      	uxth	r2, r3
 800423a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800423e:	b29b      	uxth	r3, r3
 8004240:	029b      	lsls	r3, r3, #10
 8004242:	b29b      	uxth	r3, r3
 8004244:	4313      	orrs	r3, r2
 8004246:	b29b      	uxth	r3, r3
 8004248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800424c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004250:	b29a      	uxth	r2, r3
 8004252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004254:	801a      	strh	r2, [r3, #0]
 8004256:	e056      	b.n	8004306 <USB_EPStartXfer+0x6a6>
 8004258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10a      	bne.n	8004276 <USB_EPStartXfer+0x616>
 8004260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	b29b      	uxth	r3, r3
 8004266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800426a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800426e:	b29a      	uxth	r2, r3
 8004270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004272:	801a      	strh	r2, [r3, #0]
 8004274:	e047      	b.n	8004306 <USB_EPStartXfer+0x6a6>
 8004276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800427a:	085b      	lsrs	r3, r3, #1
 800427c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d004      	beq.n	8004296 <USB_EPStartXfer+0x636>
 800428c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004290:	3301      	adds	r3, #1
 8004292:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004298:	881b      	ldrh	r3, [r3, #0]
 800429a:	b29a      	uxth	r2, r3
 800429c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	029b      	lsls	r3, r3, #10
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	4313      	orrs	r3, r2
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ac:	801a      	strh	r2, [r3, #0]
 80042ae:	e02a      	b.n	8004306 <USB_EPStartXfer+0x6a6>
 80042b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	785b      	ldrb	r3, [r3, #1]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d122      	bne.n	8004306 <USB_EPStartXfer+0x6a6>
 80042c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	653b      	str	r3, [r7, #80]	; 0x50
 80042cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042da:	b29b      	uxth	r3, r3
 80042dc:	461a      	mov	r2, r3
 80042de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042e0:	4413      	add	r3, r2
 80042e2:	653b      	str	r3, [r7, #80]	; 0x50
 80042e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	011a      	lsls	r2, r3, #4
 80042f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042f4:	4413      	add	r3, r2
 80042f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80042fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004300:	b29a      	uxth	r2, r3
 8004302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004304:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800430a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	891b      	ldrh	r3, [r3, #8]
 8004312:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800431a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6959      	ldr	r1, [r3, #20]
 8004322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004326:	b29b      	uxth	r3, r3
 8004328:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800432c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004330:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004334:	6800      	ldr	r0, [r0, #0]
 8004336:	f001 f982 	bl	800563e <USB_WritePMA>
            ep->xfer_buff += len;
 800433a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800433e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	695a      	ldr	r2, [r3, #20]
 8004346:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800434a:	441a      	add	r2, r3
 800434c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800435c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6a1a      	ldr	r2, [r3, #32]
 8004364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004368:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	429a      	cmp	r2, r3
 8004372:	d90f      	bls.n	8004394 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8004374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004378:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6a1a      	ldr	r2, [r3, #32]
 8004380:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004384:	1ad2      	subs	r2, r2, r3
 8004386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800438a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	621a      	str	r2, [r3, #32]
 8004392:	e00e      	b.n	80043b2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8004394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80043a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2200      	movs	r2, #0
 80043b0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80043b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	643b      	str	r3, [r7, #64]	; 0x40
 80043be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	785b      	ldrb	r3, [r3, #1]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d177      	bne.n	80044be <USB_EPStartXfer+0x85e>
 80043ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80043da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	461a      	mov	r2, r3
 80043ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ee:	4413      	add	r3, r2
 80043f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80043f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	011a      	lsls	r2, r3, #4
 8004400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004402:	4413      	add	r3, r2
 8004404:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004408:	637b      	str	r3, [r7, #52]	; 0x34
 800440a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	b29b      	uxth	r3, r3
 8004410:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004414:	b29a      	uxth	r2, r3
 8004416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004418:	801a      	strh	r2, [r3, #0]
 800441a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800441e:	2b3e      	cmp	r3, #62	; 0x3e
 8004420:	d921      	bls.n	8004466 <USB_EPStartXfer+0x806>
 8004422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800442c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004430:	f003 031f 	and.w	r3, r3, #31
 8004434:	2b00      	cmp	r3, #0
 8004436:	d104      	bne.n	8004442 <USB_EPStartXfer+0x7e2>
 8004438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800443c:	3b01      	subs	r3, #1
 800443e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	b29a      	uxth	r2, r3
 8004448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800444c:	b29b      	uxth	r3, r3
 800444e:	029b      	lsls	r3, r3, #10
 8004450:	b29b      	uxth	r3, r3
 8004452:	4313      	orrs	r3, r2
 8004454:	b29b      	uxth	r3, r3
 8004456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800445a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800445e:	b29a      	uxth	r2, r3
 8004460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004462:	801a      	strh	r2, [r3, #0]
 8004464:	e050      	b.n	8004508 <USB_EPStartXfer+0x8a8>
 8004466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10a      	bne.n	8004484 <USB_EPStartXfer+0x824>
 800446e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	b29b      	uxth	r3, r3
 8004474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800447c:	b29a      	uxth	r2, r3
 800447e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004480:	801a      	strh	r2, [r3, #0]
 8004482:	e041      	b.n	8004508 <USB_EPStartXfer+0x8a8>
 8004484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004488:	085b      	lsrs	r3, r3, #1
 800448a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800448e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d004      	beq.n	80044a4 <USB_EPStartXfer+0x844>
 800449a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449e:	3301      	adds	r3, #1
 80044a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80044a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	029b      	lsls	r3, r3, #10
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	4313      	orrs	r3, r2
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ba:	801a      	strh	r2, [r3, #0]
 80044bc:	e024      	b.n	8004508 <USB_EPStartXfer+0x8a8>
 80044be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	785b      	ldrb	r3, [r3, #1]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d11c      	bne.n	8004508 <USB_EPStartXfer+0x8a8>
 80044ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044dc:	b29b      	uxth	r3, r3
 80044de:	461a      	mov	r2, r3
 80044e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044e2:	4413      	add	r3, r2
 80044e4:	643b      	str	r3, [r7, #64]	; 0x40
 80044e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	011a      	lsls	r2, r3, #4
 80044f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044f6:	4413      	add	r3, r2
 80044f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004502:	b29a      	uxth	r2, r3
 8004504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004506:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800450c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	895b      	ldrh	r3, [r3, #10]
 8004514:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800451c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6959      	ldr	r1, [r3, #20]
 8004524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004528:	b29b      	uxth	r3, r3
 800452a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800452e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004532:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004536:	6800      	ldr	r0, [r0, #0]
 8004538:	f001 f881 	bl	800563e <USB_WritePMA>
 800453c:	e227      	b.n	800498e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800453e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004542:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800454e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004552:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800455c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4413      	add	r3, r2
 8004568:	881b      	ldrh	r3, [r3, #0]
 800456a:	b29b      	uxth	r3, r3
 800456c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004574:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800457c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	441a      	add	r2, r3
 8004592:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004596:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800459a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800459e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80045aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	461a      	mov	r2, r3
 80045c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045ca:	4413      	add	r3, r2
 80045cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	011a      	lsls	r2, r3, #4
 80045dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045de:	4413      	add	r3, r2
 80045e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80045e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045ee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80045f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	891b      	ldrh	r3, [r3, #8]
 80045fc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6959      	ldr	r1, [r3, #20]
 800460c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004610:	b29b      	uxth	r3, r3
 8004612:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004616:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800461a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800461e:	6800      	ldr	r0, [r0, #0]
 8004620:	f001 f80d 	bl	800563e <USB_WritePMA>
 8004624:	e1b3      	b.n	800498e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800462a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6a1a      	ldr	r2, [r3, #32]
 8004632:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004636:	1ad2      	subs	r2, r2, r3
 8004638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800463c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004648:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	881b      	ldrh	r3, [r3, #0]
 8004660:	b29b      	uxth	r3, r3
 8004662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 80c6 	beq.w	80047f8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800466c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004670:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	673b      	str	r3, [r7, #112]	; 0x70
 8004678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800467c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	785b      	ldrb	r3, [r3, #1]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d177      	bne.n	8004778 <USB_EPStartXfer+0xb18>
 8004688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800468c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	66bb      	str	r3, [r7, #104]	; 0x68
 8004694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004698:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	461a      	mov	r2, r3
 80046a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046a8:	4413      	add	r3, r2
 80046aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80046ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	011a      	lsls	r2, r3, #4
 80046ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046bc:	4413      	add	r3, r2
 80046be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046c2:	667b      	str	r3, [r7, #100]	; 0x64
 80046c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046d2:	801a      	strh	r2, [r3, #0]
 80046d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046d8:	2b3e      	cmp	r3, #62	; 0x3e
 80046da:	d921      	bls.n	8004720 <USB_EPStartXfer+0xac0>
 80046dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046e0:	095b      	lsrs	r3, r3, #5
 80046e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80046e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046ea:	f003 031f 	and.w	r3, r3, #31
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d104      	bne.n	80046fc <USB_EPStartXfer+0xa9c>
 80046f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80046f6:	3b01      	subs	r3, #1
 80046f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80046fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	b29a      	uxth	r2, r3
 8004702:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004706:	b29b      	uxth	r3, r3
 8004708:	029b      	lsls	r3, r3, #10
 800470a:	b29b      	uxth	r3, r3
 800470c:	4313      	orrs	r3, r2
 800470e:	b29b      	uxth	r3, r3
 8004710:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004714:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004718:	b29a      	uxth	r2, r3
 800471a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800471c:	801a      	strh	r2, [r3, #0]
 800471e:	e050      	b.n	80047c2 <USB_EPStartXfer+0xb62>
 8004720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10a      	bne.n	800473e <USB_EPStartXfer+0xade>
 8004728:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	b29b      	uxth	r3, r3
 800472e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004736:	b29a      	uxth	r2, r3
 8004738:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800473a:	801a      	strh	r2, [r3, #0]
 800473c:	e041      	b.n	80047c2 <USB_EPStartXfer+0xb62>
 800473e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004742:	085b      	lsrs	r3, r3, #1
 8004744:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d004      	beq.n	800475e <USB_EPStartXfer+0xafe>
 8004754:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004758:	3301      	adds	r3, #1
 800475a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800475e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	b29a      	uxth	r2, r3
 8004764:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004768:	b29b      	uxth	r3, r3
 800476a:	029b      	lsls	r3, r3, #10
 800476c:	b29b      	uxth	r3, r3
 800476e:	4313      	orrs	r3, r2
 8004770:	b29a      	uxth	r2, r3
 8004772:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004774:	801a      	strh	r2, [r3, #0]
 8004776:	e024      	b.n	80047c2 <USB_EPStartXfer+0xb62>
 8004778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800477c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	785b      	ldrb	r3, [r3, #1]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d11c      	bne.n	80047c2 <USB_EPStartXfer+0xb62>
 8004788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800478c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004796:	b29b      	uxth	r3, r3
 8004798:	461a      	mov	r2, r3
 800479a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800479c:	4413      	add	r3, r2
 800479e:	673b      	str	r3, [r7, #112]	; 0x70
 80047a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	011a      	lsls	r2, r3, #4
 80047ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047b0:	4413      	add	r3, r2
 80047b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047bc:	b29a      	uxth	r2, r3
 80047be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80047c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	895b      	ldrh	r3, [r3, #10]
 80047ce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80047d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6959      	ldr	r1, [r3, #20]
 80047de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80047e8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80047ec:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80047f0:	6800      	ldr	r0, [r0, #0]
 80047f2:	f000 ff24 	bl	800563e <USB_WritePMA>
 80047f6:	e0ca      	b.n	800498e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80047f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	785b      	ldrb	r3, [r3, #1]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d177      	bne.n	80048f8 <USB_EPStartXfer+0xc98>
 8004808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800480c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004814:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004818:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004822:	b29b      	uxth	r3, r3
 8004824:	461a      	mov	r2, r3
 8004826:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004828:	4413      	add	r3, r2
 800482a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800482c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	011a      	lsls	r2, r3, #4
 800483a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800483c:	4413      	add	r3, r2
 800483e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004842:	67bb      	str	r3, [r7, #120]	; 0x78
 8004844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	b29b      	uxth	r3, r3
 800484a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800484e:	b29a      	uxth	r2, r3
 8004850:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004852:	801a      	strh	r2, [r3, #0]
 8004854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004858:	2b3e      	cmp	r3, #62	; 0x3e
 800485a:	d921      	bls.n	80048a0 <USB_EPStartXfer+0xc40>
 800485c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004860:	095b      	lsrs	r3, r3, #5
 8004862:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004866:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800486a:	f003 031f 	and.w	r3, r3, #31
 800486e:	2b00      	cmp	r3, #0
 8004870:	d104      	bne.n	800487c <USB_EPStartXfer+0xc1c>
 8004872:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004876:	3b01      	subs	r3, #1
 8004878:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800487c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800487e:	881b      	ldrh	r3, [r3, #0]
 8004880:	b29a      	uxth	r2, r3
 8004882:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004886:	b29b      	uxth	r3, r3
 8004888:	029b      	lsls	r3, r3, #10
 800488a:	b29b      	uxth	r3, r3
 800488c:	4313      	orrs	r3, r2
 800488e:	b29b      	uxth	r3, r3
 8004890:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004894:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004898:	b29a      	uxth	r2, r3
 800489a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800489c:	801a      	strh	r2, [r3, #0]
 800489e:	e05c      	b.n	800495a <USB_EPStartXfer+0xcfa>
 80048a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10a      	bne.n	80048be <USB_EPStartXfer+0xc5e>
 80048a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048aa:	881b      	ldrh	r3, [r3, #0]
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048ba:	801a      	strh	r2, [r3, #0]
 80048bc:	e04d      	b.n	800495a <USB_EPStartXfer+0xcfa>
 80048be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048c2:	085b      	lsrs	r3, r3, #1
 80048c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80048c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d004      	beq.n	80048de <USB_EPStartXfer+0xc7e>
 80048d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80048d8:	3301      	adds	r3, #1
 80048da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80048de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	029b      	lsls	r3, r3, #10
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	4313      	orrs	r3, r2
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048f4:	801a      	strh	r2, [r3, #0]
 80048f6:	e030      	b.n	800495a <USB_EPStartXfer+0xcfa>
 80048f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	785b      	ldrb	r3, [r3, #1]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d128      	bne.n	800495a <USB_EPStartXfer+0xcfa>
 8004908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800490c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800491a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004924:	b29b      	uxth	r3, r3
 8004926:	461a      	mov	r2, r3
 8004928:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800492c:	4413      	add	r3, r2
 800492e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004936:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	011a      	lsls	r2, r3, #4
 8004940:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004944:	4413      	add	r3, r2
 8004946:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800494a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800494e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004952:	b29a      	uxth	r2, r3
 8004954:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004958:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800495a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800495e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	891b      	ldrh	r3, [r3, #8]
 8004966:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800496a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800496e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6959      	ldr	r1, [r3, #20]
 8004976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800497a:	b29b      	uxth	r3, r3
 800497c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004980:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004984:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004988:	6800      	ldr	r0, [r0, #0]
 800498a:	f000 fe58 	bl	800563e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800498e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004992:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800499c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049b4:	817b      	strh	r3, [r7, #10]
 80049b6:	897b      	ldrh	r3, [r7, #10]
 80049b8:	f083 0310 	eor.w	r3, r3, #16
 80049bc:	817b      	strh	r3, [r7, #10]
 80049be:	897b      	ldrh	r3, [r7, #10]
 80049c0:	f083 0320 	eor.w	r3, r3, #32
 80049c4:	817b      	strh	r3, [r7, #10]
 80049c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	441a      	add	r2, r3
 80049e0:	897b      	ldrh	r3, [r7, #10]
 80049e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	8013      	strh	r3, [r2, #0]
 80049f6:	f000 bcde 	b.w	80053b6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80049fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	7b1b      	ldrb	r3, [r3, #12]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f040 80bb 	bne.w	8004b82 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	699a      	ldr	r2, [r3, #24]
 8004a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d917      	bls.n	8004a58 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8004a28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8004a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	699a      	ldr	r2, [r3, #24]
 8004a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a48:	1ad2      	subs	r2, r2, r3
 8004a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	619a      	str	r2, [r3, #24]
 8004a56:	e00e      	b.n	8004a76 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8004a58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8004a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2200      	movs	r2, #0
 8004a74:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	461a      	mov	r2, r3
 8004a96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	011a      	lsls	r2, r3, #4
 8004aae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ab8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004abc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ace:	801a      	strh	r2, [r3, #0]
 8004ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ad4:	2b3e      	cmp	r3, #62	; 0x3e
 8004ad6:	d924      	bls.n	8004b22 <USB_EPStartXfer+0xec2>
 8004ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004adc:	095b      	lsrs	r3, r3, #5
 8004ade:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ae6:	f003 031f 	and.w	r3, r3, #31
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d104      	bne.n	8004af8 <USB_EPStartXfer+0xe98>
 8004aee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004af2:	3b01      	subs	r3, #1
 8004af4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004af8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	029b      	lsls	r3, r3, #10
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b1c:	801a      	strh	r2, [r3, #0]
 8004b1e:	f000 bc10 	b.w	8005342 <USB_EPStartXfer+0x16e2>
 8004b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10c      	bne.n	8004b44 <USB_EPStartXfer+0xee4>
 8004b2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b40:	801a      	strh	r2, [r3, #0]
 8004b42:	e3fe      	b.n	8005342 <USB_EPStartXfer+0x16e2>
 8004b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b48:	085b      	lsrs	r3, r3, #1
 8004b4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d004      	beq.n	8004b64 <USB_EPStartXfer+0xf04>
 8004b5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004b5e:	3301      	adds	r3, #1
 8004b60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b68:	881b      	ldrh	r3, [r3, #0]
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	029b      	lsls	r3, r3, #10
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	4313      	orrs	r3, r2
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b7e:	801a      	strh	r2, [r3, #0]
 8004b80:	e3df      	b.n	8005342 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	78db      	ldrb	r3, [r3, #3]
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	f040 8218 	bne.w	8004fc4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	785b      	ldrb	r3, [r3, #1]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f040 809d 	bne.w	8004ce0 <USB_EPStartXfer+0x1080>
 8004ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004baa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bca:	4413      	add	r3, r2
 8004bcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	011a      	lsls	r2, r3, #4
 8004bde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004be2:	4413      	add	r3, r2
 8004be4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004be8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004bec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004bfe:	801a      	strh	r2, [r3, #0]
 8004c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	2b3e      	cmp	r3, #62	; 0x3e
 8004c0e:	d92b      	bls.n	8004c68 <USB_EPStartXfer+0x1008>
 8004c10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	095b      	lsrs	r3, r3, #5
 8004c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	f003 031f 	and.w	r3, r3, #31
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d104      	bne.n	8004c40 <USB_EPStartXfer+0xfe0>
 8004c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	029b      	lsls	r3, r3, #10
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	4313      	orrs	r3, r2
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c64:	801a      	strh	r2, [r3, #0]
 8004c66:	e070      	b.n	8004d4a <USB_EPStartXfer+0x10ea>
 8004c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10c      	bne.n	8004c92 <USB_EPStartXfer+0x1032>
 8004c78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c7c:	881b      	ldrh	r3, [r3, #0]
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c8e:	801a      	strh	r2, [r3, #0]
 8004c90:	e05b      	b.n	8004d4a <USB_EPStartXfer+0x10ea>
 8004c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	085b      	lsrs	r3, r3, #1
 8004ca0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d004      	beq.n	8004cc2 <USB_EPStartXfer+0x1062>
 8004cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004cc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	029b      	lsls	r3, r3, #10
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004cdc:	801a      	strh	r2, [r3, #0]
 8004cde:	e034      	b.n	8004d4a <USB_EPStartXfer+0x10ea>
 8004ce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ce4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	785b      	ldrb	r3, [r3, #1]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d12c      	bne.n	8004d4a <USB_EPStartXfer+0x10ea>
 8004cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cf4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004d14:	4413      	add	r3, r2
 8004d16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	011a      	lsls	r2, r3, #4
 8004d28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004d48:	801a      	strh	r2, [r3, #0]
 8004d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	785b      	ldrb	r3, [r3, #1]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f040 809d 	bne.w	8004ea4 <USB_EPStartXfer+0x1244>
 8004d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	461a      	mov	r2, r3
 8004d8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d8e:	4413      	add	r3, r2
 8004d90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	011a      	lsls	r2, r3, #4
 8004da2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004da6:	4413      	add	r3, r2
 8004da8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004dac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004db0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004dc2:	801a      	strh	r2, [r3, #0]
 8004dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	2b3e      	cmp	r3, #62	; 0x3e
 8004dd2:	d92b      	bls.n	8004e2c <USB_EPStartXfer+0x11cc>
 8004dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	095b      	lsrs	r3, r3, #5
 8004de2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	f003 031f 	and.w	r3, r3, #31
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d104      	bne.n	8004e04 <USB_EPStartXfer+0x11a4>
 8004dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	029b      	lsls	r3, r3, #10
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	4313      	orrs	r3, r2
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e28:	801a      	strh	r2, [r3, #0]
 8004e2a:	e069      	b.n	8004f00 <USB_EPStartXfer+0x12a0>
 8004e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10c      	bne.n	8004e56 <USB_EPStartXfer+0x11f6>
 8004e3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e52:	801a      	strh	r2, [r3, #0]
 8004e54:	e054      	b.n	8004f00 <USB_EPStartXfer+0x12a0>
 8004e56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	085b      	lsrs	r3, r3, #1
 8004e64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d004      	beq.n	8004e86 <USB_EPStartXfer+0x1226>
 8004e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e80:	3301      	adds	r3, #1
 8004e82:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004e86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	029b      	lsls	r3, r3, #10
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ea0:	801a      	strh	r2, [r3, #0]
 8004ea2:	e02d      	b.n	8004f00 <USB_EPStartXfer+0x12a0>
 8004ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	785b      	ldrb	r3, [r3, #1]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d125      	bne.n	8004f00 <USB_EPStartXfer+0x12a0>
 8004eb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004eca:	4413      	add	r3, r2
 8004ecc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004ed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	011a      	lsls	r2, r3, #4
 8004ede:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ee8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004efe:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69db      	ldr	r3, [r3, #28]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 8218 	beq.w	8005342 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004f32:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d005      	beq.n	8004f4a <USB_EPStartXfer+0x12ea>
 8004f3e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10d      	bne.n	8004f66 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004f4a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f040 81f5 	bne.w	8005342 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004f58:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f040 81ee 	bne.w	8005342 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4413      	add	r3, r2
 8004f80:	881b      	ldrh	r3, [r3, #0]
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8004f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	441a      	add	r2, r3
 8004faa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8004fae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	8013      	strh	r3, [r2, #0]
 8004fc2:	e1be      	b.n	8005342 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004fc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	78db      	ldrb	r3, [r3, #3]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	f040 81b4 	bne.w	800533e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699a      	ldr	r2, [r3, #24]
 8004fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fe6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d917      	bls.n	8005022 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8004ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ff6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8005002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699a      	ldr	r2, [r3, #24]
 800500e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005012:	1ad2      	subs	r2, r2, r3
 8005014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	619a      	str	r2, [r3, #24]
 8005020:	e00e      	b.n	8005040 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005026:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8005032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2200      	movs	r2, #0
 800503e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	785b      	ldrb	r3, [r3, #1]
 800504c:	2b00      	cmp	r3, #0
 800504e:	f040 8085 	bne.w	800515c <USB_EPStartXfer+0x14fc>
 8005052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005056:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005064:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800506e:	b29b      	uxth	r3, r3
 8005070:	461a      	mov	r2, r3
 8005072:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005076:	4413      	add	r3, r2
 8005078:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800507c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005080:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	011a      	lsls	r2, r3, #4
 800508a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800508e:	4413      	add	r3, r2
 8005090:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005094:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005098:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800509c:	881b      	ldrh	r3, [r3, #0]
 800509e:	b29b      	uxth	r3, r3
 80050a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050aa:	801a      	strh	r2, [r3, #0]
 80050ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050b0:	2b3e      	cmp	r3, #62	; 0x3e
 80050b2:	d923      	bls.n	80050fc <USB_EPStartXfer+0x149c>
 80050b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050b8:	095b      	lsrs	r3, r3, #5
 80050ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80050be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050c2:	f003 031f 	and.w	r3, r3, #31
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d104      	bne.n	80050d4 <USB_EPStartXfer+0x1474>
 80050ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050ce:	3b01      	subs	r3, #1
 80050d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80050d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050d8:	881b      	ldrh	r3, [r3, #0]
 80050da:	b29a      	uxth	r2, r3
 80050dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	029b      	lsls	r3, r3, #10
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	4313      	orrs	r3, r2
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050f8:	801a      	strh	r2, [r3, #0]
 80050fa:	e060      	b.n	80051be <USB_EPStartXfer+0x155e>
 80050fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10c      	bne.n	800511e <USB_EPStartXfer+0x14be>
 8005104:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005108:	881b      	ldrh	r3, [r3, #0]
 800510a:	b29b      	uxth	r3, r3
 800510c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005114:	b29a      	uxth	r2, r3
 8005116:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800511a:	801a      	strh	r2, [r3, #0]
 800511c:	e04f      	b.n	80051be <USB_EPStartXfer+0x155e>
 800511e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005122:	085b      	lsrs	r3, r3, #1
 8005124:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	2b00      	cmp	r3, #0
 8005132:	d004      	beq.n	800513e <USB_EPStartXfer+0x14de>
 8005134:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005138:	3301      	adds	r3, #1
 800513a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800513e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005142:	881b      	ldrh	r3, [r3, #0]
 8005144:	b29a      	uxth	r2, r3
 8005146:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800514a:	b29b      	uxth	r3, r3
 800514c:	029b      	lsls	r3, r3, #10
 800514e:	b29b      	uxth	r3, r3
 8005150:	4313      	orrs	r3, r2
 8005152:	b29a      	uxth	r2, r3
 8005154:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005158:	801a      	strh	r2, [r3, #0]
 800515a:	e030      	b.n	80051be <USB_EPStartXfer+0x155e>
 800515c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	785b      	ldrb	r3, [r3, #1]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d128      	bne.n	80051be <USB_EPStartXfer+0x155e>
 800516c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005170:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800517a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800517e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005188:	b29b      	uxth	r3, r3
 800518a:	461a      	mov	r2, r3
 800518c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005190:	4413      	add	r3, r2
 8005192:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800519a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	011a      	lsls	r2, r3, #4
 80051a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051a8:	4413      	add	r3, r2
 80051aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80051bc:	801a      	strh	r2, [r3, #0]
 80051be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80051cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	785b      	ldrb	r3, [r3, #1]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f040 8085 	bne.w	80052e8 <USB_EPStartXfer+0x1688>
 80051de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80051ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	461a      	mov	r2, r3
 80051fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005202:	4413      	add	r3, r2
 8005204:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800520c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	011a      	lsls	r2, r3, #4
 8005216:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800521a:	4413      	add	r3, r2
 800521c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005220:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005224:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005228:	881b      	ldrh	r3, [r3, #0]
 800522a:	b29b      	uxth	r3, r3
 800522c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005230:	b29a      	uxth	r2, r3
 8005232:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005236:	801a      	strh	r2, [r3, #0]
 8005238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800523c:	2b3e      	cmp	r3, #62	; 0x3e
 800523e:	d923      	bls.n	8005288 <USB_EPStartXfer+0x1628>
 8005240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005244:	095b      	lsrs	r3, r3, #5
 8005246:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800524a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800524e:	f003 031f 	and.w	r3, r3, #31
 8005252:	2b00      	cmp	r3, #0
 8005254:	d104      	bne.n	8005260 <USB_EPStartXfer+0x1600>
 8005256:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800525a:	3b01      	subs	r3, #1
 800525c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005260:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005264:	881b      	ldrh	r3, [r3, #0]
 8005266:	b29a      	uxth	r2, r3
 8005268:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800526c:	b29b      	uxth	r3, r3
 800526e:	029b      	lsls	r3, r3, #10
 8005270:	b29b      	uxth	r3, r3
 8005272:	4313      	orrs	r3, r2
 8005274:	b29b      	uxth	r3, r3
 8005276:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800527a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800527e:	b29a      	uxth	r2, r3
 8005280:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005284:	801a      	strh	r2, [r3, #0]
 8005286:	e05c      	b.n	8005342 <USB_EPStartXfer+0x16e2>
 8005288:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10c      	bne.n	80052aa <USB_EPStartXfer+0x164a>
 8005290:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005294:	881b      	ldrh	r3, [r3, #0]
 8005296:	b29b      	uxth	r3, r3
 8005298:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800529c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80052a6:	801a      	strh	r2, [r3, #0]
 80052a8:	e04b      	b.n	8005342 <USB_EPStartXfer+0x16e2>
 80052aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ae:	085b      	lsrs	r3, r3, #1
 80052b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d004      	beq.n	80052ca <USB_EPStartXfer+0x166a>
 80052c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052c4:	3301      	adds	r3, #1
 80052c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80052ce:	881b      	ldrh	r3, [r3, #0]
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	029b      	lsls	r3, r3, #10
 80052da:	b29b      	uxth	r3, r3
 80052dc:	4313      	orrs	r3, r2
 80052de:	b29a      	uxth	r2, r3
 80052e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80052e4:	801a      	strh	r2, [r3, #0]
 80052e6:	e02c      	b.n	8005342 <USB_EPStartXfer+0x16e2>
 80052e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	785b      	ldrb	r3, [r3, #1]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d124      	bne.n	8005342 <USB_EPStartXfer+0x16e2>
 80052f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005306:	b29b      	uxth	r3, r3
 8005308:	461a      	mov	r2, r3
 800530a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800530e:	4413      	add	r3, r2
 8005310:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005318:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	011a      	lsls	r2, r3, #4
 8005322:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005326:	4413      	add	r3, r2
 8005328:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800532c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005334:	b29a      	uxth	r2, r3
 8005336:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800533a:	801a      	strh	r2, [r3, #0]
 800533c:	e001      	b.n	8005342 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e03a      	b.n	80053b8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005346:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	b29b      	uxth	r3, r3
 8005360:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005368:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800536c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005370:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005374:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005378:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800537c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005380:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005388:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	441a      	add	r2, r3
 800539e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80053a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b085      	sub	sp, #20
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	785b      	ldrb	r3, [r3, #1]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d020      	beq.n	8005416 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ea:	81bb      	strh	r3, [r7, #12]
 80053ec:	89bb      	ldrh	r3, [r7, #12]
 80053ee:	f083 0310 	eor.w	r3, r3, #16
 80053f2:	81bb      	strh	r3, [r7, #12]
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	441a      	add	r2, r3
 80053fe:	89bb      	ldrh	r3, [r7, #12]
 8005400:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005404:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005408:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800540c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005410:	b29b      	uxth	r3, r3
 8005412:	8013      	strh	r3, [r2, #0]
 8005414:	e01f      	b.n	8005456 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	4413      	add	r3, r2
 8005420:	881b      	ldrh	r3, [r3, #0]
 8005422:	b29b      	uxth	r3, r3
 8005424:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800542c:	81fb      	strh	r3, [r7, #14]
 800542e:	89fb      	ldrh	r3, [r7, #14]
 8005430:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005434:	81fb      	strh	r3, [r7, #14]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	441a      	add	r2, r3
 8005440:	89fb      	ldrh	r3, [r7, #14]
 8005442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800544a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800544e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005452:	b29b      	uxth	r3, r3
 8005454:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	bc80      	pop	{r7}
 8005460:	4770      	bx	lr

08005462 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005462:	b480      	push	{r7}
 8005464:	b087      	sub	sp, #28
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	7b1b      	ldrb	r3, [r3, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	f040 809d 	bne.w	80055b0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	785b      	ldrb	r3, [r3, #1]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d04c      	beq.n	8005518 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	881b      	ldrh	r3, [r3, #0]
 800548a:	823b      	strh	r3, [r7, #16]
 800548c:	8a3b      	ldrh	r3, [r7, #16]
 800548e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005492:	2b00      	cmp	r3, #0
 8005494:	d01b      	beq.n	80054ce <USB_EPClearStall+0x6c>
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4413      	add	r3, r2
 80054a0:	881b      	ldrh	r3, [r3, #0]
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ac:	81fb      	strh	r3, [r7, #14]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	441a      	add	r2, r3
 80054b8:	89fb      	ldrh	r3, [r7, #14]
 80054ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	78db      	ldrb	r3, [r3, #3]
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d06c      	beq.n	80055b0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4413      	add	r3, r2
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ec:	81bb      	strh	r3, [r7, #12]
 80054ee:	89bb      	ldrh	r3, [r7, #12]
 80054f0:	f083 0320 	eor.w	r3, r3, #32
 80054f4:	81bb      	strh	r3, [r7, #12]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	441a      	add	r2, r3
 8005500:	89bb      	ldrh	r3, [r7, #12]
 8005502:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005506:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800550a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800550e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005512:	b29b      	uxth	r3, r3
 8005514:	8013      	strh	r3, [r2, #0]
 8005516:	e04b      	b.n	80055b0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	881b      	ldrh	r3, [r3, #0]
 8005524:	82fb      	strh	r3, [r7, #22]
 8005526:	8afb      	ldrh	r3, [r7, #22]
 8005528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d01b      	beq.n	8005568 <USB_EPClearStall+0x106>
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	881b      	ldrh	r3, [r3, #0]
 800553c:	b29b      	uxth	r3, r3
 800553e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005546:	82bb      	strh	r3, [r7, #20]
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	441a      	add	r2, r3
 8005552:	8abb      	ldrh	r3, [r7, #20]
 8005554:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005558:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800555c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005564:	b29b      	uxth	r3, r3
 8005566:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	b29b      	uxth	r3, r3
 8005576:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800557a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557e:	827b      	strh	r3, [r7, #18]
 8005580:	8a7b      	ldrh	r3, [r7, #18]
 8005582:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005586:	827b      	strh	r3, [r7, #18]
 8005588:	8a7b      	ldrh	r3, [r7, #18]
 800558a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800558e:	827b      	strh	r3, [r7, #18]
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	441a      	add	r2, r3
 800559a:	8a7b      	ldrh	r3, [r7, #18]
 800559c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	371c      	adds	r7, #28
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bc80      	pop	{r7}
 80055ba:	4770      	bx	lr

080055bc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	460b      	mov	r3, r1
 80055c6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80055c8:	78fb      	ldrb	r3, [r7, #3]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d103      	bne.n	80055d6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2280      	movs	r2, #128	; 0x80
 80055d2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	bc80      	pop	{r7}
 80055e0:	4770      	bx	lr

080055e2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bc80      	pop	{r7}
 80055f4:	4770      	bx	lr

080055f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b083      	sub	sp, #12
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	bc80      	pop	{r7}
 8005608:	4770      	bx	lr

0800560a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800560a:	b480      	push	{r7}
 800560c:	b085      	sub	sp, #20
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005618:	b29b      	uxth	r3, r3
 800561a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800561c:	68fb      	ldr	r3, [r7, #12]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	bc80      	pop	{r7}
 8005626:	4770      	bx	lr

08005628 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	bc80      	pop	{r7}
 800563c:	4770      	bx	lr

0800563e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800563e:	b480      	push	{r7}
 8005640:	b08b      	sub	sp, #44	; 0x2c
 8005642:	af00      	add	r7, sp, #0
 8005644:	60f8      	str	r0, [r7, #12]
 8005646:	60b9      	str	r1, [r7, #8]
 8005648:	4611      	mov	r1, r2
 800564a:	461a      	mov	r2, r3
 800564c:	460b      	mov	r3, r1
 800564e:	80fb      	strh	r3, [r7, #6]
 8005650:	4613      	mov	r3, r2
 8005652:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005654:	88bb      	ldrh	r3, [r7, #4]
 8005656:	3301      	adds	r3, #1
 8005658:	085b      	lsrs	r3, r3, #1
 800565a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005664:	88fb      	ldrh	r3, [r7, #6]
 8005666:	005a      	lsls	r2, r3, #1
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005670:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	627b      	str	r3, [r7, #36]	; 0x24
 8005676:	e01e      	b.n	80056b6 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	3301      	adds	r3, #1
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	021b      	lsls	r3, r3, #8
 8005686:	b21a      	sxth	r2, r3
 8005688:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800568c:	4313      	orrs	r3, r2
 800568e:	b21b      	sxth	r3, r3
 8005690:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	8a7a      	ldrh	r2, [r7, #18]
 8005696:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	3302      	adds	r3, #2
 800569c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	3302      	adds	r3, #2
 80056a2:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	3301      	adds	r3, #1
 80056a8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	3301      	adds	r3, #1
 80056ae:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	3b01      	subs	r3, #1
 80056b4:	627b      	str	r3, [r7, #36]	; 0x24
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1dd      	bne.n	8005678 <USB_WritePMA+0x3a>
  }
}
 80056bc:	bf00      	nop
 80056be:	bf00      	nop
 80056c0:	372c      	adds	r7, #44	; 0x2c
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bc80      	pop	{r7}
 80056c6:	4770      	bx	lr

080056c8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b08b      	sub	sp, #44	; 0x2c
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	4611      	mov	r1, r2
 80056d4:	461a      	mov	r2, r3
 80056d6:	460b      	mov	r3, r1
 80056d8:	80fb      	strh	r3, [r7, #6]
 80056da:	4613      	mov	r3, r2
 80056dc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80056de:	88bb      	ldrh	r3, [r7, #4]
 80056e0:	085b      	lsrs	r3, r3, #1
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80056ee:	88fb      	ldrh	r3, [r7, #6]
 80056f0:	005a      	lsls	r2, r3, #1
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056fa:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005700:	e01b      	b.n	800573a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	b29b      	uxth	r3, r3
 8005708:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	3302      	adds	r3, #2
 800570e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	b2da      	uxtb	r2, r3
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	3301      	adds	r3, #1
 800571c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	0a1b      	lsrs	r3, r3, #8
 8005722:	b2da      	uxtb	r2, r3
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	3301      	adds	r3, #1
 800572c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	3302      	adds	r3, #2
 8005732:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	3b01      	subs	r3, #1
 8005738:	627b      	str	r3, [r7, #36]	; 0x24
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1e0      	bne.n	8005702 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005740:	88bb      	ldrh	r3, [r7, #4]
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	b29b      	uxth	r3, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	d007      	beq.n	800575c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	b29b      	uxth	r3, r3
 8005752:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	b2da      	uxtb	r2, r3
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	701a      	strb	r2, [r3, #0]
  }
}
 800575c:	bf00      	nop
 800575e:	372c      	adds	r7, #44	; 0x2c
 8005760:	46bd      	mov	sp, r7
 8005762:	bc80      	pop	{r7}
 8005764:	4770      	bx	lr

08005766 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b082      	sub	sp, #8
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
 800576e:	460b      	mov	r3, r1
 8005770:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005772:	2304      	movs	r3, #4
 8005774:	2203      	movs	r2, #3
 8005776:	2181      	movs	r1, #129	; 0x81
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f001 fc84 	bl	8007086 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005784:	2010      	movs	r0, #16
 8005786:	f001 fd93 	bl	80072b0 <USBD_static_malloc>
 800578a:	4602      	mov	r2, r0
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 800579c:	2302      	movs	r3, #2
 800579e:	e005      	b.n	80057ac <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057a6:	2200      	movs	r2, #0
 80057a8:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80057c0:	2181      	movs	r1, #129	; 0x81
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f001 fc85 	bl	80070d2 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d009      	beq.n	80057ec <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057de:	4618      	mov	r0, r3
 80057e0:	f001 fd72 	bl	80072c8 <USBD_static_free>
    pdev->pClassData = NULL;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
	...

080057f8 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b088      	sub	sp, #32
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005808:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800580a:	2300      	movs	r3, #0
 800580c:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800580e:	2300      	movs	r3, #0
 8005810:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005822:	2b00      	cmp	r3, #0
 8005824:	d045      	beq.n	80058b2 <USBD_HID_Setup+0xba>
 8005826:	2b20      	cmp	r3, #32
 8005828:	f040 80d3 	bne.w	80059d2 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	785b      	ldrb	r3, [r3, #1]
 8005830:	3b02      	subs	r3, #2
 8005832:	2b09      	cmp	r3, #9
 8005834:	d835      	bhi.n	80058a2 <USBD_HID_Setup+0xaa>
 8005836:	a201      	add	r2, pc, #4	; (adr r2, 800583c <USBD_HID_Setup+0x44>)
 8005838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583c:	08005893 	.word	0x08005893
 8005840:	08005873 	.word	0x08005873
 8005844:	080058a3 	.word	0x080058a3
 8005848:	080058a3 	.word	0x080058a3
 800584c:	080058a3 	.word	0x080058a3
 8005850:	080058a3 	.word	0x080058a3
 8005854:	080058a3 	.word	0x080058a3
 8005858:	080058a3 	.word	0x080058a3
 800585c:	08005881 	.word	0x08005881
 8005860:	08005865 	.word	0x08005865
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	885b      	ldrh	r3, [r3, #2]
 8005868:	b2db      	uxtb	r3, r3
 800586a:	461a      	mov	r2, r3
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	601a      	str	r2, [r3, #0]
          break;
 8005870:	e01e      	b.n	80058b0 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	2201      	movs	r2, #1
 8005876:	4619      	mov	r1, r3
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f001 f944 	bl	8006b06 <USBD_CtlSendData>
          break;
 800587e:	e017      	b.n	80058b0 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	885b      	ldrh	r3, [r3, #2]
 8005884:	0a1b      	lsrs	r3, r3, #8
 8005886:	b29b      	uxth	r3, r3
 8005888:	b2db      	uxtb	r3, r3
 800588a:	461a      	mov	r2, r3
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	605a      	str	r2, [r3, #4]
          break;
 8005890:	e00e      	b.n	80058b0 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	3304      	adds	r3, #4
 8005896:	2201      	movs	r2, #1
 8005898:	4619      	mov	r1, r3
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f001 f933 	bl	8006b06 <USBD_CtlSendData>
          break;
 80058a0:	e006      	b.n	80058b0 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 80058a2:	6839      	ldr	r1, [r7, #0]
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f001 f8c4 	bl	8006a32 <USBD_CtlError>
          ret = USBD_FAIL;
 80058aa:	2302      	movs	r3, #2
 80058ac:	75fb      	strb	r3, [r7, #23]
          break;
 80058ae:	bf00      	nop
      }
      break;
 80058b0:	e096      	b.n	80059e0 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	785b      	ldrb	r3, [r3, #1]
 80058b6:	2b0b      	cmp	r3, #11
 80058b8:	f200 8083 	bhi.w	80059c2 <USBD_HID_Setup+0x1ca>
 80058bc:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <USBD_HID_Setup+0xcc>)
 80058be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c2:	bf00      	nop
 80058c4:	080058f5 	.word	0x080058f5
 80058c8:	080059c3 	.word	0x080059c3
 80058cc:	080059c3 	.word	0x080059c3
 80058d0:	080059c3 	.word	0x080059c3
 80058d4:	080059c3 	.word	0x080059c3
 80058d8:	080059c3 	.word	0x080059c3
 80058dc:	0800591d 	.word	0x0800591d
 80058e0:	080059c3 	.word	0x080059c3
 80058e4:	080059c3 	.word	0x080059c3
 80058e8:	080059c3 	.word	0x080059c3
 80058ec:	08005975 	.word	0x08005975
 80058f0:	0800599d 	.word	0x0800599d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058fa:	2b03      	cmp	r3, #3
 80058fc:	d107      	bne.n	800590e <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80058fe:	f107 030e 	add.w	r3, r7, #14
 8005902:	2202      	movs	r2, #2
 8005904:	4619      	mov	r1, r3
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f001 f8fd 	bl	8006b06 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800590c:	e060      	b.n	80059d0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800590e:	6839      	ldr	r1, [r7, #0]
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f001 f88e 	bl	8006a32 <USBD_CtlError>
            ret = USBD_FAIL;
 8005916:	2302      	movs	r3, #2
 8005918:	75fb      	strb	r3, [r7, #23]
          break;
 800591a:	e059      	b.n	80059d0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	885b      	ldrh	r3, [r3, #2]
 8005920:	0a1b      	lsrs	r3, r3, #8
 8005922:	b29b      	uxth	r3, r3
 8005924:	2b22      	cmp	r3, #34	; 0x22
 8005926:	d108      	bne.n	800593a <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	88db      	ldrh	r3, [r3, #6]
 800592c:	2b3f      	cmp	r3, #63	; 0x3f
 800592e:	bf28      	it	cs
 8005930:	233f      	movcs	r3, #63	; 0x3f
 8005932:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8005934:	4b2d      	ldr	r3, [pc, #180]	; (80059ec <USBD_HID_Setup+0x1f4>)
 8005936:	61bb      	str	r3, [r7, #24]
 8005938:	e015      	b.n	8005966 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	885b      	ldrh	r3, [r3, #2]
 800593e:	0a1b      	lsrs	r3, r3, #8
 8005940:	b29b      	uxth	r3, r3
 8005942:	2b21      	cmp	r3, #33	; 0x21
 8005944:	d108      	bne.n	8005958 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8005946:	4b2a      	ldr	r3, [pc, #168]	; (80059f0 <USBD_HID_Setup+0x1f8>)
 8005948:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	88db      	ldrh	r3, [r3, #6]
 800594e:	2b09      	cmp	r3, #9
 8005950:	bf28      	it	cs
 8005952:	2309      	movcs	r3, #9
 8005954:	83fb      	strh	r3, [r7, #30]
 8005956:	e006      	b.n	8005966 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005958:	6839      	ldr	r1, [r7, #0]
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f001 f869 	bl	8006a32 <USBD_CtlError>
            ret = USBD_FAIL;
 8005960:	2302      	movs	r3, #2
 8005962:	75fb      	strb	r3, [r7, #23]
            break;
 8005964:	e034      	b.n	80059d0 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8005966:	8bfb      	ldrh	r3, [r7, #30]
 8005968:	461a      	mov	r2, r3
 800596a:	69b9      	ldr	r1, [r7, #24]
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f001 f8ca 	bl	8006b06 <USBD_CtlSendData>
          break;
 8005972:	e02d      	b.n	80059d0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800597a:	2b03      	cmp	r3, #3
 800597c:	d107      	bne.n	800598e <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	3308      	adds	r3, #8
 8005982:	2201      	movs	r2, #1
 8005984:	4619      	mov	r1, r3
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f001 f8bd 	bl	8006b06 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800598c:	e020      	b.n	80059d0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800598e:	6839      	ldr	r1, [r7, #0]
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f001 f84e 	bl	8006a32 <USBD_CtlError>
            ret = USBD_FAIL;
 8005996:	2302      	movs	r3, #2
 8005998:	75fb      	strb	r3, [r7, #23]
          break;
 800599a:	e019      	b.n	80059d0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059a2:	2b03      	cmp	r3, #3
 80059a4:	d106      	bne.n	80059b4 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	885b      	ldrh	r3, [r3, #2]
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	461a      	mov	r2, r3
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80059b2:	e00d      	b.n	80059d0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80059b4:	6839      	ldr	r1, [r7, #0]
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f001 f83b 	bl	8006a32 <USBD_CtlError>
            ret = USBD_FAIL;
 80059bc:	2302      	movs	r3, #2
 80059be:	75fb      	strb	r3, [r7, #23]
          break;
 80059c0:	e006      	b.n	80059d0 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 80059c2:	6839      	ldr	r1, [r7, #0]
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f001 f834 	bl	8006a32 <USBD_CtlError>
          ret = USBD_FAIL;
 80059ca:	2302      	movs	r3, #2
 80059cc:	75fb      	strb	r3, [r7, #23]
          break;
 80059ce:	bf00      	nop
      }
      break;
 80059d0:	e006      	b.n	80059e0 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 80059d2:	6839      	ldr	r1, [r7, #0]
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f001 f82c 	bl	8006a32 <USBD_CtlError>
      ret = USBD_FAIL;
 80059da:	2302      	movs	r3, #2
 80059dc:	75fb      	strb	r3, [r7, #23]
      break;
 80059de:	bf00      	nop
  }

  return ret;
 80059e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3720      	adds	r7, #32
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	20000200 	.word	0x20000200
 80059f0:	200001e8 	.word	0x200001e8

080059f4 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	4613      	mov	r3, r2
 8005a00:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a08:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a10:	2b03      	cmp	r3, #3
 8005a12:	d10c      	bne.n	8005a2e <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	7b1b      	ldrb	r3, [r3, #12]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d108      	bne.n	8005a2e <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8005a22:	88fb      	ldrh	r3, [r7, #6]
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	2181      	movs	r1, #129	; 0x81
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f001 fbfa 	bl	8007222 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3718      	adds	r7, #24
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2222      	movs	r2, #34	; 0x22
 8005a44:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8005a46:	4b03      	ldr	r3, [pc, #12]	; (8005a54 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bc80      	pop	{r7}
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	2000017c 	.word	0x2000017c

08005a58 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2222      	movs	r2, #34	; 0x22
 8005a64:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8005a66:	4b03      	ldr	r3, [pc, #12]	; (8005a74 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bc80      	pop	{r7}
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	200001a0 	.word	0x200001a0

08005a78 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2222      	movs	r2, #34	; 0x22
 8005a84:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8005a86:	4b03      	ldr	r3, [pc, #12]	; (8005a94 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bc80      	pop	{r7}
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	200001c4 	.word	0x200001c4

08005a98 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aaa:	2200      	movs	r2, #0
 8005aac:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bc80      	pop	{r7}
 8005ab8:	4770      	bx	lr
	...

08005abc <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	220a      	movs	r2, #10
 8005ac8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8005aca:	4b03      	ldr	r3, [pc, #12]	; (8005ad8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bc80      	pop	{r7}
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	200001f4 	.word	0x200001f4

08005adc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005af0:	2302      	movs	r3, #2
 8005af2:	e01a      	b.n	8005b2a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d003      	beq.n	8005b14 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	79fa      	ldrb	r2, [r7, #7]
 8005b20:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f001 fa4c 	bl	8006fc0 <USBD_LL_Init>

  return USBD_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b085      	sub	sp, #20
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
 8005b3a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d006      	beq.n	8005b54 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	73fb      	strb	r3, [r7, #15]
 8005b52:	e001      	b.n	8005b58 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005b54:	2302      	movs	r3, #2
 8005b56:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bc80      	pop	{r7}
 8005b62:	4770      	bx	lr

08005b64 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f001 fa6f 	bl	8007050 <USBD_LL_Start>

  return USBD_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bc80      	pop	{r7}
 8005b8e:	4770      	bx	lr

08005b90 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	460b      	mov	r3, r1
 8005b9a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00c      	beq.n	8005bc4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	78fa      	ldrb	r2, [r7, #3]
 8005bb4:	4611      	mov	r1, r2
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	4798      	blx	r3
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b082      	sub	sp, #8
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	78fa      	ldrb	r2, [r7, #3]
 8005be4:	4611      	mov	r1, r2
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	4798      	blx	r3

  return USBD_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005c04:	6839      	ldr	r1, [r7, #0]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 fed7 	bl	80069ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005c28:	f003 031f 	and.w	r3, r3, #31
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d016      	beq.n	8005c5e <USBD_LL_SetupStage+0x6a>
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d81c      	bhi.n	8005c6e <USBD_LL_SetupStage+0x7a>
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d002      	beq.n	8005c3e <USBD_LL_SetupStage+0x4a>
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d008      	beq.n	8005c4e <USBD_LL_SetupStage+0x5a>
 8005c3c:	e017      	b.n	8005c6e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005c44:	4619      	mov	r1, r3
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f9ca 	bl	8005fe0 <USBD_StdDevReq>
      break;
 8005c4c:	e01a      	b.n	8005c84 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005c54:	4619      	mov	r1, r3
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 fa2c 	bl	80060b4 <USBD_StdItfReq>
      break;
 8005c5c:	e012      	b.n	8005c84 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005c64:	4619      	mov	r1, r3
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 fa6c 	bl	8006144 <USBD_StdEPReq>
      break;
 8005c6c:	e00a      	b.n	8005c84 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005c74:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f001 fa47 	bl	8007110 <USBD_LL_StallEP>
      break;
 8005c82:	bf00      	nop
  }

  return USBD_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b086      	sub	sp, #24
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	60f8      	str	r0, [r7, #12]
 8005c96:	460b      	mov	r3, r1
 8005c98:	607a      	str	r2, [r7, #4]
 8005c9a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005c9c:	7afb      	ldrb	r3, [r7, #11]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d14b      	bne.n	8005d3a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005ca8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005cb0:	2b03      	cmp	r3, #3
 8005cb2:	d134      	bne.n	8005d1e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	68da      	ldr	r2, [r3, #12]
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d919      	bls.n	8005cf4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	1ad2      	subs	r2, r2, r3
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	68da      	ldr	r2, [r3, #12]
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d203      	bcs.n	8005ce2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	e002      	b.n	8005ce8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	461a      	mov	r2, r3
 8005cea:	6879      	ldr	r1, [r7, #4]
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 ff38 	bl	8006b62 <USBD_CtlContinueRx>
 8005cf2:	e038      	b.n	8005d66 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00a      	beq.n	8005d16 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005d06:	2b03      	cmp	r3, #3
 8005d08:	d105      	bne.n	8005d16 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f000 ff35 	bl	8006b86 <USBD_CtlSendStatus>
 8005d1c:	e023      	b.n	8005d66 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d24:	2b05      	cmp	r3, #5
 8005d26:	d11e      	bne.n	8005d66 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005d30:	2100      	movs	r1, #0
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f001 f9ec 	bl	8007110 <USBD_LL_StallEP>
 8005d38:	e015      	b.n	8005d66 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00d      	beq.n	8005d62 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005d4c:	2b03      	cmp	r3, #3
 8005d4e:	d108      	bne.n	8005d62 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	7afa      	ldrb	r2, [r7, #11]
 8005d5a:	4611      	mov	r1, r2
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	4798      	blx	r3
 8005d60:	e001      	b.n	8005d66 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005d62:	2302      	movs	r3, #2
 8005d64:	e000      	b.n	8005d68 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3718      	adds	r7, #24
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	460b      	mov	r3, r1
 8005d7a:	607a      	str	r2, [r7, #4]
 8005d7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005d7e:	7afb      	ldrb	r3, [r7, #11]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d17f      	bne.n	8005e84 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	3314      	adds	r3, #20
 8005d88:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d15c      	bne.n	8005e4e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	68da      	ldr	r2, [r3, #12]
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d915      	bls.n	8005dcc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	68da      	ldr	r2, [r3, #12]
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	1ad2      	subs	r2, r2, r3
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	461a      	mov	r2, r3
 8005db6:	6879      	ldr	r1, [r7, #4]
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f000 fec0 	bl	8006b3e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f001 fa4f 	bl	8007268 <USBD_LL_PrepareReceive>
 8005dca:	e04e      	b.n	8005e6a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	6912      	ldr	r2, [r2, #16]
 8005dd4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005dd8:	fb01 f202 	mul.w	r2, r1, r2
 8005ddc:	1a9b      	subs	r3, r3, r2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d11c      	bne.n	8005e1c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	689a      	ldr	r2, [r3, #8]
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d316      	bcc.n	8005e1c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	689a      	ldr	r2, [r3, #8]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d20f      	bcs.n	8005e1c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	2100      	movs	r1, #0
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 fe9c 	bl	8006b3e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e0e:	2300      	movs	r3, #0
 8005e10:	2200      	movs	r2, #0
 8005e12:	2100      	movs	r1, #0
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f001 fa27 	bl	8007268 <USBD_LL_PrepareReceive>
 8005e1a:	e026      	b.n	8005e6a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00a      	beq.n	8005e3e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005e2e:	2b03      	cmp	r3, #3
 8005e30:	d105      	bne.n	8005e3e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005e3e:	2180      	movs	r1, #128	; 0x80
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f001 f965 	bl	8007110 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f000 feb0 	bl	8006bac <USBD_CtlReceiveStatus>
 8005e4c:	e00d      	b.n	8005e6a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e54:	2b04      	cmp	r3, #4
 8005e56:	d004      	beq.n	8005e62 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d103      	bne.n	8005e6a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005e62:	2180      	movs	r1, #128	; 0x80
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f001 f953 	bl	8007110 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d11d      	bne.n	8005eb0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f7ff fe81 	bl	8005b7c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005e82:	e015      	b.n	8005eb0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00d      	beq.n	8005eac <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005e96:	2b03      	cmp	r3, #3
 8005e98:	d108      	bne.n	8005eac <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	7afa      	ldrb	r2, [r7, #11]
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	4798      	blx	r3
 8005eaa:	e001      	b.n	8005eb0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005eac:	2302      	movs	r3, #2
 8005eae:	e000      	b.n	8005eb2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3718      	adds	r7, #24
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b082      	sub	sp, #8
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ec2:	2340      	movs	r3, #64	; 0x40
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f001 f8dc 	bl	8007086 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2240      	movs	r2, #64	; 0x40
 8005eda:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ede:	2340      	movs	r3, #64	; 0x40
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	2180      	movs	r1, #128	; 0x80
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f001 f8ce 	bl	8007086 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2240      	movs	r2, #64	; 0x40
 8005ef4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d009      	beq.n	8005f32 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	6852      	ldr	r2, [r2, #4]
 8005f2a:	b2d2      	uxtb	r2, r2
 8005f2c:	4611      	mov	r1, r2
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	4798      	blx	r3
  }

  return USBD_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3708      	adds	r7, #8
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	460b      	mov	r3, r1
 8005f46:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	78fa      	ldrb	r2, [r7, #3]
 8005f4c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bc80      	pop	{r7}
 8005f58:	4770      	bx	lr

08005f5a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b083      	sub	sp, #12
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2204      	movs	r2, #4
 8005f72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bc80      	pop	{r7}
 8005f80:	4770      	bx	lr

08005f82 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005f82:	b480      	push	{r7}
 8005f84:	b083      	sub	sp, #12
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f90:	2b04      	cmp	r3, #4
 8005f92:	d105      	bne.n	8005fa0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bc80      	pop	{r7}
 8005faa:	4770      	bx	lr

08005fac <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fba:	2b03      	cmp	r3, #3
 8005fbc:	d10b      	bne.n	8005fd6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d005      	beq.n	8005fd6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3708      	adds	r7, #8
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fea:	2300      	movs	r3, #0
 8005fec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ff6:	2b40      	cmp	r3, #64	; 0x40
 8005ff8:	d005      	beq.n	8006006 <USBD_StdDevReq+0x26>
 8005ffa:	2b40      	cmp	r3, #64	; 0x40
 8005ffc:	d84f      	bhi.n	800609e <USBD_StdDevReq+0xbe>
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d009      	beq.n	8006016 <USBD_StdDevReq+0x36>
 8006002:	2b20      	cmp	r3, #32
 8006004:	d14b      	bne.n	800609e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	6839      	ldr	r1, [r7, #0]
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	4798      	blx	r3
      break;
 8006014:	e048      	b.n	80060a8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	785b      	ldrb	r3, [r3, #1]
 800601a:	2b09      	cmp	r3, #9
 800601c:	d839      	bhi.n	8006092 <USBD_StdDevReq+0xb2>
 800601e:	a201      	add	r2, pc, #4	; (adr r2, 8006024 <USBD_StdDevReq+0x44>)
 8006020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006024:	08006075 	.word	0x08006075
 8006028:	08006089 	.word	0x08006089
 800602c:	08006093 	.word	0x08006093
 8006030:	0800607f 	.word	0x0800607f
 8006034:	08006093 	.word	0x08006093
 8006038:	08006057 	.word	0x08006057
 800603c:	0800604d 	.word	0x0800604d
 8006040:	08006093 	.word	0x08006093
 8006044:	0800606b 	.word	0x0800606b
 8006048:	08006061 	.word	0x08006061
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800604c:	6839      	ldr	r1, [r7, #0]
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f9dc 	bl	800640c <USBD_GetDescriptor>
          break;
 8006054:	e022      	b.n	800609c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006056:	6839      	ldr	r1, [r7, #0]
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fb3f 	bl	80066dc <USBD_SetAddress>
          break;
 800605e:	e01d      	b.n	800609c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006060:	6839      	ldr	r1, [r7, #0]
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fb7e 	bl	8006764 <USBD_SetConfig>
          break;
 8006068:	e018      	b.n	800609c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800606a:	6839      	ldr	r1, [r7, #0]
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fc07 	bl	8006880 <USBD_GetConfig>
          break;
 8006072:	e013      	b.n	800609c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006074:	6839      	ldr	r1, [r7, #0]
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 fc37 	bl	80068ea <USBD_GetStatus>
          break;
 800607c:	e00e      	b.n	800609c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800607e:	6839      	ldr	r1, [r7, #0]
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fc65 	bl	8006950 <USBD_SetFeature>
          break;
 8006086:	e009      	b.n	800609c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006088:	6839      	ldr	r1, [r7, #0]
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fc74 	bl	8006978 <USBD_ClrFeature>
          break;
 8006090:	e004      	b.n	800609c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006092:	6839      	ldr	r1, [r7, #0]
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 fccc 	bl	8006a32 <USBD_CtlError>
          break;
 800609a:	bf00      	nop
      }
      break;
 800609c:	e004      	b.n	80060a8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800609e:	6839      	ldr	r1, [r7, #0]
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 fcc6 	bl	8006a32 <USBD_CtlError>
      break;
 80060a6:	bf00      	nop
  }

  return ret;
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop

080060b4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060ca:	2b40      	cmp	r3, #64	; 0x40
 80060cc:	d005      	beq.n	80060da <USBD_StdItfReq+0x26>
 80060ce:	2b40      	cmp	r3, #64	; 0x40
 80060d0:	d82e      	bhi.n	8006130 <USBD_StdItfReq+0x7c>
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <USBD_StdItfReq+0x26>
 80060d6:	2b20      	cmp	r3, #32
 80060d8:	d12a      	bne.n	8006130 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060e0:	3b01      	subs	r3, #1
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d81d      	bhi.n	8006122 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	889b      	ldrh	r3, [r3, #4]
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d813      	bhi.n	8006118 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	6839      	ldr	r1, [r7, #0]
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	4798      	blx	r3
 80060fe:	4603      	mov	r3, r0
 8006100:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	88db      	ldrh	r3, [r3, #6]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d110      	bne.n	800612c <USBD_StdItfReq+0x78>
 800610a:	7bfb      	ldrb	r3, [r7, #15]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10d      	bne.n	800612c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 fd38 	bl	8006b86 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006116:	e009      	b.n	800612c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006118:	6839      	ldr	r1, [r7, #0]
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 fc89 	bl	8006a32 <USBD_CtlError>
          break;
 8006120:	e004      	b.n	800612c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006122:	6839      	ldr	r1, [r7, #0]
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 fc84 	bl	8006a32 <USBD_CtlError>
          break;
 800612a:	e000      	b.n	800612e <USBD_StdItfReq+0x7a>
          break;
 800612c:	bf00      	nop
      }
      break;
 800612e:	e004      	b.n	800613a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006130:	6839      	ldr	r1, [r7, #0]
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fc7d 	bl	8006a32 <USBD_CtlError>
      break;
 8006138:	bf00      	nop
  }

  return USBD_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	889b      	ldrh	r3, [r3, #4]
 8006156:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006160:	2b40      	cmp	r3, #64	; 0x40
 8006162:	d007      	beq.n	8006174 <USBD_StdEPReq+0x30>
 8006164:	2b40      	cmp	r3, #64	; 0x40
 8006166:	f200 8146 	bhi.w	80063f6 <USBD_StdEPReq+0x2b2>
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00a      	beq.n	8006184 <USBD_StdEPReq+0x40>
 800616e:	2b20      	cmp	r3, #32
 8006170:	f040 8141 	bne.w	80063f6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	6839      	ldr	r1, [r7, #0]
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	4798      	blx	r3
      break;
 8006182:	e13d      	b.n	8006400 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800618c:	2b20      	cmp	r3, #32
 800618e:	d10a      	bne.n	80061a6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	6839      	ldr	r1, [r7, #0]
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	4798      	blx	r3
 800619e:	4603      	mov	r3, r0
 80061a0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80061a2:	7bfb      	ldrb	r3, [r7, #15]
 80061a4:	e12d      	b.n	8006402 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	785b      	ldrb	r3, [r3, #1]
 80061aa:	2b03      	cmp	r3, #3
 80061ac:	d007      	beq.n	80061be <USBD_StdEPReq+0x7a>
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	f300 811b 	bgt.w	80063ea <USBD_StdEPReq+0x2a6>
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d072      	beq.n	800629e <USBD_StdEPReq+0x15a>
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d03a      	beq.n	8006232 <USBD_StdEPReq+0xee>
 80061bc:	e115      	b.n	80063ea <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d002      	beq.n	80061ce <USBD_StdEPReq+0x8a>
 80061c8:	2b03      	cmp	r3, #3
 80061ca:	d015      	beq.n	80061f8 <USBD_StdEPReq+0xb4>
 80061cc:	e02b      	b.n	8006226 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80061ce:	7bbb      	ldrb	r3, [r7, #14]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00c      	beq.n	80061ee <USBD_StdEPReq+0xaa>
 80061d4:	7bbb      	ldrb	r3, [r7, #14]
 80061d6:	2b80      	cmp	r3, #128	; 0x80
 80061d8:	d009      	beq.n	80061ee <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80061da:	7bbb      	ldrb	r3, [r7, #14]
 80061dc:	4619      	mov	r1, r3
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 ff96 	bl	8007110 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80061e4:	2180      	movs	r1, #128	; 0x80
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 ff92 	bl	8007110 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80061ec:	e020      	b.n	8006230 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80061ee:	6839      	ldr	r1, [r7, #0]
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 fc1e 	bl	8006a32 <USBD_CtlError>
              break;
 80061f6:	e01b      	b.n	8006230 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	885b      	ldrh	r3, [r3, #2]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10e      	bne.n	800621e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006200:	7bbb      	ldrb	r3, [r7, #14]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00b      	beq.n	800621e <USBD_StdEPReq+0xda>
 8006206:	7bbb      	ldrb	r3, [r7, #14]
 8006208:	2b80      	cmp	r3, #128	; 0x80
 800620a:	d008      	beq.n	800621e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	88db      	ldrh	r3, [r3, #6]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d104      	bne.n	800621e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006214:	7bbb      	ldrb	r3, [r7, #14]
 8006216:	4619      	mov	r1, r3
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 ff79 	bl	8007110 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 fcb1 	bl	8006b86 <USBD_CtlSendStatus>

              break;
 8006224:	e004      	b.n	8006230 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006226:	6839      	ldr	r1, [r7, #0]
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 fc02 	bl	8006a32 <USBD_CtlError>
              break;
 800622e:	bf00      	nop
          }
          break;
 8006230:	e0e0      	b.n	80063f4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006238:	2b02      	cmp	r3, #2
 800623a:	d002      	beq.n	8006242 <USBD_StdEPReq+0xfe>
 800623c:	2b03      	cmp	r3, #3
 800623e:	d015      	beq.n	800626c <USBD_StdEPReq+0x128>
 8006240:	e026      	b.n	8006290 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006242:	7bbb      	ldrb	r3, [r7, #14]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00c      	beq.n	8006262 <USBD_StdEPReq+0x11e>
 8006248:	7bbb      	ldrb	r3, [r7, #14]
 800624a:	2b80      	cmp	r3, #128	; 0x80
 800624c:	d009      	beq.n	8006262 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800624e:	7bbb      	ldrb	r3, [r7, #14]
 8006250:	4619      	mov	r1, r3
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 ff5c 	bl	8007110 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006258:	2180      	movs	r1, #128	; 0x80
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 ff58 	bl	8007110 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006260:	e01c      	b.n	800629c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006262:	6839      	ldr	r1, [r7, #0]
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fbe4 	bl	8006a32 <USBD_CtlError>
              break;
 800626a:	e017      	b.n	800629c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	885b      	ldrh	r3, [r3, #2]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d112      	bne.n	800629a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006274:	7bbb      	ldrb	r3, [r7, #14]
 8006276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800627a:	2b00      	cmp	r3, #0
 800627c:	d004      	beq.n	8006288 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800627e:	7bbb      	ldrb	r3, [r7, #14]
 8006280:	4619      	mov	r1, r3
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 ff63 	bl	800714e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 fc7c 	bl	8006b86 <USBD_CtlSendStatus>
              }
              break;
 800628e:	e004      	b.n	800629a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006290:	6839      	ldr	r1, [r7, #0]
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fbcd 	bl	8006a32 <USBD_CtlError>
              break;
 8006298:	e000      	b.n	800629c <USBD_StdEPReq+0x158>
              break;
 800629a:	bf00      	nop
          }
          break;
 800629c:	e0aa      	b.n	80063f4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d002      	beq.n	80062ae <USBD_StdEPReq+0x16a>
 80062a8:	2b03      	cmp	r3, #3
 80062aa:	d032      	beq.n	8006312 <USBD_StdEPReq+0x1ce>
 80062ac:	e097      	b.n	80063de <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062ae:	7bbb      	ldrb	r3, [r7, #14]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d007      	beq.n	80062c4 <USBD_StdEPReq+0x180>
 80062b4:	7bbb      	ldrb	r3, [r7, #14]
 80062b6:	2b80      	cmp	r3, #128	; 0x80
 80062b8:	d004      	beq.n	80062c4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80062ba:	6839      	ldr	r1, [r7, #0]
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 fbb8 	bl	8006a32 <USBD_CtlError>
                break;
 80062c2:	e091      	b.n	80063e8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	da0b      	bge.n	80062e4 <USBD_StdEPReq+0x1a0>
 80062cc:	7bbb      	ldrb	r3, [r7, #14]
 80062ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062d2:	4613      	mov	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	4413      	add	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	3310      	adds	r3, #16
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	4413      	add	r3, r2
 80062e0:	3304      	adds	r3, #4
 80062e2:	e00b      	b.n	80062fc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80062e4:	7bbb      	ldrb	r3, [r7, #14]
 80062e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80062ea:	4613      	mov	r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	4413      	add	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	4413      	add	r3, r2
 80062fa:	3304      	adds	r3, #4
 80062fc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	2200      	movs	r2, #0
 8006302:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	2202      	movs	r2, #2
 8006308:	4619      	mov	r1, r3
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 fbfb 	bl	8006b06 <USBD_CtlSendData>
              break;
 8006310:	e06a      	b.n	80063e8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006312:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006316:	2b00      	cmp	r3, #0
 8006318:	da11      	bge.n	800633e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800631a:	7bbb      	ldrb	r3, [r7, #14]
 800631c:	f003 020f 	and.w	r2, r3, #15
 8006320:	6879      	ldr	r1, [r7, #4]
 8006322:	4613      	mov	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	440b      	add	r3, r1
 800632c:	3318      	adds	r3, #24
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d117      	bne.n	8006364 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006334:	6839      	ldr	r1, [r7, #0]
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fb7b 	bl	8006a32 <USBD_CtlError>
                  break;
 800633c:	e054      	b.n	80063e8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800633e:	7bbb      	ldrb	r3, [r7, #14]
 8006340:	f003 020f 	and.w	r2, r3, #15
 8006344:	6879      	ldr	r1, [r7, #4]
 8006346:	4613      	mov	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	440b      	add	r3, r1
 8006350:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d104      	bne.n	8006364 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800635a:	6839      	ldr	r1, [r7, #0]
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 fb68 	bl	8006a32 <USBD_CtlError>
                  break;
 8006362:	e041      	b.n	80063e8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006364:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006368:	2b00      	cmp	r3, #0
 800636a:	da0b      	bge.n	8006384 <USBD_StdEPReq+0x240>
 800636c:	7bbb      	ldrb	r3, [r7, #14]
 800636e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006372:	4613      	mov	r3, r2
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4413      	add	r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	3310      	adds	r3, #16
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	4413      	add	r3, r2
 8006380:	3304      	adds	r3, #4
 8006382:	e00b      	b.n	800639c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006384:	7bbb      	ldrb	r3, [r7, #14]
 8006386:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800638a:	4613      	mov	r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4413      	add	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	4413      	add	r3, r2
 800639a:	3304      	adds	r3, #4
 800639c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800639e:	7bbb      	ldrb	r3, [r7, #14]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <USBD_StdEPReq+0x266>
 80063a4:	7bbb      	ldrb	r3, [r7, #14]
 80063a6:	2b80      	cmp	r3, #128	; 0x80
 80063a8:	d103      	bne.n	80063b2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	2200      	movs	r2, #0
 80063ae:	601a      	str	r2, [r3, #0]
 80063b0:	e00e      	b.n	80063d0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80063b2:	7bbb      	ldrb	r3, [r7, #14]
 80063b4:	4619      	mov	r1, r3
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 fee8 	bl	800718c <USBD_LL_IsStallEP>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	2201      	movs	r2, #1
 80063c6:	601a      	str	r2, [r3, #0]
 80063c8:	e002      	b.n	80063d0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	2200      	movs	r2, #0
 80063ce:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	2202      	movs	r2, #2
 80063d4:	4619      	mov	r1, r3
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fb95 	bl	8006b06 <USBD_CtlSendData>
              break;
 80063dc:	e004      	b.n	80063e8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80063de:	6839      	ldr	r1, [r7, #0]
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 fb26 	bl	8006a32 <USBD_CtlError>
              break;
 80063e6:	bf00      	nop
          }
          break;
 80063e8:	e004      	b.n	80063f4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80063ea:	6839      	ldr	r1, [r7, #0]
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 fb20 	bl	8006a32 <USBD_CtlError>
          break;
 80063f2:	bf00      	nop
      }
      break;
 80063f4:	e004      	b.n	8006400 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80063f6:	6839      	ldr	r1, [r7, #0]
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 fb1a 	bl	8006a32 <USBD_CtlError>
      break;
 80063fe:	bf00      	nop
  }

  return ret;
 8006400:	7bfb      	ldrb	r3, [r7, #15]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
	...

0800640c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006416:	2300      	movs	r3, #0
 8006418:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800641a:	2300      	movs	r3, #0
 800641c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800641e:	2300      	movs	r3, #0
 8006420:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	885b      	ldrh	r3, [r3, #2]
 8006426:	0a1b      	lsrs	r3, r3, #8
 8006428:	b29b      	uxth	r3, r3
 800642a:	3b01      	subs	r3, #1
 800642c:	2b06      	cmp	r3, #6
 800642e:	f200 8128 	bhi.w	8006682 <USBD_GetDescriptor+0x276>
 8006432:	a201      	add	r2, pc, #4	; (adr r2, 8006438 <USBD_GetDescriptor+0x2c>)
 8006434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006438:	08006455 	.word	0x08006455
 800643c:	0800646d 	.word	0x0800646d
 8006440:	080064ad 	.word	0x080064ad
 8006444:	08006683 	.word	0x08006683
 8006448:	08006683 	.word	0x08006683
 800644c:	08006623 	.word	0x08006623
 8006450:	0800664f 	.word	0x0800664f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	7c12      	ldrb	r2, [r2, #16]
 8006460:	f107 0108 	add.w	r1, r7, #8
 8006464:	4610      	mov	r0, r2
 8006466:	4798      	blx	r3
 8006468:	60f8      	str	r0, [r7, #12]
      break;
 800646a:	e112      	b.n	8006692 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	7c1b      	ldrb	r3, [r3, #16]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10d      	bne.n	8006490 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800647a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647c:	f107 0208 	add.w	r2, r7, #8
 8006480:	4610      	mov	r0, r2
 8006482:	4798      	blx	r3
 8006484:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	3301      	adds	r3, #1
 800648a:	2202      	movs	r2, #2
 800648c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800648e:	e100      	b.n	8006692 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006498:	f107 0208 	add.w	r2, r7, #8
 800649c:	4610      	mov	r0, r2
 800649e:	4798      	blx	r3
 80064a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	3301      	adds	r3, #1
 80064a6:	2202      	movs	r2, #2
 80064a8:	701a      	strb	r2, [r3, #0]
      break;
 80064aa:	e0f2      	b.n	8006692 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	885b      	ldrh	r3, [r3, #2]
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b05      	cmp	r3, #5
 80064b4:	f200 80ac 	bhi.w	8006610 <USBD_GetDescriptor+0x204>
 80064b8:	a201      	add	r2, pc, #4	; (adr r2, 80064c0 <USBD_GetDescriptor+0xb4>)
 80064ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064be:	bf00      	nop
 80064c0:	080064d9 	.word	0x080064d9
 80064c4:	0800650d 	.word	0x0800650d
 80064c8:	08006541 	.word	0x08006541
 80064cc:	08006575 	.word	0x08006575
 80064d0:	080065a9 	.word	0x080065a9
 80064d4:	080065dd 	.word	0x080065dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00b      	beq.n	80064fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	7c12      	ldrb	r2, [r2, #16]
 80064f0:	f107 0108 	add.w	r1, r7, #8
 80064f4:	4610      	mov	r0, r2
 80064f6:	4798      	blx	r3
 80064f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064fa:	e091      	b.n	8006620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064fc:	6839      	ldr	r1, [r7, #0]
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fa97 	bl	8006a32 <USBD_CtlError>
            err++;
 8006504:	7afb      	ldrb	r3, [r7, #11]
 8006506:	3301      	adds	r3, #1
 8006508:	72fb      	strb	r3, [r7, #11]
          break;
 800650a:	e089      	b.n	8006620 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00b      	beq.n	8006530 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	7c12      	ldrb	r2, [r2, #16]
 8006524:	f107 0108 	add.w	r1, r7, #8
 8006528:	4610      	mov	r0, r2
 800652a:	4798      	blx	r3
 800652c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800652e:	e077      	b.n	8006620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006530:	6839      	ldr	r1, [r7, #0]
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fa7d 	bl	8006a32 <USBD_CtlError>
            err++;
 8006538:	7afb      	ldrb	r3, [r7, #11]
 800653a:	3301      	adds	r3, #1
 800653c:	72fb      	strb	r3, [r7, #11]
          break;
 800653e:	e06f      	b.n	8006620 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00b      	beq.n	8006564 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	7c12      	ldrb	r2, [r2, #16]
 8006558:	f107 0108 	add.w	r1, r7, #8
 800655c:	4610      	mov	r0, r2
 800655e:	4798      	blx	r3
 8006560:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006562:	e05d      	b.n	8006620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006564:	6839      	ldr	r1, [r7, #0]
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fa63 	bl	8006a32 <USBD_CtlError>
            err++;
 800656c:	7afb      	ldrb	r3, [r7, #11]
 800656e:	3301      	adds	r3, #1
 8006570:	72fb      	strb	r3, [r7, #11]
          break;
 8006572:	e055      	b.n	8006620 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00b      	beq.n	8006598 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	7c12      	ldrb	r2, [r2, #16]
 800658c:	f107 0108 	add.w	r1, r7, #8
 8006590:	4610      	mov	r0, r2
 8006592:	4798      	blx	r3
 8006594:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006596:	e043      	b.n	8006620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006598:	6839      	ldr	r1, [r7, #0]
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fa49 	bl	8006a32 <USBD_CtlError>
            err++;
 80065a0:	7afb      	ldrb	r3, [r7, #11]
 80065a2:	3301      	adds	r3, #1
 80065a4:	72fb      	strb	r3, [r7, #11]
          break;
 80065a6:	e03b      	b.n	8006620 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00b      	beq.n	80065cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	7c12      	ldrb	r2, [r2, #16]
 80065c0:	f107 0108 	add.w	r1, r7, #8
 80065c4:	4610      	mov	r0, r2
 80065c6:	4798      	blx	r3
 80065c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065ca:	e029      	b.n	8006620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065cc:	6839      	ldr	r1, [r7, #0]
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 fa2f 	bl	8006a32 <USBD_CtlError>
            err++;
 80065d4:	7afb      	ldrb	r3, [r7, #11]
 80065d6:	3301      	adds	r3, #1
 80065d8:	72fb      	strb	r3, [r7, #11]
          break;
 80065da:	e021      	b.n	8006620 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00b      	beq.n	8006600 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	7c12      	ldrb	r2, [r2, #16]
 80065f4:	f107 0108 	add.w	r1, r7, #8
 80065f8:	4610      	mov	r0, r2
 80065fa:	4798      	blx	r3
 80065fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065fe:	e00f      	b.n	8006620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006600:	6839      	ldr	r1, [r7, #0]
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 fa15 	bl	8006a32 <USBD_CtlError>
            err++;
 8006608:	7afb      	ldrb	r3, [r7, #11]
 800660a:	3301      	adds	r3, #1
 800660c:	72fb      	strb	r3, [r7, #11]
          break;
 800660e:	e007      	b.n	8006620 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006610:	6839      	ldr	r1, [r7, #0]
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 fa0d 	bl	8006a32 <USBD_CtlError>
          err++;
 8006618:	7afb      	ldrb	r3, [r7, #11]
 800661a:	3301      	adds	r3, #1
 800661c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800661e:	e038      	b.n	8006692 <USBD_GetDescriptor+0x286>
 8006620:	e037      	b.n	8006692 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	7c1b      	ldrb	r3, [r3, #16]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d109      	bne.n	800663e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006632:	f107 0208 	add.w	r2, r7, #8
 8006636:	4610      	mov	r0, r2
 8006638:	4798      	blx	r3
 800663a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800663c:	e029      	b.n	8006692 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800663e:	6839      	ldr	r1, [r7, #0]
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f9f6 	bl	8006a32 <USBD_CtlError>
        err++;
 8006646:	7afb      	ldrb	r3, [r7, #11]
 8006648:	3301      	adds	r3, #1
 800664a:	72fb      	strb	r3, [r7, #11]
      break;
 800664c:	e021      	b.n	8006692 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	7c1b      	ldrb	r3, [r3, #16]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10d      	bne.n	8006672 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800665c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665e:	f107 0208 	add.w	r2, r7, #8
 8006662:	4610      	mov	r0, r2
 8006664:	4798      	blx	r3
 8006666:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	3301      	adds	r3, #1
 800666c:	2207      	movs	r2, #7
 800666e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006670:	e00f      	b.n	8006692 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006672:	6839      	ldr	r1, [r7, #0]
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 f9dc 	bl	8006a32 <USBD_CtlError>
        err++;
 800667a:	7afb      	ldrb	r3, [r7, #11]
 800667c:	3301      	adds	r3, #1
 800667e:	72fb      	strb	r3, [r7, #11]
      break;
 8006680:	e007      	b.n	8006692 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006682:	6839      	ldr	r1, [r7, #0]
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 f9d4 	bl	8006a32 <USBD_CtlError>
      err++;
 800668a:	7afb      	ldrb	r3, [r7, #11]
 800668c:	3301      	adds	r3, #1
 800668e:	72fb      	strb	r3, [r7, #11]
      break;
 8006690:	bf00      	nop
  }

  if (err != 0U)
 8006692:	7afb      	ldrb	r3, [r7, #11]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d11c      	bne.n	80066d2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006698:	893b      	ldrh	r3, [r7, #8]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d011      	beq.n	80066c2 <USBD_GetDescriptor+0x2b6>
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	88db      	ldrh	r3, [r3, #6]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00d      	beq.n	80066c2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	88da      	ldrh	r2, [r3, #6]
 80066aa:	893b      	ldrh	r3, [r7, #8]
 80066ac:	4293      	cmp	r3, r2
 80066ae:	bf28      	it	cs
 80066b0:	4613      	movcs	r3, r2
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80066b6:	893b      	ldrh	r3, [r7, #8]
 80066b8:	461a      	mov	r2, r3
 80066ba:	68f9      	ldr	r1, [r7, #12]
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fa22 	bl	8006b06 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	88db      	ldrh	r3, [r3, #6]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d104      	bne.n	80066d4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fa5b 	bl	8006b86 <USBD_CtlSendStatus>
 80066d0:	e000      	b.n	80066d4 <USBD_GetDescriptor+0x2c8>
    return;
 80066d2:	bf00      	nop
    }
  }
}
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop

080066dc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	889b      	ldrh	r3, [r3, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d130      	bne.n	8006750 <USBD_SetAddress+0x74>
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	88db      	ldrh	r3, [r3, #6]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d12c      	bne.n	8006750 <USBD_SetAddress+0x74>
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	885b      	ldrh	r3, [r3, #2]
 80066fa:	2b7f      	cmp	r3, #127	; 0x7f
 80066fc:	d828      	bhi.n	8006750 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	885b      	ldrh	r3, [r3, #2]
 8006702:	b2db      	uxtb	r3, r3
 8006704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006708:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006710:	2b03      	cmp	r3, #3
 8006712:	d104      	bne.n	800671e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006714:	6839      	ldr	r1, [r7, #0]
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f98b 	bl	8006a32 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800671c:	e01d      	b.n	800675a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	7bfa      	ldrb	r2, [r7, #15]
 8006722:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006726:	7bfb      	ldrb	r3, [r7, #15]
 8006728:	4619      	mov	r1, r3
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fd5a 	bl	80071e4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 fa28 	bl	8006b86 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006736:	7bfb      	ldrb	r3, [r7, #15]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d004      	beq.n	8006746 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2202      	movs	r2, #2
 8006740:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006744:	e009      	b.n	800675a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800674e:	e004      	b.n	800675a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006750:	6839      	ldr	r1, [r7, #0]
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f96d 	bl	8006a32 <USBD_CtlError>
  }
}
 8006758:	bf00      	nop
 800675a:	bf00      	nop
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
	...

08006764 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	885b      	ldrh	r3, [r3, #2]
 8006772:	b2da      	uxtb	r2, r3
 8006774:	4b41      	ldr	r3, [pc, #260]	; (800687c <USBD_SetConfig+0x118>)
 8006776:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006778:	4b40      	ldr	r3, [pc, #256]	; (800687c <USBD_SetConfig+0x118>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d904      	bls.n	800678a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f955 	bl	8006a32 <USBD_CtlError>
 8006788:	e075      	b.n	8006876 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006790:	2b02      	cmp	r3, #2
 8006792:	d002      	beq.n	800679a <USBD_SetConfig+0x36>
 8006794:	2b03      	cmp	r3, #3
 8006796:	d023      	beq.n	80067e0 <USBD_SetConfig+0x7c>
 8006798:	e062      	b.n	8006860 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800679a:	4b38      	ldr	r3, [pc, #224]	; (800687c <USBD_SetConfig+0x118>)
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d01a      	beq.n	80067d8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80067a2:	4b36      	ldr	r3, [pc, #216]	; (800687c <USBD_SetConfig+0x118>)
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	461a      	mov	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2203      	movs	r2, #3
 80067b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80067b4:	4b31      	ldr	r3, [pc, #196]	; (800687c <USBD_SetConfig+0x118>)
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	4619      	mov	r1, r3
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f7ff f9e8 	bl	8005b90 <USBD_SetClassConfig>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d104      	bne.n	80067d0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80067c6:	6839      	ldr	r1, [r7, #0]
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f932 	bl	8006a32 <USBD_CtlError>
            return;
 80067ce:	e052      	b.n	8006876 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 f9d8 	bl	8006b86 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80067d6:	e04e      	b.n	8006876 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f9d4 	bl	8006b86 <USBD_CtlSendStatus>
        break;
 80067de:	e04a      	b.n	8006876 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80067e0:	4b26      	ldr	r3, [pc, #152]	; (800687c <USBD_SetConfig+0x118>)
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d112      	bne.n	800680e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2202      	movs	r2, #2
 80067ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80067f0:	4b22      	ldr	r3, [pc, #136]	; (800687c <USBD_SetConfig+0x118>)
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	461a      	mov	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80067fa:	4b20      	ldr	r3, [pc, #128]	; (800687c <USBD_SetConfig+0x118>)
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	4619      	mov	r1, r3
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f7ff f9e4 	bl	8005bce <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f9bd 	bl	8006b86 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800680c:	e033      	b.n	8006876 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800680e:	4b1b      	ldr	r3, [pc, #108]	; (800687c <USBD_SetConfig+0x118>)
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	461a      	mov	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	429a      	cmp	r2, r3
 800681a:	d01d      	beq.n	8006858 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	b2db      	uxtb	r3, r3
 8006822:	4619      	mov	r1, r3
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f7ff f9d2 	bl	8005bce <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800682a:	4b14      	ldr	r3, [pc, #80]	; (800687c <USBD_SetConfig+0x118>)
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	461a      	mov	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006834:	4b11      	ldr	r3, [pc, #68]	; (800687c <USBD_SetConfig+0x118>)
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	4619      	mov	r1, r3
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7ff f9a8 	bl	8005b90 <USBD_SetClassConfig>
 8006840:	4603      	mov	r3, r0
 8006842:	2b02      	cmp	r3, #2
 8006844:	d104      	bne.n	8006850 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006846:	6839      	ldr	r1, [r7, #0]
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f8f2 	bl	8006a32 <USBD_CtlError>
            return;
 800684e:	e012      	b.n	8006876 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f998 	bl	8006b86 <USBD_CtlSendStatus>
        break;
 8006856:	e00e      	b.n	8006876 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f994 	bl	8006b86 <USBD_CtlSendStatus>
        break;
 800685e:	e00a      	b.n	8006876 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006860:	6839      	ldr	r1, [r7, #0]
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f8e5 	bl	8006a32 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006868:	4b04      	ldr	r3, [pc, #16]	; (800687c <USBD_SetConfig+0x118>)
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	4619      	mov	r1, r3
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7ff f9ad 	bl	8005bce <USBD_ClrClassConfig>
        break;
 8006874:	bf00      	nop
    }
  }
}
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	20000310 	.word	0x20000310

08006880 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	88db      	ldrh	r3, [r3, #6]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d004      	beq.n	800689c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006892:	6839      	ldr	r1, [r7, #0]
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 f8cc 	bl	8006a32 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800689a:	e022      	b.n	80068e2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	dc02      	bgt.n	80068ac <USBD_GetConfig+0x2c>
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	dc03      	bgt.n	80068b2 <USBD_GetConfig+0x32>
 80068aa:	e015      	b.n	80068d8 <USBD_GetConfig+0x58>
 80068ac:	2b03      	cmp	r3, #3
 80068ae:	d00b      	beq.n	80068c8 <USBD_GetConfig+0x48>
 80068b0:	e012      	b.n	80068d8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	3308      	adds	r3, #8
 80068bc:	2201      	movs	r2, #1
 80068be:	4619      	mov	r1, r3
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f920 	bl	8006b06 <USBD_CtlSendData>
        break;
 80068c6:	e00c      	b.n	80068e2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	3304      	adds	r3, #4
 80068cc:	2201      	movs	r2, #1
 80068ce:	4619      	mov	r1, r3
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f918 	bl	8006b06 <USBD_CtlSendData>
        break;
 80068d6:	e004      	b.n	80068e2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80068d8:	6839      	ldr	r1, [r7, #0]
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 f8a9 	bl	8006a32 <USBD_CtlError>
        break;
 80068e0:	bf00      	nop
}
 80068e2:	bf00      	nop
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b082      	sub	sp, #8
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068fa:	3b01      	subs	r3, #1
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d81e      	bhi.n	800693e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	88db      	ldrh	r3, [r3, #6]
 8006904:	2b02      	cmp	r3, #2
 8006906:	d004      	beq.n	8006912 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006908:	6839      	ldr	r1, [r7, #0]
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f891 	bl	8006a32 <USBD_CtlError>
        break;
 8006910:	e01a      	b.n	8006948 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800691e:	2b00      	cmp	r3, #0
 8006920:	d005      	beq.n	800692e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	f043 0202 	orr.w	r2, r3, #2
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	330c      	adds	r3, #12
 8006932:	2202      	movs	r2, #2
 8006934:	4619      	mov	r1, r3
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f8e5 	bl	8006b06 <USBD_CtlSendData>
      break;
 800693c:	e004      	b.n	8006948 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800693e:	6839      	ldr	r1, [r7, #0]
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f876 	bl	8006a32 <USBD_CtlError>
      break;
 8006946:	bf00      	nop
  }
}
 8006948:	bf00      	nop
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	885b      	ldrh	r3, [r3, #2]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d106      	bne.n	8006970 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f90b 	bl	8006b86 <USBD_CtlSendStatus>
  }
}
 8006970:	bf00      	nop
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006988:	3b01      	subs	r3, #1
 800698a:	2b02      	cmp	r3, #2
 800698c:	d80b      	bhi.n	80069a6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	885b      	ldrh	r3, [r3, #2]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d10c      	bne.n	80069b0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f8f1 	bl	8006b86 <USBD_CtlSendStatus>
      }
      break;
 80069a4:	e004      	b.n	80069b0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80069a6:	6839      	ldr	r1, [r7, #0]
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 f842 	bl	8006a32 <USBD_CtlError>
      break;
 80069ae:	e000      	b.n	80069b2 <USBD_ClrFeature+0x3a>
      break;
 80069b0:	bf00      	nop
  }
}
 80069b2:	bf00      	nop
 80069b4:	3708      	adds	r7, #8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80069ba:	b480      	push	{r7}
 80069bc:	b083      	sub	sp, #12
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	781a      	ldrb	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	785a      	ldrb	r2, [r3, #1]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	3302      	adds	r3, #2
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	b29a      	uxth	r2, r3
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	3303      	adds	r3, #3
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	021b      	lsls	r3, r3, #8
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	4413      	add	r3, r2
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	3304      	adds	r3, #4
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	3305      	adds	r3, #5
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	021b      	lsls	r3, r3, #8
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	4413      	add	r3, r2
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	3306      	adds	r3, #6
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	3307      	adds	r3, #7
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	021b      	lsls	r3, r3, #8
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	4413      	add	r3, r2
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	80da      	strh	r2, [r3, #6]

}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bc80      	pop	{r7}
 8006a30:	4770      	bx	lr

08006a32 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b082      	sub	sp, #8
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006a3c:	2180      	movs	r1, #128	; 0x80
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fb66 	bl	8007110 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006a44:	2100      	movs	r1, #0
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fb62 	bl	8007110 <USBD_LL_StallEP>
}
 8006a4c:	bf00      	nop
 8006a4e:	3708      	adds	r7, #8
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006a60:	2300      	movs	r3, #0
 8006a62:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d032      	beq.n	8006ad0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f000 f834 	bl	8006ad8 <USBD_GetLen>
 8006a70:	4603      	mov	r3, r0
 8006a72:	3301      	adds	r3, #1
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	005b      	lsls	r3, r3, #1
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006a7e:	7dfb      	ldrb	r3, [r7, #23]
 8006a80:	1c5a      	adds	r2, r3, #1
 8006a82:	75fa      	strb	r2, [r7, #23]
 8006a84:	461a      	mov	r2, r3
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	4413      	add	r3, r2
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	7812      	ldrb	r2, [r2, #0]
 8006a8e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006a90:	7dfb      	ldrb	r3, [r7, #23]
 8006a92:	1c5a      	adds	r2, r3, #1
 8006a94:	75fa      	strb	r2, [r7, #23]
 8006a96:	461a      	mov	r2, r3
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	2203      	movs	r2, #3
 8006a9e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006aa0:	e012      	b.n	8006ac8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	1c5a      	adds	r2, r3, #1
 8006aa6:	60fa      	str	r2, [r7, #12]
 8006aa8:	7dfa      	ldrb	r2, [r7, #23]
 8006aaa:	1c51      	adds	r1, r2, #1
 8006aac:	75f9      	strb	r1, [r7, #23]
 8006aae:	4611      	mov	r1, r2
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	440a      	add	r2, r1
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006ab8:	7dfb      	ldrb	r3, [r7, #23]
 8006aba:	1c5a      	adds	r2, r3, #1
 8006abc:	75fa      	strb	r2, [r7, #23]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1e8      	bne.n	8006aa2 <USBD_GetString+0x4e>
    }
  }
}
 8006ad0:	bf00      	nop
 8006ad2:	3718      	adds	r7, #24
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006ae4:	e005      	b.n	8006af2 <USBD_GetLen+0x1a>
  {
    len++;
 8006ae6:	7bfb      	ldrb	r3, [r7, #15]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	3301      	adds	r3, #1
 8006af0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1f5      	bne.n	8006ae6 <USBD_GetLen+0xe>
  }

  return len;
 8006afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3714      	adds	r7, #20
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bc80      	pop	{r7}
 8006b04:	4770      	bx	lr

08006b06 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b084      	sub	sp, #16
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	60f8      	str	r0, [r7, #12]
 8006b0e:	60b9      	str	r1, [r7, #8]
 8006b10:	4613      	mov	r3, r2
 8006b12:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2202      	movs	r2, #2
 8006b18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006b1c:	88fa      	ldrh	r2, [r7, #6]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006b22:	88fa      	ldrh	r2, [r7, #6]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006b28:	88fb      	ldrh	r3, [r7, #6]
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 fb77 	bl	8007222 <USBD_LL_Transmit>

  return USBD_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b084      	sub	sp, #16
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	60f8      	str	r0, [r7, #12]
 8006b46:	60b9      	str	r1, [r7, #8]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006b4c:	88fb      	ldrh	r3, [r7, #6]
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	2100      	movs	r1, #0
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f000 fb65 	bl	8007222 <USBD_LL_Transmit>

  return USBD_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b084      	sub	sp, #16
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	60f8      	str	r0, [r7, #12]
 8006b6a:	60b9      	str	r1, [r7, #8]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006b70:	88fb      	ldrh	r3, [r7, #6]
 8006b72:	68ba      	ldr	r2, [r7, #8]
 8006b74:	2100      	movs	r1, #0
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f000 fb76 	bl	8007268 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b082      	sub	sp, #8
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2204      	movs	r2, #4
 8006b92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006b96:	2300      	movs	r3, #0
 8006b98:	2200      	movs	r2, #0
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fb40 	bl	8007222 <USBD_LL_Transmit>

  return USBD_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2205      	movs	r2, #5
 8006bb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fb50 	bl	8007268 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
	...

08006bd4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006bd8:	2200      	movs	r2, #0
 8006bda:	490e      	ldr	r1, [pc, #56]	; (8006c14 <MX_USB_DEVICE_Init+0x40>)
 8006bdc:	480e      	ldr	r0, [pc, #56]	; (8006c18 <MX_USB_DEVICE_Init+0x44>)
 8006bde:	f7fe ff7d 	bl	8005adc <USBD_Init>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d001      	beq.n	8006bec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006be8:	f7f9 fc7e 	bl	80004e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006bec:	490b      	ldr	r1, [pc, #44]	; (8006c1c <MX_USB_DEVICE_Init+0x48>)
 8006bee:	480a      	ldr	r0, [pc, #40]	; (8006c18 <MX_USB_DEVICE_Init+0x44>)
 8006bf0:	f7fe ff9f 	bl	8005b32 <USBD_RegisterClass>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d001      	beq.n	8006bfe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006bfa:	f7f9 fc75 	bl	80004e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006bfe:	4806      	ldr	r0, [pc, #24]	; (8006c18 <MX_USB_DEVICE_Init+0x44>)
 8006c00:	f7fe ffb0 	bl	8005b64 <USBD_Start>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006c0a:	f7f9 fc6d 	bl	80004e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006c0e:	bf00      	nop
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	20000240 	.word	0x20000240
 8006c18:	20000314 	.word	0x20000314
 8006c1c:	20000144 	.word	0x20000144

08006c20 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	4603      	mov	r3, r0
 8006c28:	6039      	str	r1, [r7, #0]
 8006c2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	2212      	movs	r2, #18
 8006c30:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006c32:	4b03      	ldr	r3, [pc, #12]	; (8006c40 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bc80      	pop	{r7}
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	2000025c 	.word	0x2000025c

08006c44 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	6039      	str	r1, [r7, #0]
 8006c4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	2204      	movs	r2, #4
 8006c54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006c56:	4b03      	ldr	r3, [pc, #12]	; (8006c64 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bc80      	pop	{r7}
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	20000270 	.word	0x20000270

08006c68 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	4603      	mov	r3, r0
 8006c70:	6039      	str	r1, [r7, #0]
 8006c72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006c74:	79fb      	ldrb	r3, [r7, #7]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d105      	bne.n	8006c86 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006c7a:	683a      	ldr	r2, [r7, #0]
 8006c7c:	4907      	ldr	r1, [pc, #28]	; (8006c9c <USBD_FS_ProductStrDescriptor+0x34>)
 8006c7e:	4808      	ldr	r0, [pc, #32]	; (8006ca0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006c80:	f7ff fee8 	bl	8006a54 <USBD_GetString>
 8006c84:	e004      	b.n	8006c90 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	4904      	ldr	r1, [pc, #16]	; (8006c9c <USBD_FS_ProductStrDescriptor+0x34>)
 8006c8a:	4805      	ldr	r0, [pc, #20]	; (8006ca0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006c8c:	f7ff fee2 	bl	8006a54 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c90:	4b02      	ldr	r3, [pc, #8]	; (8006c9c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3708      	adds	r7, #8
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	200005d8 	.word	0x200005d8
 8006ca0:	080073b8 	.word	0x080073b8

08006ca4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	4603      	mov	r3, r0
 8006cac:	6039      	str	r1, [r7, #0]
 8006cae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006cb0:	683a      	ldr	r2, [r7, #0]
 8006cb2:	4904      	ldr	r1, [pc, #16]	; (8006cc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006cb4:	4804      	ldr	r0, [pc, #16]	; (8006cc8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006cb6:	f7ff fecd 	bl	8006a54 <USBD_GetString>
  return USBD_StrDesc;
 8006cba:	4b02      	ldr	r3, [pc, #8]	; (8006cc4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	200005d8 	.word	0x200005d8
 8006cc8:	080073cc 	.word	0x080073cc

08006ccc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	6039      	str	r1, [r7, #0]
 8006cd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	221a      	movs	r2, #26
 8006cdc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006cde:	f000 f843 	bl	8006d68 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006ce2:	4b02      	ldr	r3, [pc, #8]	; (8006cec <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3708      	adds	r7, #8
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	20000274 	.word	0x20000274

08006cf0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	6039      	str	r1, [r7, #0]
 8006cfa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006cfc:	79fb      	ldrb	r3, [r7, #7]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d105      	bne.n	8006d0e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	4907      	ldr	r1, [pc, #28]	; (8006d24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006d06:	4808      	ldr	r0, [pc, #32]	; (8006d28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006d08:	f7ff fea4 	bl	8006a54 <USBD_GetString>
 8006d0c:	e004      	b.n	8006d18 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006d0e:	683a      	ldr	r2, [r7, #0]
 8006d10:	4904      	ldr	r1, [pc, #16]	; (8006d24 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006d12:	4805      	ldr	r0, [pc, #20]	; (8006d28 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006d14:	f7ff fe9e 	bl	8006a54 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d18:	4b02      	ldr	r3, [pc, #8]	; (8006d24 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3708      	adds	r7, #8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	200005d8 	.word	0x200005d8
 8006d28:	080073e0 	.word	0x080073e0

08006d2c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	4603      	mov	r3, r0
 8006d34:	6039      	str	r1, [r7, #0]
 8006d36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006d38:	79fb      	ldrb	r3, [r7, #7]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d105      	bne.n	8006d4a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	4907      	ldr	r1, [pc, #28]	; (8006d60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006d42:	4808      	ldr	r0, [pc, #32]	; (8006d64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006d44:	f7ff fe86 	bl	8006a54 <USBD_GetString>
 8006d48:	e004      	b.n	8006d54 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006d4a:	683a      	ldr	r2, [r7, #0]
 8006d4c:	4904      	ldr	r1, [pc, #16]	; (8006d60 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006d4e:	4805      	ldr	r0, [pc, #20]	; (8006d64 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006d50:	f7ff fe80 	bl	8006a54 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006d54:	4b02      	ldr	r3, [pc, #8]	; (8006d60 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	200005d8 	.word	0x200005d8
 8006d64:	080073ec 	.word	0x080073ec

08006d68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006d6e:	4b0f      	ldr	r3, [pc, #60]	; (8006dac <Get_SerialNum+0x44>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006d74:	4b0e      	ldr	r3, [pc, #56]	; (8006db0 <Get_SerialNum+0x48>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006d7a:	4b0e      	ldr	r3, [pc, #56]	; (8006db4 <Get_SerialNum+0x4c>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4413      	add	r3, r2
 8006d86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d009      	beq.n	8006da2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006d8e:	2208      	movs	r2, #8
 8006d90:	4909      	ldr	r1, [pc, #36]	; (8006db8 <Get_SerialNum+0x50>)
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f000 f814 	bl	8006dc0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006d98:	2204      	movs	r2, #4
 8006d9a:	4908      	ldr	r1, [pc, #32]	; (8006dbc <Get_SerialNum+0x54>)
 8006d9c:	68b8      	ldr	r0, [r7, #8]
 8006d9e:	f000 f80f 	bl	8006dc0 <IntToUnicode>
  }
}
 8006da2:	bf00      	nop
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	1ffff7e8 	.word	0x1ffff7e8
 8006db0:	1ffff7ec 	.word	0x1ffff7ec
 8006db4:	1ffff7f0 	.word	0x1ffff7f0
 8006db8:	20000276 	.word	0x20000276
 8006dbc:	20000286 	.word	0x20000286

08006dc0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b087      	sub	sp, #28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	75fb      	strb	r3, [r7, #23]
 8006dd6:	e027      	b.n	8006e28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	0f1b      	lsrs	r3, r3, #28
 8006ddc:	2b09      	cmp	r3, #9
 8006dde:	d80b      	bhi.n	8006df8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	0f1b      	lsrs	r3, r3, #28
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	7dfb      	ldrb	r3, [r7, #23]
 8006de8:	005b      	lsls	r3, r3, #1
 8006dea:	4619      	mov	r1, r3
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	440b      	add	r3, r1
 8006df0:	3230      	adds	r2, #48	; 0x30
 8006df2:	b2d2      	uxtb	r2, r2
 8006df4:	701a      	strb	r2, [r3, #0]
 8006df6:	e00a      	b.n	8006e0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	0f1b      	lsrs	r3, r3, #28
 8006dfc:	b2da      	uxtb	r2, r3
 8006dfe:	7dfb      	ldrb	r3, [r7, #23]
 8006e00:	005b      	lsls	r3, r3, #1
 8006e02:	4619      	mov	r1, r3
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	440b      	add	r3, r1
 8006e08:	3237      	adds	r2, #55	; 0x37
 8006e0a:	b2d2      	uxtb	r2, r2
 8006e0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	011b      	lsls	r3, r3, #4
 8006e12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006e14:	7dfb      	ldrb	r3, [r7, #23]
 8006e16:	005b      	lsls	r3, r3, #1
 8006e18:	3301      	adds	r3, #1
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	2200      	movs	r2, #0
 8006e20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006e22:	7dfb      	ldrb	r3, [r7, #23]
 8006e24:	3301      	adds	r3, #1
 8006e26:	75fb      	strb	r3, [r7, #23]
 8006e28:	7dfa      	ldrb	r2, [r7, #23]
 8006e2a:	79fb      	ldrb	r3, [r7, #7]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d3d3      	bcc.n	8006dd8 <IntToUnicode+0x18>
  }
}
 8006e30:	bf00      	nop
 8006e32:	bf00      	nop
 8006e34:	371c      	adds	r7, #28
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bc80      	pop	{r7}
 8006e3a:	4770      	bx	lr

08006e3c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a0d      	ldr	r2, [pc, #52]	; (8006e80 <HAL_PCD_MspInit+0x44>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d113      	bne.n	8006e76 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006e4e:	4b0d      	ldr	r3, [pc, #52]	; (8006e84 <HAL_PCD_MspInit+0x48>)
 8006e50:	69db      	ldr	r3, [r3, #28]
 8006e52:	4a0c      	ldr	r2, [pc, #48]	; (8006e84 <HAL_PCD_MspInit+0x48>)
 8006e54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006e58:	61d3      	str	r3, [r2, #28]
 8006e5a:	4b0a      	ldr	r3, [pc, #40]	; (8006e84 <HAL_PCD_MspInit+0x48>)
 8006e5c:	69db      	ldr	r3, [r3, #28]
 8006e5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e62:	60fb      	str	r3, [r7, #12]
 8006e64:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006e66:	2200      	movs	r2, #0
 8006e68:	2100      	movs	r1, #0
 8006e6a:	2014      	movs	r0, #20
 8006e6c:	f7f9 fd0b 	bl	8000886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006e70:	2014      	movs	r0, #20
 8006e72:	f7f9 fd24 	bl	80008be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006e76:	bf00      	nop
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	40005c00 	.word	0x40005c00
 8006e84:	40021000 	.word	0x40021000

08006e88 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	4610      	mov	r0, r2
 8006ea0:	f7fe fea8 	bl	8005bf4 <USBD_LL_SetupStage>
}
 8006ea4:	bf00      	nop
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8006ebe:	78fa      	ldrb	r2, [r7, #3]
 8006ec0:	6879      	ldr	r1, [r7, #4]
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	4413      	add	r3, r2
 8006ec8:	00db      	lsls	r3, r3, #3
 8006eca:	440b      	add	r3, r1
 8006ecc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	78fb      	ldrb	r3, [r7, #3]
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	f7fe feda 	bl	8005c8e <USBD_LL_DataOutStage>
}
 8006eda:	bf00      	nop
 8006edc:	3708      	adds	r7, #8
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b082      	sub	sp, #8
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	460b      	mov	r3, r1
 8006eec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8006ef4:	78fa      	ldrb	r2, [r7, #3]
 8006ef6:	6879      	ldr	r1, [r7, #4]
 8006ef8:	4613      	mov	r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4413      	add	r3, r2
 8006efe:	00db      	lsls	r3, r3, #3
 8006f00:	440b      	add	r3, r1
 8006f02:	333c      	adds	r3, #60	; 0x3c
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	78fb      	ldrb	r3, [r7, #3]
 8006f08:	4619      	mov	r1, r3
 8006f0a:	f7fe ff31 	bl	8005d70 <USBD_LL_DataInStage>
}
 8006f0e:	bf00      	nop
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b082      	sub	sp, #8
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8006f24:	4618      	mov	r0, r3
 8006f26:	f7ff f841 	bl	8005fac <USBD_LL_SOF>
}
 8006f2a:	bf00      	nop
 8006f2c:	3708      	adds	r7, #8
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b084      	sub	sp, #16
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d001      	beq.n	8006f4a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006f46:	f7f9 facf 	bl	80004e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8006f50:	7bfa      	ldrb	r2, [r7, #15]
 8006f52:	4611      	mov	r1, r2
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7fe fff1 	bl	8005f3c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7fe ffaa 	bl	8005eba <USBD_LL_Reset>
}
 8006f66:	bf00      	nop
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
	...

08006f70 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7fe ffeb 	bl	8005f5a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d005      	beq.n	8006f98 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006f8c:	4b04      	ldr	r3, [pc, #16]	; (8006fa0 <HAL_PCD_SuspendCallback+0x30>)
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	4a03      	ldr	r2, [pc, #12]	; (8006fa0 <HAL_PCD_SuspendCallback+0x30>)
 8006f92:	f043 0306 	orr.w	r3, r3, #6
 8006f96:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006f98:	bf00      	nop
 8006f9a:	3708      	adds	r7, #8
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	e000ed00 	.word	0xe000ed00

08006fa4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7fe ffe5 	bl	8005f82 <USBD_LL_Resume>
}
 8006fb8:	bf00      	nop
 8006fba:	3708      	adds	r7, #8
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006fc8:	4a1f      	ldr	r2, [pc, #124]	; (8007048 <USBD_LL_Init+0x88>)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a1d      	ldr	r2, [pc, #116]	; (8007048 <USBD_LL_Init+0x88>)
 8006fd4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006fd8:	4b1b      	ldr	r3, [pc, #108]	; (8007048 <USBD_LL_Init+0x88>)
 8006fda:	4a1c      	ldr	r2, [pc, #112]	; (800704c <USBD_LL_Init+0x8c>)
 8006fdc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006fde:	4b1a      	ldr	r3, [pc, #104]	; (8007048 <USBD_LL_Init+0x88>)
 8006fe0:	2208      	movs	r2, #8
 8006fe2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006fe4:	4b18      	ldr	r3, [pc, #96]	; (8007048 <USBD_LL_Init+0x88>)
 8006fe6:	2202      	movs	r2, #2
 8006fe8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006fea:	4b17      	ldr	r3, [pc, #92]	; (8007048 <USBD_LL_Init+0x88>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006ff0:	4b15      	ldr	r3, [pc, #84]	; (8007048 <USBD_LL_Init+0x88>)
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006ff6:	4b14      	ldr	r3, [pc, #80]	; (8007048 <USBD_LL_Init+0x88>)
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006ffc:	4812      	ldr	r0, [pc, #72]	; (8007048 <USBD_LL_Init+0x88>)
 8006ffe:	f7f9 fe2c 	bl	8000c5a <HAL_PCD_Init>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007008:	f7f9 fa6e 	bl	80004e8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007012:	2318      	movs	r3, #24
 8007014:	2200      	movs	r2, #0
 8007016:	2100      	movs	r1, #0
 8007018:	f7fb fb34 	bl	8002684 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007022:	2358      	movs	r3, #88	; 0x58
 8007024:	2200      	movs	r2, #0
 8007026:	2180      	movs	r1, #128	; 0x80
 8007028:	f7fb fb2c 	bl	8002684 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007032:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007036:	2200      	movs	r2, #0
 8007038:	2181      	movs	r1, #129	; 0x81
 800703a:	f7fb fb23 	bl	8002684 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	200007d8 	.word	0x200007d8
 800704c:	40005c00 	.word	0x40005c00

08007050 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007058:	2300      	movs	r3, #0
 800705a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800705c:	2300      	movs	r3, #0
 800705e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007066:	4618      	mov	r0, r3
 8007068:	f7f9 fef6 	bl	8000e58 <HAL_PCD_Start>
 800706c:	4603      	mov	r3, r0
 800706e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007070:	7bfb      	ldrb	r3, [r7, #15]
 8007072:	4618      	mov	r0, r3
 8007074:	f000 f93c 	bl	80072f0 <USBD_Get_USB_Status>
 8007078:	4603      	mov	r3, r0
 800707a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800707c:	7bbb      	ldrb	r3, [r7, #14]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b084      	sub	sp, #16
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
 800708e:	4608      	mov	r0, r1
 8007090:	4611      	mov	r1, r2
 8007092:	461a      	mov	r2, r3
 8007094:	4603      	mov	r3, r0
 8007096:	70fb      	strb	r3, [r7, #3]
 8007098:	460b      	mov	r3, r1
 800709a:	70bb      	strb	r3, [r7, #2]
 800709c:	4613      	mov	r3, r2
 800709e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070a0:	2300      	movs	r3, #0
 80070a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80070ae:	78bb      	ldrb	r3, [r7, #2]
 80070b0:	883a      	ldrh	r2, [r7, #0]
 80070b2:	78f9      	ldrb	r1, [r7, #3]
 80070b4:	f7fa f84b 	bl	800114e <HAL_PCD_EP_Open>
 80070b8:	4603      	mov	r3, r0
 80070ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070bc:	7bfb      	ldrb	r3, [r7, #15]
 80070be:	4618      	mov	r0, r3
 80070c0:	f000 f916 	bl	80072f0 <USBD_Get_USB_Status>
 80070c4:	4603      	mov	r3, r0
 80070c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b084      	sub	sp, #16
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	460b      	mov	r3, r1
 80070dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070de:	2300      	movs	r3, #0
 80070e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070e2:	2300      	movs	r3, #0
 80070e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070ec:	78fa      	ldrb	r2, [r7, #3]
 80070ee:	4611      	mov	r1, r2
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7fa f889 	bl	8001208 <HAL_PCD_EP_Close>
 80070f6:	4603      	mov	r3, r0
 80070f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070fa:	7bfb      	ldrb	r3, [r7, #15]
 80070fc:	4618      	mov	r0, r3
 80070fe:	f000 f8f7 	bl	80072f0 <USBD_Get_USB_Status>
 8007102:	4603      	mov	r3, r0
 8007104:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007106:	7bbb      	ldrb	r3, [r7, #14]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3710      	adds	r7, #16
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	460b      	mov	r3, r1
 800711a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800711c:	2300      	movs	r3, #0
 800711e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007120:	2300      	movs	r3, #0
 8007122:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800712a:	78fa      	ldrb	r2, [r7, #3]
 800712c:	4611      	mov	r1, r2
 800712e:	4618      	mov	r0, r3
 8007130:	f7fa f91a 	bl	8001368 <HAL_PCD_EP_SetStall>
 8007134:	4603      	mov	r3, r0
 8007136:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007138:	7bfb      	ldrb	r3, [r7, #15]
 800713a:	4618      	mov	r0, r3
 800713c:	f000 f8d8 	bl	80072f0 <USBD_Get_USB_Status>
 8007140:	4603      	mov	r3, r0
 8007142:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007144:	7bbb      	ldrb	r3, [r7, #14]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b084      	sub	sp, #16
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
 8007156:	460b      	mov	r3, r1
 8007158:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800715a:	2300      	movs	r3, #0
 800715c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800715e:	2300      	movs	r3, #0
 8007160:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007168:	78fa      	ldrb	r2, [r7, #3]
 800716a:	4611      	mov	r1, r2
 800716c:	4618      	mov	r0, r3
 800716e:	f7fa f95b 	bl	8001428 <HAL_PCD_EP_ClrStall>
 8007172:	4603      	mov	r3, r0
 8007174:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007176:	7bfb      	ldrb	r3, [r7, #15]
 8007178:	4618      	mov	r0, r3
 800717a:	f000 f8b9 	bl	80072f0 <USBD_Get_USB_Status>
 800717e:	4603      	mov	r3, r0
 8007180:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007182:	7bbb      	ldrb	r3, [r7, #14]
}
 8007184:	4618      	mov	r0, r3
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	460b      	mov	r3, r1
 8007196:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800719e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80071a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	da0c      	bge.n	80071c2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80071a8:	78fb      	ldrb	r3, [r7, #3]
 80071aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071ae:	68f9      	ldr	r1, [r7, #12]
 80071b0:	1c5a      	adds	r2, r3, #1
 80071b2:	4613      	mov	r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	00db      	lsls	r3, r3, #3
 80071ba:	440b      	add	r3, r1
 80071bc:	3302      	adds	r3, #2
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	e00b      	b.n	80071da <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80071c2:	78fb      	ldrb	r3, [r7, #3]
 80071c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071c8:	68f9      	ldr	r1, [r7, #12]
 80071ca:	4613      	mov	r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	00db      	lsls	r3, r3, #3
 80071d2:	440b      	add	r3, r1
 80071d4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80071d8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	bc80      	pop	{r7}
 80071e2:	4770      	bx	lr

080071e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	460b      	mov	r3, r1
 80071ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071f0:	2300      	movs	r3, #0
 80071f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071f4:	2300      	movs	r3, #0
 80071f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071fe:	78fa      	ldrb	r2, [r7, #3]
 8007200:	4611      	mov	r1, r2
 8007202:	4618      	mov	r0, r3
 8007204:	f7f9 ff7e 	bl	8001104 <HAL_PCD_SetAddress>
 8007208:	4603      	mov	r3, r0
 800720a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800720c:	7bfb      	ldrb	r3, [r7, #15]
 800720e:	4618      	mov	r0, r3
 8007210:	f000 f86e 	bl	80072f0 <USBD_Get_USB_Status>
 8007214:	4603      	mov	r3, r0
 8007216:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007218:	7bbb      	ldrb	r3, [r7, #14]
}
 800721a:	4618      	mov	r0, r3
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b086      	sub	sp, #24
 8007226:	af00      	add	r7, sp, #0
 8007228:	60f8      	str	r0, [r7, #12]
 800722a:	607a      	str	r2, [r7, #4]
 800722c:	461a      	mov	r2, r3
 800722e:	460b      	mov	r3, r1
 8007230:	72fb      	strb	r3, [r7, #11]
 8007232:	4613      	mov	r3, r2
 8007234:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007236:	2300      	movs	r3, #0
 8007238:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800723a:	2300      	movs	r3, #0
 800723c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007244:	893b      	ldrh	r3, [r7, #8]
 8007246:	7af9      	ldrb	r1, [r7, #11]
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	f7fa f856 	bl	80012fa <HAL_PCD_EP_Transmit>
 800724e:	4603      	mov	r3, r0
 8007250:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007252:	7dfb      	ldrb	r3, [r7, #23]
 8007254:	4618      	mov	r0, r3
 8007256:	f000 f84b 	bl	80072f0 <USBD_Get_USB_Status>
 800725a:	4603      	mov	r3, r0
 800725c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800725e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007260:	4618      	mov	r0, r3
 8007262:	3718      	adds	r7, #24
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	607a      	str	r2, [r7, #4]
 8007272:	461a      	mov	r2, r3
 8007274:	460b      	mov	r3, r1
 8007276:	72fb      	strb	r3, [r7, #11]
 8007278:	4613      	mov	r3, r2
 800727a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800727c:	2300      	movs	r3, #0
 800727e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007280:	2300      	movs	r3, #0
 8007282:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800728a:	893b      	ldrh	r3, [r7, #8]
 800728c:	7af9      	ldrb	r1, [r7, #11]
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	f7fa f802 	bl	8001298 <HAL_PCD_EP_Receive>
 8007294:	4603      	mov	r3, r0
 8007296:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007298:	7dfb      	ldrb	r3, [r7, #23]
 800729a:	4618      	mov	r0, r3
 800729c:	f000 f828 	bl	80072f0 <USBD_Get_USB_Status>
 80072a0:	4603      	mov	r3, r0
 80072a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80072a4:	7dbb      	ldrb	r3, [r7, #22]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3718      	adds	r7, #24
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
	...

080072b0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80072b8:	4b02      	ldr	r3, [pc, #8]	; (80072c4 <USBD_static_malloc+0x14>)
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	370c      	adds	r7, #12
 80072be:	46bd      	mov	sp, r7
 80072c0:	bc80      	pop	{r7}
 80072c2:	4770      	bx	lr
 80072c4:	20000ac8 	.word	0x20000ac8

080072c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]

}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bc80      	pop	{r7}
 80072d8:	4770      	bx	lr

080072da <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072da:	b480      	push	{r7}
 80072dc:	b083      	sub	sp, #12
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
 80072e2:	460b      	mov	r3, r1
 80072e4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80072e6:	bf00      	nop
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bc80      	pop	{r7}
 80072ee:	4770      	bx	lr

080072f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	4603      	mov	r3, r0
 80072f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072fa:	2300      	movs	r3, #0
 80072fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80072fe:	79fb      	ldrb	r3, [r7, #7]
 8007300:	2b03      	cmp	r3, #3
 8007302:	d817      	bhi.n	8007334 <USBD_Get_USB_Status+0x44>
 8007304:	a201      	add	r2, pc, #4	; (adr r2, 800730c <USBD_Get_USB_Status+0x1c>)
 8007306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730a:	bf00      	nop
 800730c:	0800731d 	.word	0x0800731d
 8007310:	08007323 	.word	0x08007323
 8007314:	08007329 	.word	0x08007329
 8007318:	0800732f 	.word	0x0800732f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800731c:	2300      	movs	r3, #0
 800731e:	73fb      	strb	r3, [r7, #15]
    break;
 8007320:	e00b      	b.n	800733a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007322:	2302      	movs	r3, #2
 8007324:	73fb      	strb	r3, [r7, #15]
    break;
 8007326:	e008      	b.n	800733a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007328:	2301      	movs	r3, #1
 800732a:	73fb      	strb	r3, [r7, #15]
    break;
 800732c:	e005      	b.n	800733a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800732e:	2302      	movs	r3, #2
 8007330:	73fb      	strb	r3, [r7, #15]
    break;
 8007332:	e002      	b.n	800733a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007334:	2302      	movs	r3, #2
 8007336:	73fb      	strb	r3, [r7, #15]
    break;
 8007338:	bf00      	nop
  }
  return usb_status;
 800733a:	7bfb      	ldrb	r3, [r7, #15]
}
 800733c:	4618      	mov	r0, r3
 800733e:	3714      	adds	r7, #20
 8007340:	46bd      	mov	sp, r7
 8007342:	bc80      	pop	{r7}
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop

08007348 <__libc_init_array>:
 8007348:	b570      	push	{r4, r5, r6, lr}
 800734a:	2600      	movs	r6, #0
 800734c:	4d0c      	ldr	r5, [pc, #48]	; (8007380 <__libc_init_array+0x38>)
 800734e:	4c0d      	ldr	r4, [pc, #52]	; (8007384 <__libc_init_array+0x3c>)
 8007350:	1b64      	subs	r4, r4, r5
 8007352:	10a4      	asrs	r4, r4, #2
 8007354:	42a6      	cmp	r6, r4
 8007356:	d109      	bne.n	800736c <__libc_init_array+0x24>
 8007358:	f000 f822 	bl	80073a0 <_init>
 800735c:	2600      	movs	r6, #0
 800735e:	4d0a      	ldr	r5, [pc, #40]	; (8007388 <__libc_init_array+0x40>)
 8007360:	4c0a      	ldr	r4, [pc, #40]	; (800738c <__libc_init_array+0x44>)
 8007362:	1b64      	subs	r4, r4, r5
 8007364:	10a4      	asrs	r4, r4, #2
 8007366:	42a6      	cmp	r6, r4
 8007368:	d105      	bne.n	8007376 <__libc_init_array+0x2e>
 800736a:	bd70      	pop	{r4, r5, r6, pc}
 800736c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007370:	4798      	blx	r3
 8007372:	3601      	adds	r6, #1
 8007374:	e7ee      	b.n	8007354 <__libc_init_array+0xc>
 8007376:	f855 3b04 	ldr.w	r3, [r5], #4
 800737a:	4798      	blx	r3
 800737c:	3601      	adds	r6, #1
 800737e:	e7f2      	b.n	8007366 <__libc_init_array+0x1e>
 8007380:	08007420 	.word	0x08007420
 8007384:	08007420 	.word	0x08007420
 8007388:	08007420 	.word	0x08007420
 800738c:	08007424 	.word	0x08007424

08007390 <memset>:
 8007390:	4603      	mov	r3, r0
 8007392:	4402      	add	r2, r0
 8007394:	4293      	cmp	r3, r2
 8007396:	d100      	bne.n	800739a <memset+0xa>
 8007398:	4770      	bx	lr
 800739a:	f803 1b01 	strb.w	r1, [r3], #1
 800739e:	e7f9      	b.n	8007394 <memset+0x4>

080073a0 <_init>:
 80073a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a2:	bf00      	nop
 80073a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073a6:	bc08      	pop	{r3}
 80073a8:	469e      	mov	lr, r3
 80073aa:	4770      	bx	lr

080073ac <_fini>:
 80073ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ae:	bf00      	nop
 80073b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073b2:	bc08      	pop	{r3}
 80073b4:	469e      	mov	lr, r3
 80073b6:	4770      	bx	lr
